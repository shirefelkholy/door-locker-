
hmi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00002f2a  00002fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800140  00800140  0000309e  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fef  00000000  00000000  00005ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a860  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b41b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 34       	cpi	r26, 0x44	; 68
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 0c 	call	0x1890	; 0x1890 <main>
      8a:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e3       	ldi	r26, 0x37	; 55
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e3       	ldi	r24, 0x37	; 55
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main_options>:
 * Function to calculate numbers of Overflow
 * */
void Timer0_Tick(void);

void main_options(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    11ca:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
	LCD_displayString("+ :Open Door");
    11ce:	80 e6       	ldi	r24, 0x60	; 96
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	LCD_moveCursor(1,0);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
	LCD_displayString("- :Change Pass");
    11de:	8d e6       	ldi	r24, 0x6D	; 109
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <door_unlock>:

void door_unlock(void)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    11f4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
	LCD_displayString("Door is ");
    11f8:	8c e7       	ldi	r24, 0x7C	; 124
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
	LCD_displayString("unlocking");
    1208:	85 e8       	ldi	r24, 0x85	; 133
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <door_lock>:

void door_lock(void)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    121e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
	LCD_displayString("Door is Locking");
    1222:	8f e8       	ldi	r24, 0x8F	; 143
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <first_run>:



void first_run(uint8 *key){
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	a0 97       	sbiw	r28, 0x20	; 32
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	98 a3       	std	Y+32, r25	; 0x20
    1246:	8f 8f       	std	Y+31, r24	; 0x1f
	LCD_clearScreen();
    1248:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
	uint8 i = 0, check_num = 0;
    124c:	1e 8e       	std	Y+30, r1	; 0x1e
    124e:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_displayString("Please Enter New");
    1250:	8f e9       	ldi	r24, 0x9F	; 159
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
	LCD_displayString("Password:");
    1260:	80 eb       	ldi	r24, 0xB0	; 176
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	for (i = 0; i < 5; i++) {
    1268:	1e 8e       	std	Y+30, r1	; 0x1e
    126a:	11 c1       	rjmp	.+546    	; 0x148e <first_run+0x25e>
		check_num = KEYPAD_getPressedKey();
    126c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1270:	8d 8f       	std	Y+29, r24	; 0x1d
		if (check_num <= 9 && check_num >= 0) {
    1272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1274:	8a 30       	cpi	r24, 0x0A	; 10
    1276:	08 f0       	brcs	.+2      	; 0x127a <first_run+0x4a>
    1278:	80 c0       	rjmp	.+256    	; 0x137a <first_run+0x14a>
			key[i] = check_num;
    127a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1282:	98 a1       	ldd	r25, Y+32	; 0x20
    1284:	fc 01       	movw	r30, r24
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    128c:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    128e:	8a e2       	ldi	r24, 0x2A	; 42
    1290:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayCharacter>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a6 e9       	ldi	r26, 0x96	; 150
    129a:	b3 e4       	ldi	r27, 0x43	; 67
    129c:	89 8f       	std	Y+25, r24	; 0x19
    129e:	9a 8f       	std	Y+26, r25	; 0x1a
    12a0:	ab 8f       	std	Y+27, r26	; 0x1b
    12a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	69 8d       	ldd	r22, Y+25	; 0x19
    12a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a e7       	ldi	r20, 0x7A	; 122
    12b2:	53 e4       	ldi	r21, 0x43	; 67
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8d 8b       	std	Y+21, r24	; 0x15
    12be:	9e 8b       	std	Y+22, r25	; 0x16
    12c0:	af 8b       	std	Y+23, r26	; 0x17
    12c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12c4:	6d 89       	ldd	r22, Y+21	; 0x15
    12c6:	7e 89       	ldd	r23, Y+22	; 0x16
    12c8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ca:	98 8d       	ldd	r25, Y+24	; 0x18
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <first_run+0xb6>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	8b 8b       	std	Y+19, r24	; 0x13
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <first_run+0x134>
	else if (__tmp > 65535)
    12e6:	6d 89       	ldd	r22, Y+21	; 0x15
    12e8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ea:	8f 89       	ldd	r24, Y+23	; 0x17
    12ec:	98 8d       	ldd	r25, Y+24	; 0x18
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <first_run+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <first_run+0x116>
    1328:	89 e1       	ldi	r24, 0x19	; 25
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9a 8b       	std	Y+18, r25	; 0x12
    132e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1330:	89 89       	ldd	r24, Y+17	; 0x11
    1332:	9a 89       	ldd	r25, Y+18	; 0x12
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <first_run+0x104>
    1338:	9a 8b       	std	Y+18, r25	; 0x12
    133a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	8b 89       	ldd	r24, Y+19	; 0x13
    133e:	9c 89       	ldd	r25, Y+20	; 0x14
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9c 8b       	std	Y+20, r25	; 0x14
    1344:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	8b 89       	ldd	r24, Y+19	; 0x13
    1348:	9c 89       	ldd	r25, Y+20	; 0x14
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <first_run+0xf8>
    134e:	9c c0       	rjmp	.+312    	; 0x1488 <first_run+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6d 89       	ldd	r22, Y+21	; 0x15
    1352:	7e 89       	ldd	r23, Y+22	; 0x16
    1354:	8f 89       	ldd	r24, Y+23	; 0x17
    1356:	98 8d       	ldd	r25, Y+24	; 0x18
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9c 8b       	std	Y+20, r25	; 0x14
    1362:	8b 8b       	std	Y+19, r24	; 0x13
    1364:	8b 89       	ldd	r24, Y+19	; 0x13
    1366:	9c 89       	ldd	r25, Y+20	; 0x14
    1368:	98 8b       	std	Y+16, r25	; 0x10
    136a:	8f 87       	std	Y+15, r24	; 0x0f
    136c:	8f 85       	ldd	r24, Y+15	; 0x0f
    136e:	98 89       	ldd	r25, Y+16	; 0x10
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <first_run+0x140>
    1374:	98 8b       	std	Y+16, r25	; 0x10
    1376:	8f 87       	std	Y+15, r24	; 0x0f
    1378:	87 c0       	rjmp	.+270    	; 0x1488 <first_run+0x258>
			_delay_ms(300);
		} else {
			LCD_clearScreen();
    137a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
			LCD_displayString("Please Enter Five Numbs!");
    137e:	8a eb       	ldi	r24, 0xBA	; 186
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	aa ef       	ldi	r26, 0xFA	; 250
    138c:	b3 e4       	ldi	r27, 0x43	; 67
    138e:	8b 87       	std	Y+11, r24	; 0x0b
    1390:	9c 87       	std	Y+12, r25	; 0x0c
    1392:	ad 87       	std	Y+13, r26	; 0x0d
    1394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1396:	6b 85       	ldd	r22, Y+11	; 0x0b
    1398:	7c 85       	ldd	r23, Y+12	; 0x0c
    139a:	8d 85       	ldd	r24, Y+13	; 0x0d
    139c:	9e 85       	ldd	r25, Y+14	; 0x0e
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a e7       	ldi	r20, 0x7A	; 122
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8f 83       	std	Y+7, r24	; 0x07
    13b0:	98 87       	std	Y+8, r25	; 0x08
    13b2:	a9 87       	std	Y+9, r26	; 0x09
    13b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b6:	6f 81       	ldd	r22, Y+7	; 0x07
    13b8:	78 85       	ldd	r23, Y+8	; 0x08
    13ba:	89 85       	ldd	r24, Y+9	; 0x09
    13bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <first_run+0x1a8>
		__ticks = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	3f c0       	rjmp	.+126    	; 0x1456 <first_run+0x226>
	else if (__tmp > 65535)
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	4f e7       	ldi	r20, 0x7F	; 127
    13e6:	57 e4       	ldi	r21, 0x47	; 71
    13e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	4c f5       	brge	.+82     	; 0x1442 <first_run+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <first_run+0x208>
    141a:	89 e1       	ldi	r24, 0x19	; 25
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <first_run+0x1f6>
    142a:	9c 83       	std	Y+4, r25	; 0x04
    142c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <first_run+0x1ea>
    1440:	14 c0       	rjmp	.+40     	; 0x146a <first_run+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <first_run+0x232>
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    146a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
			LCD_displayString("Please Enter New");
    146e:	8f e9       	ldi	r24, 0x9F	; 159
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
			LCD_displayString("Password:");
    147e:	80 eb       	ldi	r24, 0xB0	; 176
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
			i = 0;
    1486:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
	uint8 i = 0, check_num = 0;
	LCD_displayString("Please Enter New");
	LCD_moveCursor(1, 0);
	LCD_displayString("Password:");
	for (i = 0; i < 5; i++) {
    1488:	8e 8d       	ldd	r24, Y+30	; 0x1e
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	8e 8f       	std	Y+30, r24	; 0x1e
    148e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1490:	85 30       	cpi	r24, 0x05	; 5
    1492:	08 f4       	brcc	.+2      	; 0x1496 <first_run+0x266>
    1494:	eb ce       	rjmp	.-554    	; 0x126c <first_run+0x3c>
			LCD_moveCursor(1, 0);
			LCD_displayString("Password:");
			i = 0;
		}
	}
}
    1496:	a0 96       	adiw	r28, 0x20	; 32
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <ask_pass>:

void ask_pass(uint8 *key) {
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	61 97       	sbiw	r28, 0x11	; 17
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	99 8b       	std	Y+17, r25	; 0x11
    14c2:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    14c4:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    14c6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
	LCD_displayString("Please Enter");
    14ca:	83 ed       	ldi	r24, 0xD3	; 211
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	LCD_moveCursor(1, 0);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
	LCD_displayString("Password:");
    14da:	80 eb       	ldi	r24, 0xB0	; 176
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	for (i = 0; i < 5; i++) {
    14e2:	1f 86       	std	Y+15, r1	; 0x0f
    14e4:	84 c0       	rjmp	.+264    	; 0x15ee <ask_pass+0x146>
		key[i] = KEYPAD_getPressedKey();
    14e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	88 89       	ldd	r24, Y+16	; 0x10
    14ee:	99 89       	ldd	r25, Y+17	; 0x11
    14f0:	8c 01       	movw	r16, r24
    14f2:	02 0f       	add	r16, r18
    14f4:	13 1f       	adc	r17, r19
    14f6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    14fa:	f8 01       	movw	r30, r16
    14fc:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    14fe:	8a e2       	ldi	r24, 0x2A	; 42
    1500:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayCharacter>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a6 e9       	ldi	r26, 0x96	; 150
    150a:	b3 e4       	ldi	r27, 0x43	; 67
    150c:	8b 87       	std	Y+11, r24	; 0x0b
    150e:	9c 87       	std	Y+12, r25	; 0x0c
    1510:	ad 87       	std	Y+13, r26	; 0x0d
    1512:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1514:	6b 85       	ldd	r22, Y+11	; 0x0b
    1516:	7c 85       	ldd	r23, Y+12	; 0x0c
    1518:	8d 85       	ldd	r24, Y+13	; 0x0d
    151a:	9e 85       	ldd	r25, Y+14	; 0x0e
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4a e7       	ldi	r20, 0x7A	; 122
    1522:	53 e4       	ldi	r21, 0x43	; 67
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	8f 83       	std	Y+7, r24	; 0x07
    152e:	98 87       	std	Y+8, r25	; 0x08
    1530:	a9 87       	std	Y+9, r26	; 0x09
    1532:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1534:	6f 81       	ldd	r22, Y+7	; 0x07
    1536:	78 85       	ldd	r23, Y+8	; 0x08
    1538:	89 85       	ldd	r24, Y+9	; 0x09
    153a:	9a 85       	ldd	r25, Y+10	; 0x0a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	2c f4       	brge	.+10     	; 0x1556 <ask_pass+0xae>
		__ticks = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	3f c0       	rjmp	.+126    	; 0x15d4 <ask_pass+0x12c>
	else if (__tmp > 65535)
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	4c f5       	brge	.+82     	; 0x15c0 <ask_pass+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1570:	7c 85       	ldd	r23, Y+12	; 0x0c
    1572:	8d 85       	ldd	r24, Y+13	; 0x0d
    1574:	9e 85       	ldd	r25, Y+14	; 0x0e
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <ask_pass+0x10e>
    1598:	89 e1       	ldi	r24, 0x19	; 25
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9c 83       	std	Y+4, r25	; 0x04
    159e:	8b 83       	std	Y+3, r24	; 0x03
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <ask_pass+0xfc>
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	69 f7       	brne	.-38     	; 0x1598 <ask_pass+0xf0>
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <ask_pass+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c0:	6f 81       	ldd	r22, Y+7	; 0x07
    15c2:	78 85       	ldd	r23, Y+8	; 0x08
    15c4:	89 85       	ldd	r24, Y+9	; 0x09
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <ask_pass+0x138>
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
	uint8 i = 0;
	LCD_clearScreen();
	LCD_displayString("Please Enter");
	LCD_moveCursor(1, 0);
	LCD_displayString("Password:");
	for (i = 0; i < 5; i++) {
    15e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
    15ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f0:	85 30       	cpi	r24, 0x05	; 5
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <ask_pass+0x14e>
    15f4:	78 cf       	rjmp	.-272    	; 0x14e6 <ask_pass+0x3e>
		key[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	key[5] = '#';
    15f6:	88 89       	ldd	r24, Y+16	; 0x10
    15f8:	99 89       	ldd	r25, Y+17	; 0x11
    15fa:	fc 01       	movw	r30, r24
    15fc:	35 96       	adiw	r30, 0x05	; 5
    15fe:	83 e2       	ldi	r24, 0x23	; 35
    1600:	80 83       	st	Z, r24
	key[6] = '\0';
    1602:	88 89       	ldd	r24, Y+16	; 0x10
    1604:	99 89       	ldd	r25, Y+17	; 0x11
    1606:	fc 01       	movw	r30, r24
    1608:	36 96       	adiw	r30, 0x06	; 6
    160a:	10 82       	st	Z, r1
	UART_sendString(key);
    160c:	88 89       	ldd	r24, Y+16	; 0x10
    160e:	99 89       	ldd	r25, Y+17	; 0x11
    1610:	0e 94 89 16 	call	0x2d12	; 0x2d12 <UART_sendString>
}
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <old_pass>:

void old_pass(uint8 *key) {
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	6f 97       	sbiw	r28, 0x1f	; 31
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	9f 8f       	std	Y+31, r25	; 0x1f
    1644:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i = 0;
    1646:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    1648:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
	LCD_displayString("Please Enter Old ");
    164c:	80 ee       	ldi	r24, 0xE0	; 224
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
	LCD_displayString("Password :");
    165c:	82 ef       	ldi	r24, 0xF2	; 242
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	aa ef       	ldi	r26, 0xFA	; 250
    166a:	b3 e4       	ldi	r27, 0x43	; 67
    166c:	89 8f       	std	Y+25, r24	; 0x19
    166e:	9a 8f       	std	Y+26, r25	; 0x1a
    1670:	ab 8f       	std	Y+27, r26	; 0x1b
    1672:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1674:	69 8d       	ldd	r22, Y+25	; 0x19
    1676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	4a e7       	ldi	r20, 0x7A	; 122
    1682:	53 e4       	ldi	r21, 0x43	; 67
    1684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	8d 8b       	std	Y+21, r24	; 0x15
    168e:	9e 8b       	std	Y+22, r25	; 0x16
    1690:	af 8b       	std	Y+23, r26	; 0x17
    1692:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1694:	6d 89       	ldd	r22, Y+21	; 0x15
    1696:	7e 89       	ldd	r23, Y+22	; 0x16
    1698:	8f 89       	ldd	r24, Y+23	; 0x17
    169a:	98 8d       	ldd	r25, Y+24	; 0x18
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	5f e3       	ldi	r21, 0x3F	; 63
    16a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a8:	88 23       	and	r24, r24
    16aa:	2c f4       	brge	.+10     	; 0x16b6 <old_pass+0x8c>
		__ticks = 1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9c 8b       	std	Y+20, r25	; 0x14
    16b2:	8b 8b       	std	Y+19, r24	; 0x13
    16b4:	3f c0       	rjmp	.+126    	; 0x1734 <old_pass+0x10a>
	else if (__tmp > 65535)
    16b6:	6d 89       	ldd	r22, Y+21	; 0x15
    16b8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	98 8d       	ldd	r25, Y+24	; 0x18
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	3f ef       	ldi	r19, 0xFF	; 255
    16c2:	4f e7       	ldi	r20, 0x7F	; 127
    16c4:	57 e4       	ldi	r21, 0x47	; 71
    16c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ca:	18 16       	cp	r1, r24
    16cc:	4c f5       	brge	.+82     	; 0x1720 <old_pass+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ce:	69 8d       	ldd	r22, Y+25	; 0x19
    16d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	9c 8b       	std	Y+20, r25	; 0x14
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
    16f6:	0f c0       	rjmp	.+30     	; 0x1716 <old_pass+0xec>
    16f8:	89 e1       	ldi	r24, 0x19	; 25
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9a 8b       	std	Y+18, r25	; 0x12
    16fe:	89 8b       	std	Y+17, r24	; 0x11
    1700:	89 89       	ldd	r24, Y+17	; 0x11
    1702:	9a 89       	ldd	r25, Y+18	; 0x12
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <old_pass+0xda>
    1708:	9a 8b       	std	Y+18, r25	; 0x12
    170a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	9c 8b       	std	Y+20, r25	; 0x14
    1714:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	69 f7       	brne	.-38     	; 0x16f8 <old_pass+0xce>
    171e:	14 c0       	rjmp	.+40     	; 0x1748 <old_pass+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9c 8b       	std	Y+20, r25	; 0x14
    1732:	8b 8b       	std	Y+19, r24	; 0x13
    1734:	8b 89       	ldd	r24, Y+19	; 0x13
    1736:	9c 89       	ldd	r25, Y+20	; 0x14
    1738:	98 8b       	std	Y+16, r25	; 0x10
    173a:	8f 87       	std	Y+15, r24	; 0x0f
    173c:	8f 85       	ldd	r24, Y+15	; 0x0f
    173e:	98 89       	ldd	r25, Y+16	; 0x10
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <old_pass+0x116>
    1744:	98 8b       	std	Y+16, r25	; 0x10
    1746:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	for (i = 0; i < 5; i++) {
    1748:	1d 8e       	std	Y+29, r1	; 0x1d
    174a:	84 c0       	rjmp	.+264    	; 0x1854 <old_pass+0x22a>
		key[i] = KEYPAD_getPressedKey();
    174c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1754:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1756:	8c 01       	movw	r16, r24
    1758:	02 0f       	add	r16, r18
    175a:	13 1f       	adc	r17, r19
    175c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1760:	f8 01       	movw	r30, r16
    1762:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1764:	8a e2       	ldi	r24, 0x2A	; 42
    1766:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayCharacter>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a6 e9       	ldi	r26, 0x96	; 150
    1770:	b3 e4       	ldi	r27, 0x43	; 67
    1772:	8b 87       	std	Y+11, r24	; 0x0b
    1774:	9c 87       	std	Y+12, r25	; 0x0c
    1776:	ad 87       	std	Y+13, r26	; 0x0d
    1778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	6b 85       	ldd	r22, Y+11	; 0x0b
    177c:	7c 85       	ldd	r23, Y+12	; 0x0c
    177e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1780:	9e 85       	ldd	r25, Y+14	; 0x0e
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a e7       	ldi	r20, 0x7A	; 122
    1788:	53 e4       	ldi	r21, 0x43	; 67
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8f 83       	std	Y+7, r24	; 0x07
    1794:	98 87       	std	Y+8, r25	; 0x08
    1796:	a9 87       	std	Y+9, r26	; 0x09
    1798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179a:	6f 81       	ldd	r22, Y+7	; 0x07
    179c:	78 85       	ldd	r23, Y+8	; 0x08
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	2c f4       	brge	.+10     	; 0x17bc <old_pass+0x192>
		__ticks = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	3f c0       	rjmp	.+126    	; 0x183a <old_pass+0x210>
	else if (__tmp > 65535)
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	3f ef       	ldi	r19, 0xFF	; 255
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	57 e4       	ldi	r21, 0x47	; 71
    17cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	4c f5       	brge	.+82     	; 0x1826 <old_pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17da:	9e 85       	ldd	r25, Y+14	; 0x0e
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e2       	ldi	r20, 0x20	; 32
    17e2:	51 e4       	ldi	r21, 0x41	; 65
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <old_pass+0x1f2>
    17fe:	89 e1       	ldi	r24, 0x19	; 25
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <old_pass+0x1e0>
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	9e 81       	ldd	r25, Y+6	; 0x06
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	69 f7       	brne	.-38     	; 0x17fe <old_pass+0x1d4>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <old_pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <old_pass+0x21c>
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Old ");
	LCD_moveCursor(1, 0);
	LCD_displayString("Password :");
	_delay_ms(500);
	for (i = 0; i < 5; i++) {
    184e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1850:	8f 5f       	subi	r24, 0xFF	; 255
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	85 30       	cpi	r24, 0x05	; 5
    1858:	08 f4       	brcc	.+2      	; 0x185c <old_pass+0x232>
    185a:	78 cf       	rjmp	.-272    	; 0x174c <old_pass+0x122>
		key[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	key[5] = '#';
    185c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    185e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1860:	fc 01       	movw	r30, r24
    1862:	35 96       	adiw	r30, 0x05	; 5
    1864:	83 e2       	ldi	r24, 0x23	; 35
    1866:	80 83       	st	Z, r24
	key[6] = '\0';
    1868:	8e 8d       	ldd	r24, Y+30	; 0x1e
    186a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    186c:	fc 01       	movw	r30, r24
    186e:	36 96       	adiw	r30, 0x06	; 6
    1870:	10 82       	st	Z, r1
	UART_sendString(key);
    1872:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1874:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1876:	0e 94 89 16 	call	0x2d12	; 0x2d12 <UART_sendString>
}
    187a:	6f 96       	adiw	r28, 0x1f	; 31
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <main>:

int main(void)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	cc 54       	subi	r28, 0x4C	; 76
    189a:	d0 40       	sbci	r29, 0x00	; 0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
	 *                           Initialization Section                            *
	 *******************************************************************************/
	uint8 check[6], key[7], option_key = 0, incorrect_pass = 0, i = 0;
    18a6:	1b ae       	std	Y+59, r1	; 0x3b
    18a8:	1a ae       	std	Y+58, r1	; 0x3a
    18aa:	19 ae       	std	Y+57, r1	; 0x39

	SREG |= (1 << 7);
    18ac:	af e5       	ldi	r26, 0x5F	; 95
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ef e5       	ldi	r30, 0x5F	; 95
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	80 68       	ori	r24, 0x80	; 128
    18b8:	8c 93       	st	X, r24

	// Set configuration for Timer0
	Timer0_ConfigType timer_config = { normal, 0, 0, clk_256};
    18ba:	fe 01       	movw	r30, r28
    18bc:	e7 5b       	subi	r30, 0xB7	; 183
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	10 82       	st	Z, r1
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 5b       	subi	r30, 0xB7	; 183
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	11 82       	std	Z+1, r1	; 0x01
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 5b       	subi	r30, 0xB7	; 183
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	12 82       	std	Z+2, r1	; 0x02
    18d2:	fe 01       	movw	r30, r28
    18d4:	e7 5b       	subi	r30, 0xB7	; 183
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	84 e0       	ldi	r24, 0x04	; 4
    18da:	83 83       	std	Z+3, r24	; 0x03

	// Initialize the UART driver with Baud-rate = 9600 bits/sec
	UART_init(9600);
    18dc:	60 e8       	ldi	r22, 0x80	; 128
    18de:	75 e2       	ldi	r23, 0x25	; 37
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_init>

	// Initialize LCD
	LCD_init();
    18e8:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_init>

	// Set Timer0 Call back function
	Set_Callback(Timer0_Tick);
    18ec:	8e e7       	ldi	r24, 0x7E	; 126
    18ee:	9f e0       	ldi	r25, 0x0F	; 15
    18f0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Set_Callback>
//		match_check = pass_match_check(key, check);
//	}
//	match_check = 1;

	while (1) {
		first_run(key);
    18f4:	ce 01       	movw	r24, r28
    18f6:	8e 5b       	subi	r24, 0xBE	; 190
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	0e 94 18 09 	call	0x1230	; 0x1230 <first_run>
		first_run(check);
    18fe:	ce 01       	movw	r24, r28
    1900:	cc 96       	adiw	r24, 0x3c	; 60
    1902:	0e 94 18 09 	call	0x1230	; 0x1230 <first_run>
		for (i = 0; i < 5; i++) {
    1906:	19 ae       	std	Y+57, r1	; 0x39
    1908:	18 c0       	rjmp	.+48     	; 0x193a <main+0xaa>
			if (key[i] == check[i]) {
    190a:	89 ad       	ldd	r24, Y+57	; 0x39
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ce 01       	movw	r24, r28
    1912:	8e 5b       	subi	r24, 0xBE	; 190
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	fc 01       	movw	r30, r24
    1918:	e2 0f       	add	r30, r18
    191a:	f3 1f       	adc	r31, r19
    191c:	40 81       	ld	r20, Z
    191e:	89 ad       	ldd	r24, Y+57	; 0x39
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	ce 01       	movw	r24, r28
    1926:	cc 96       	adiw	r24, 0x3c	; 60
    1928:	fc 01       	movw	r30, r24
    192a:	e2 0f       	add	r30, r18
    192c:	f3 1f       	adc	r31, r19
    192e:	80 81       	ld	r24, Z
    1930:	48 17       	cp	r20, r24
    1932:	31 f4       	brne	.+12     	; 0x1940 <main+0xb0>
//	match_check = 1;

	while (1) {
		first_run(key);
		first_run(check);
		for (i = 0; i < 5; i++) {
    1934:	89 ad       	ldd	r24, Y+57	; 0x39
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	89 af       	std	Y+57, r24	; 0x39
    193a:	89 ad       	ldd	r24, Y+57	; 0x39
    193c:	85 30       	cpi	r24, 0x05	; 5
    193e:	28 f3       	brcs	.-54     	; 0x190a <main+0x7a>

			} else {
				break;
			}
		}
		if (i == 5) {
    1940:	89 ad       	ldd	r24, Y+57	; 0x39
    1942:	85 30       	cpi	r24, 0x05	; 5
    1944:	11 f0       	breq	.+4      	; 0x194a <main+0xba>
			break;
		} else {
			i = 0;
    1946:	19 ae       	std	Y+57, r1	; 0x39
    1948:	d5 cf       	rjmp	.-86     	; 0x18f4 <main+0x64>
		}
	}

	key[5] = '#'; // termination Character to UART message
    194a:	fe 01       	movw	r30, r28
    194c:	ee 5b       	subi	r30, 0xBE	; 190
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	83 e2       	ldi	r24, 0x23	; 35
    1952:	85 83       	std	Z+5, r24	; 0x05
	key[6] = '\0';
    1954:	fe 01       	movw	r30, r28
    1956:	ee 5b       	subi	r30, 0xBE	; 190
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	16 82       	std	Z+6, r1	; 0x06

	// Send the password to Control ECU to Save it in EEPROM
	UART_sendString(key);
    195c:	ce 01       	movw	r24, r28
    195e:	8e 5b       	subi	r24, 0xBE	; 190
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	0e 94 89 16 	call	0x2d12	; 0x2d12 <UART_sendString>
	while (1) {
		main_options();
    1966:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main_options>
		option_key = KEYPAD_getPressedKey();
    196a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    196e:	8b af       	std	Y+59, r24	; 0x3b
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a6 e9       	ldi	r26, 0x96	; 150
    1976:	b3 e4       	ldi	r27, 0x43	; 67
    1978:	8d ab       	std	Y+53, r24	; 0x35
    197a:	9e ab       	std	Y+54, r25	; 0x36
    197c:	af ab       	std	Y+55, r26	; 0x37
    197e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6d a9       	ldd	r22, Y+53	; 0x35
    1982:	7e a9       	ldd	r23, Y+54	; 0x36
    1984:	8f a9       	ldd	r24, Y+55	; 0x37
    1986:	98 ad       	ldd	r25, Y+56	; 0x38
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	53 e4       	ldi	r21, 0x43	; 67
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	89 ab       	std	Y+49, r24	; 0x31
    199a:	9a ab       	std	Y+50, r25	; 0x32
    199c:	ab ab       	std	Y+51, r26	; 0x33
    199e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19a0:	69 a9       	ldd	r22, Y+49	; 0x31
    19a2:	7a a9       	ldd	r23, Y+50	; 0x32
    19a4:	8b a9       	ldd	r24, Y+51	; 0x33
    19a6:	9c a9       	ldd	r25, Y+52	; 0x34
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <main+0x132>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	98 ab       	std	Y+48, r25	; 0x30
    19be:	8f a7       	std	Y+47, r24	; 0x2f
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <main+0x1b0>
	else if (__tmp > 65535)
    19c2:	69 a9       	ldd	r22, Y+49	; 0x31
    19c4:	7a a9       	ldd	r23, Y+50	; 0x32
    19c6:	8b a9       	ldd	r24, Y+51	; 0x33
    19c8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6d a9       	ldd	r22, Y+53	; 0x35
    19dc:	7e a9       	ldd	r23, Y+54	; 0x36
    19de:	8f a9       	ldd	r24, Y+55	; 0x37
    19e0:	98 ad       	ldd	r25, Y+56	; 0x38
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	98 ab       	std	Y+48, r25	; 0x30
    1a00:	8f a7       	std	Y+47, r24	; 0x2f
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <main+0x192>
    1a04:	89 e1       	ldi	r24, 0x19	; 25
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e a7       	std	Y+46, r25	; 0x2e
    1a0a:	8d a7       	std	Y+45, r24	; 0x2d
    1a0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <main+0x180>
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	98 ab       	std	Y+48, r25	; 0x30
    1a20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a24:	98 a9       	ldd	r25, Y+48	; 0x30
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <main+0x174>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9c a9       	ldd	r25, Y+52	; 0x34
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	98 ab       	std	Y+48, r25	; 0x30
    1a3e:	8f a7       	std	Y+47, r24	; 0x2f
    1a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a42:	98 a9       	ldd	r25, Y+48	; 0x30
    1a44:	9c a7       	std	Y+44, r25	; 0x2c
    1a46:	8b a7       	std	Y+43, r24	; 0x2b
    1a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <main+0x1bc>
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);

		if (option_key == '+') {
    1a54:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a56:	8b 32       	cpi	r24, 0x2B	; 43
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <main+0x1cc>
    1a5a:	53 c1       	rjmp	.+678    	; 0x1d02 <main+0x472>
			ask_pass(key);
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	8e 5b       	subi	r24, 0xBE	; 190
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <ask_pass>
//			// Send the password to Control ECU to compare it with pass in EEPROM
//			UART_sendString(key);
//			_delay_ms(10);

			// Send to Control_ECU that the user wants to open door
			UART_sendByte(option_key);
    1a66:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a68:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <UART_sendByte>

			// if the Password is the same compared to EEPROM, open the door
			option_key = UART_recieveByte();
    1a6c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_recieveByte>
    1a70:	8b af       	std	Y+59, r24	; 0x3b

			if (option_key == READY) {
    1a72:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	59 f5       	brne	.+86     	; 0x1ace <main+0x23e>
				door_unlock();
    1a78:	0e 94 f6 08 	call	0x11ec	; 0x11ec <door_unlock>

				// wait 15s till door opens
				Timer0_init(&timer_config);
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	87 5b       	subi	r24, 0xB7	; 183
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <Timer0_init>
				while (Tick < 457);
    1a86:	80 91 40 01 	lds	r24, 0x0140
    1a8a:	90 91 41 01 	lds	r25, 0x0141
    1a8e:	21 e0       	ldi	r18, 0x01	; 1
    1a90:	89 3c       	cpi	r24, 0xC9	; 201
    1a92:	92 07       	cpc	r25, r18
    1a94:	c0 f3       	brcs	.-16     	; 0x1a86 <main+0x1f6>
				// disable timer0 & reset tick
				Timer0_Deinit();
    1a96:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <Timer0_Deinit>
				Tick = 0;
    1a9a:	10 92 41 01 	sts	0x0141, r1
    1a9e:	10 92 40 01 	sts	0x0140, r1

				//LCD_clearScreen();

				door_lock();
    1aa2:	0e 94 0b 09 	call	0x1216	; 0x1216 <door_lock>

				Timer0_init(&timer_config);
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	87 5b       	subi	r24, 0xB7	; 183
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <Timer0_init>
				while (Tick < 457);
    1ab0:	80 91 40 01 	lds	r24, 0x0140
    1ab4:	90 91 41 01 	lds	r25, 0x0141
    1ab8:	21 e0       	ldi	r18, 0x01	; 1
    1aba:	89 3c       	cpi	r24, 0xC9	; 201
    1abc:	92 07       	cpc	r25, r18
    1abe:	c0 f3       	brcs	.-16     	; 0x1ab0 <main+0x220>
				// disable timer0 & reset tick
				Timer0_Deinit();
    1ac0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <Timer0_Deinit>
				Tick = 0;
    1ac4:	10 92 41 01 	sts	0x0141, r1
    1ac8:	10 92 40 01 	sts	0x0140, r1
    1acc:	4c cf       	rjmp	.-360    	; 0x1966 <main+0xd6>
			}
			// if the Password is not right print error message and count number of wrong inputs
			else {
				LCD_clearScreen();
    1ace:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
				LCD_displayString("Wrong Pass!");
    1ad2:	8d ef       	ldi	r24, 0xFD	; 253
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
				incorrect_pass++;
    1ada:	8a ad       	ldd	r24, Y+58	; 0x3a
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	8a af       	std	Y+58, r24	; 0x3a

				// if the user enter the password wrong three times Stop the System for one minute
				if (incorrect_pass == 3) {
    1ae0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	19 f5       	brne	.+70     	; 0x1b2c <main+0x29c>
					LCD_clearScreen();
    1ae6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
					LCD_displayString("Multi Wrong!!");
    1aea:	89 e0       	ldi	r24, 0x09	; 9
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
					LCD_moveCursor(1, 0);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
					LCD_displayString("Wait 1 minute...");
    1afa:	87 e1       	ldi	r24, 0x17	; 23
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>

					Timer0_init(&timer_config);
    1b02:	ce 01       	movw	r24, r28
    1b04:	87 5b       	subi	r24, 0xB7	; 183
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <Timer0_init>
					while (Tick < 1828);
    1b0c:	80 91 40 01 	lds	r24, 0x0140
    1b10:	90 91 41 01 	lds	r25, 0x0141
    1b14:	27 e0       	ldi	r18, 0x07	; 7
    1b16:	84 32       	cpi	r24, 0x24	; 36
    1b18:	92 07       	cpc	r25, r18
    1b1a:	c0 f3       	brcs	.-16     	; 0x1b0c <main+0x27c>
					Timer0_Deinit();
    1b1c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <Timer0_Deinit>
					Tick = 0;
    1b20:	10 92 41 01 	sts	0x0141, r1
    1b24:	10 92 40 01 	sts	0x0140, r1
					incorrect_pass = 0;
    1b28:	1a ae       	std	Y+58, r1	; 0x3a
    1b2a:	72 c0       	rjmp	.+228    	; 0x1c10 <main+0x380>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	aa ef       	ldi	r26, 0xFA	; 250
    1b32:	b3 e4       	ldi	r27, 0x43	; 67
    1b34:	8f a3       	std	Y+39, r24	; 0x27
    1b36:	98 a7       	std	Y+40, r25	; 0x28
    1b38:	a9 a7       	std	Y+41, r26	; 0x29
    1b3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b40:	89 a5       	ldd	r24, Y+41	; 0x29
    1b42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	53 e4       	ldi	r21, 0x43	; 67
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8b a3       	std	Y+35, r24	; 0x23
    1b56:	9c a3       	std	Y+36, r25	; 0x24
    1b58:	ad a3       	std	Y+37, r26	; 0x25
    1b5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b60:	8d a1       	ldd	r24, Y+37	; 0x25
    1b62:	9e a1       	ldd	r25, Y+38	; 0x26
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <main+0x2ee>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9a a3       	std	Y+34, r25	; 0x22
    1b7a:	89 a3       	std	Y+33, r24	; 0x21
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <main+0x36c>
	else if (__tmp > 65535)
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6f a1       	ldd	r22, Y+39	; 0x27
    1b98:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9a a3       	std	Y+34, r25	; 0x22
    1bbc:	89 a3       	std	Y+33, r24	; 0x21
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <main+0x34e>
    1bc0:	89 e1       	ldi	r24, 0x19	; 25
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	98 a3       	std	Y+32, r25	; 0x20
    1bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bca:	98 a1       	ldd	r25, Y+32	; 0x20
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <main+0x33c>
    1bd0:	98 a3       	std	Y+32, r25	; 0x20
    1bd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	89 a1       	ldd	r24, Y+33	; 0x21
    1be0:	9a a1       	ldd	r25, Y+34	; 0x22
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <main+0x330>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9a a3       	std	Y+34, r25	; 0x22
    1bfa:	89 a3       	std	Y+33, r24	; 0x21
    1bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1c00:	9e 8f       	std	Y+30, r25	; 0x1e
    1c02:	8d 8f       	std	Y+29, r24	; 0x1d
    1c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <main+0x378>
    1c0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c0e:	8d 8f       	std	Y+29, r24	; 0x1d

				} else {
					_delay_ms(500);
				}
				LCD_clearScreen();
    1c10:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
				LCD_displayString("Door is closed");
    1c14:	88 e2       	ldi	r24, 0x28	; 40
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	aa ef       	ldi	r26, 0xFA	; 250
    1c22:	b3 e4       	ldi	r27, 0x43	; 67
    1c24:	89 8f       	std	Y+25, r24	; 0x19
    1c26:	9a 8f       	std	Y+26, r25	; 0x1a
    1c28:	ab 8f       	std	Y+27, r26	; 0x1b
    1c2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a e7       	ldi	r20, 0x7A	; 122
    1c3a:	53 e4       	ldi	r21, 0x43	; 67
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8d 8b       	std	Y+21, r24	; 0x15
    1c46:	9e 8b       	std	Y+22, r25	; 0x16
    1c48:	af 8b       	std	Y+23, r26	; 0x17
    1c4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c50:	8f 89       	ldd	r24, Y+23	; 0x17
    1c52:	98 8d       	ldd	r25, Y+24	; 0x18
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <main+0x3de>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
    1c6a:	8b 8b       	std	Y+19, r24	; 0x13
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <main+0x45c>
	else if (__tmp > 65535)
    1c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c70:	7e 89       	ldd	r23, Y+22	; 0x16
    1c72:	8f 89       	ldd	r24, Y+23	; 0x17
    1c74:	98 8d       	ldd	r25, Y+24	; 0x18
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <main+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	69 8d       	ldd	r22, Y+25	; 0x19
    1c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <main+0x43e>
    1cb0:	89 e1       	ldi	r24, 0x19	; 25
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9a 8b       	std	Y+18, r25	; 0x12
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
    1cb8:	89 89       	ldd	r24, Y+17	; 0x11
    1cba:	9a 89       	ldd	r25, Y+18	; 0x12
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <main+0x42c>
    1cc0:	9a 8b       	std	Y+18, r25	; 0x12
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <main+0x420>
    1cd6:	47 ce       	rjmp	.-882    	; 0x1966 <main+0xd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cda:	7e 89       	ldd	r23, Y+22	; 0x16
    1cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cde:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
    1cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf6:	98 89       	ldd	r25, Y+16	; 0x10
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <main+0x468>
    1cfc:	98 8b       	std	Y+16, r25	; 0x10
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
    1d00:	32 ce       	rjmp	.-924    	; 0x1966 <main+0xd6>
				_delay_ms(500);
			}
		}
		// if the user want to change password
		else if (option_key == '-') {
    1d02:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d04:	8d 32       	cpi	r24, 0x2D	; 45
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <main+0x47a>
    1d08:	57 c0       	rjmp	.+174    	; 0x1db8 <main+0x528>
			old_pass(key);
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	8e 5b       	subi	r24, 0xBE	; 190
    1d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d10:	0e 94 15 0b 	call	0x162a	; 0x162a <old_pass>
//			// Send the password to Control ECU to compare it with pass in EEPROM
//			UART_sendString(key);
//			_delay_ms(10);

			// Send to C_ECU that the user want to change password
			UART_sendByte(option_key);
    1d14:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d16:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <UART_sendByte>

			option_key = UART_recieveByte();
    1d1a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_recieveByte>
    1d1e:	8b af       	std	Y+59, r24	; 0x3b

			// if the password is right get the new password
			if (option_key == READY) {
    1d20:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <main+0x498>
    1d26:	1f ce       	rjmp	.-962    	; 0x1966 <main+0xd6>

				// check if enter the password entered by user twice are right
				while (1) {
						first_run(key);
    1d28:	ce 01       	movw	r24, r28
    1d2a:	8e 5b       	subi	r24, 0xBE	; 190
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	0e 94 18 09 	call	0x1230	; 0x1230 <first_run>
						first_run(check);
    1d32:	ce 01       	movw	r24, r28
    1d34:	cc 96       	adiw	r24, 0x3c	; 60
    1d36:	0e 94 18 09 	call	0x1230	; 0x1230 <first_run>
						for (i = 0; i < 5; i++) {
    1d3a:	19 ae       	std	Y+57, r1	; 0x39
    1d3c:	18 c0       	rjmp	.+48     	; 0x1d6e <main+0x4de>
							if (key[i] == check[i]) {
    1d3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	ce 01       	movw	r24, r28
    1d46:	8e 5b       	subi	r24, 0xBE	; 190
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	40 81       	ld	r20, Z
    1d52:	89 ad       	ldd	r24, Y+57	; 0x39
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	ce 01       	movw	r24, r28
    1d5a:	cc 96       	adiw	r24, 0x3c	; 60
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	80 81       	ld	r24, Z
    1d64:	48 17       	cp	r20, r24
    1d66:	31 f4       	brne	.+12     	; 0x1d74 <main+0x4e4>

				// check if enter the password entered by user twice are right
				while (1) {
						first_run(key);
						first_run(check);
						for (i = 0; i < 5; i++) {
    1d68:	89 ad       	ldd	r24, Y+57	; 0x39
    1d6a:	8f 5f       	subi	r24, 0xFF	; 255
    1d6c:	89 af       	std	Y+57, r24	; 0x39
    1d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d70:	85 30       	cpi	r24, 0x05	; 5
    1d72:	28 f3       	brcs	.-54     	; 0x1d3e <main+0x4ae>

							} else {
								break;
							}
						}
					if (i == 5) {
    1d74:	89 ad       	ldd	r24, Y+57	; 0x39
    1d76:	85 30       	cpi	r24, 0x05	; 5
    1d78:	e9 f4       	brne	.+58     	; 0x1db4 <main+0x524>
						key[5] = '#'; // termination Character to UART message
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ee 5b       	subi	r30, 0xBE	; 190
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	83 e2       	ldi	r24, 0x23	; 35
    1d82:	85 83       	std	Z+5, r24	; 0x05
						key[6] = '\0';
    1d84:	fe 01       	movw	r30, r28
    1d86:	ee 5b       	subi	r30, 0xBE	; 190
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	16 82       	std	Z+6, r1	; 0x06

						// send to ecu to save it at eeprom
						UART_sendString(key);
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	8e 5b       	subi	r24, 0xBE	; 190
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	0e 94 89 16 	call	0x2d12	; 0x2d12 <UART_sendString>
						} else {
							i = 0;
						}
					}

				key[5] = '#'; // termination Character to UART message
    1d96:	fe 01       	movw	r30, r28
    1d98:	ee 5b       	subi	r30, 0xBE	; 190
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	83 e2       	ldi	r24, 0x23	; 35
    1d9e:	85 83       	std	Z+5, r24	; 0x05
				key[6] = '\0';
    1da0:	fe 01       	movw	r30, r28
    1da2:	ee 5b       	subi	r30, 0xBE	; 190
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	16 82       	std	Z+6, r1	; 0x06

				// send to ecu to save it at eeprom
				UART_sendString(key);
    1da8:	ce 01       	movw	r24, r28
    1daa:	8e 5b       	subi	r24, 0xBE	; 190
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	0e 94 89 16 	call	0x2d12	; 0x2d12 <UART_sendString>
    1db2:	d9 cd       	rjmp	.-1102   	; 0x1966 <main+0xd6>

						// send to ecu to save it at eeprom
						UART_sendString(key);
						break;
						} else {
							i = 0;
    1db4:	19 ae       	std	Y+57, r1	; 0x39
    1db6:	b8 cf       	rjmp	.-144    	; 0x1d28 <main+0x498>
				UART_sendString(key);
			}
		}
		/*if the Password is not right Print in LCD Wrong*/
		else {
			LCD_clearScreen();
    1db8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
			LCD_displayString("Wrong Pass!");
    1dbc:	8d ef       	ldi	r24, 0xFD	; 253
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
			incorrect_pass++;
    1dc4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	8a af       	std	Y+58, r24	; 0x3a

			// if the user enter the password wrong three times Stop the System for one minute
			if (incorrect_pass >= 3) {
    1dca:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	18 f1       	brcs	.+70     	; 0x1e16 <main+0x586>
				LCD_clearScreen();
    1dd0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_clearScreen>
				LCD_displayString("Multi Wrong!!");
    1dd4:	89 e0       	ldi	r24, 0x09	; 9
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
				LCD_displayString("Wait 1 minute...");
    1de4:	87 e1       	ldi	r24, 0x17	; 23
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>

				Timer0_init(&timer_config);
    1dec:	ce 01       	movw	r24, r28
    1dee:	87 5b       	subi	r24, 0xB7	; 183
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <Timer0_init>
				while (Tick < 1828);
    1df6:	80 91 40 01 	lds	r24, 0x0140
    1dfa:	90 91 41 01 	lds	r25, 0x0141
    1dfe:	27 e0       	ldi	r18, 0x07	; 7
    1e00:	84 32       	cpi	r24, 0x24	; 36
    1e02:	92 07       	cpc	r25, r18
    1e04:	c0 f3       	brcs	.-16     	; 0x1df6 <main+0x566>
				Timer0_Deinit();
    1e06:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <Timer0_Deinit>
				Tick = 0;
    1e0a:	10 92 41 01 	sts	0x0141, r1
    1e0e:	10 92 40 01 	sts	0x0140, r1
				incorrect_pass = 0;
    1e12:	1a ae       	std	Y+58, r1	; 0x3a
    1e14:	a8 cd       	rjmp	.-1200   	; 0x1966 <main+0xd6>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	aa ef       	ldi	r26, 0xFA	; 250
    1e1c:	b3 e4       	ldi	r27, 0x43	; 67
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	53 e4       	ldi	r21, 0x43	; 67
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <main+0x5d8>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <main+0x656>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <main+0x638>
    1eaa:	89 e1       	ldi	r24, 0x19	; 25
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <main+0x626>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <main+0x61a>
    1ed0:	4a cd       	rjmp	.-1388   	; 0x1966 <main+0xd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <main+0x662>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	35 cd       	rjmp	.-1430   	; 0x1966 <main+0xd6>

00001efc <Timer0_Tick>:
			}
		}
	}
}

void Timer0_Tick(void){
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    1f04:	80 91 40 01 	lds	r24, 0x0140
    1f08:	90 91 41 01 	lds	r25, 0x0141
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	90 93 41 01 	sts	0x0141, r25
    1f12:	80 93 40 01 	sts	0x0140, r24
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <KEYPAD_getPressedKey+0x6>
    1f22:	0f 92       	push	r0
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1f28:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f2a:	1b 82       	std	Y+3, r1	; 0x03
    1f2c:	43 c0       	rjmp	.+134    	; 0x1fb4 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	98 2f       	mov	r25, r24
    1f3a:	9c 5f       	subi	r25, 0xFC	; 252
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	69 2f       	mov	r22, r25
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 01       	movw	r18, r24
    1f4e:	2c 5f       	subi	r18, 0xFC	; 252
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <KEYPAD_getPressedKey+0x40>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	2a 95       	dec	r18
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <KEYPAD_getPressedKey+0x3c>
    1f60:	80 95       	com	r24
    1f62:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	69 81       	ldd	r22, Y+1	; 0x01
    1f68:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f6c:	1a 82       	std	Y+2, r1	; 0x02
    1f6e:	1c c0       	rjmp	.+56     	; 0x1fa8 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if (GPIO_readPin(KEYPAD_PORT_ID, row + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	6a 81       	ldd	r22, Y+2	; 0x02
    1f74:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1f78:	88 23       	and	r24, r24
    1f7a:	99 f4       	brne	.+38     	; 0x1fa2 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	89 0f       	add	r24, r25
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <KEYPAD_4x4_adjustKeyNumber>
                    #endif
				}
			}
		}
	}	
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	84 30       	cpi	r24, 0x04	; 4
    1fac:	08 f3       	brcs	.-62     	; 0x1f70 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	08 f4       	brcc	.+2      	; 0x1fbc <KEYPAD_getPressedKey+0xa0>
    1fba:	b9 cf       	rjmp	.-142    	; 0x1f2e <KEYPAD_getPressedKey+0x12>
    1fbc:	b6 cf       	rjmp	.-148    	; 0x1f2a <KEYPAD_getPressedKey+0xe>

00001fbe <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1fcc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	3c 83       	std	Y+4, r19	; 0x04
    1fd6:	2b 83       	std	Y+3, r18	; 0x03
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	88 30       	cpi	r24, 0x08	; 8
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1fe2:	70 c0       	rjmp	.+224    	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	29 30       	cpi	r18, 0x09	; 9
    1fea:	31 05       	cpc	r19, r1
    1fec:	5c f5       	brge	.+86     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	84 30       	cpi	r24, 0x04	; 4
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ff8:	59 c0       	rjmp	.+178    	; 0x20ac <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	25 30       	cpi	r18, 0x05	; 5
    2000:	31 05       	cpc	r19, r1
    2002:	9c f4       	brge	.+38     	; 0x202a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	91 05       	cpc	r25, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <KEYPAD_4x4_adjustKeyNumber+0x52>
    200e:	48 c0       	rjmp	.+144    	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2010:	2b 81       	ldd	r18, Y+3	; 0x03
    2012:	3c 81       	ldd	r19, Y+4	; 0x04
    2014:	23 30       	cpi	r18, 0x03	; 3
    2016:	31 05       	cpc	r19, r1
    2018:	0c f0       	brlt	.+2      	; 0x201c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    201a:	45 c0       	rjmp	.+138    	; 0x20a6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	91 05       	cpc	r25, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2026:	39 c0       	rjmp	.+114    	; 0x209a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2028:	67 c0       	rjmp	.+206    	; 0x20f8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	26 30       	cpi	r18, 0x06	; 6
    2030:	31 05       	cpc	r19, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2034:	41 c0       	rjmp	.+130    	; 0x20b8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	87 30       	cpi	r24, 0x07	; 7
    203c:	91 05       	cpc	r25, r1
    203e:	0c f0       	brlt	.+2      	; 0x2042 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2040:	3e c0       	rjmp	.+124    	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0x100>
    2042:	37 c0       	rjmp	.+110    	; 0x20b2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	2c 30       	cpi	r18, 0x0C	; 12
    204a:	31 05       	cpc	r19, r1
    204c:	09 f4       	brne	.+2      	; 0x2050 <KEYPAD_4x4_adjustKeyNumber+0x92>
    204e:	46 c0       	rjmp	.+140    	; 0x20dc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	8d 30       	cpi	r24, 0x0D	; 13
    2056:	91 05       	cpc	r25, r1
    2058:	5c f4       	brge	.+22     	; 0x2070 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	2a 30       	cpi	r18, 0x0A	; 10
    2060:	31 05       	cpc	r19, r1
    2062:	b1 f1       	breq	.+108    	; 0x20d0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	8b 30       	cpi	r24, 0x0B	; 11
    206a:	91 05       	cpc	r25, r1
    206c:	a4 f5       	brge	.+104    	; 0x20d6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    206e:	2d c0       	rjmp	.+90     	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2070:	2b 81       	ldd	r18, Y+3	; 0x03
    2072:	3c 81       	ldd	r19, Y+4	; 0x04
    2074:	2e 30       	cpi	r18, 0x0E	; 14
    2076:	31 05       	cpc	r19, r1
    2078:	b9 f1       	breq	.+110    	; 0x20e8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	8e 30       	cpi	r24, 0x0E	; 14
    2080:	91 05       	cpc	r25, r1
    2082:	7c f1       	brlt	.+94     	; 0x20e2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	2f 30       	cpi	r18, 0x0F	; 15
    208a:	31 05       	cpc	r19, r1
    208c:	79 f1       	breq	.+94     	; 0x20ec <KEYPAD_4x4_adjustKeyNumber+0x12e>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	80 31       	cpi	r24, 0x10	; 16
    2094:	91 05       	cpc	r25, r1
    2096:	69 f1       	breq	.+90     	; 0x20f2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2098:	2f c0       	rjmp	.+94     	; 0x20f8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    209a:	87 e0       	ldi	r24, 0x07	; 7
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	2e c0       	rjmp	.+92     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    20a0:	88 e0       	ldi	r24, 0x08	; 8
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	2b c0       	rjmp	.+86     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    20a6:	89 e0       	ldi	r24, 0x09	; 9
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	28 c0       	rjmp	.+80     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    20ac:	85 e2       	ldi	r24, 0x25	; 37
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	25 c0       	rjmp	.+74     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    20b2:	84 e0       	ldi	r24, 0x04	; 4
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	22 c0       	rjmp	.+68     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    20b8:	85 e0       	ldi	r24, 0x05	; 5
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	1f c0       	rjmp	.+62     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    20be:	86 e0       	ldi	r24, 0x06	; 6
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	1c c0       	rjmp	.+56     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    20c4:	8a e2       	ldi	r24, 0x2A	; 42
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	19 c0       	rjmp	.+50     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	16 c0       	rjmp	.+44     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	13 c0       	rjmp	.+38     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	10 c0       	rjmp	.+32     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20dc:	8d e2       	ldi	r24, 0x2D	; 45
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	0d c0       	rjmp	.+26     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20e2:	8d e0       	ldi	r24, 0x0D	; 13
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	0a c0       	rjmp	.+20     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    20e8:	19 82       	std	Y+1, r1	; 0x01
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    20ec:	8d e3       	ldi	r24, 0x3D	; 61
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    20f2:	8b e2       	ldi	r24, 0x2B	; 43
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	64 e0       	ldi	r22, 0x04	; 4
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	63 e0       	ldi	r22, 0x03	; 3
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	6f ef       	ldi	r22, 0xFF	; 255
    2136:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    213a:	88 e3       	ldi	r24, 0x38	; 56
    213c:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2140:	8c e0       	ldi	r24, 0x0C	; 12
    2142:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_sendCommand>
}
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	e9 97       	sbiw	r28, 0x39	; 57
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	64 e0       	ldi	r22, 0x04	; 4
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	63 e0       	ldi	r22, 0x03	; 3
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e8       	ldi	r26, 0x80	; 128
    2182:	bf e3       	ldi	r27, 0x3F	; 63
    2184:	8d ab       	std	Y+53, r24	; 0x35
    2186:	9e ab       	std	Y+54, r25	; 0x36
    2188:	af ab       	std	Y+55, r26	; 0x37
    218a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6d a9       	ldd	r22, Y+53	; 0x35
    218e:	7e a9       	ldd	r23, Y+54	; 0x36
    2190:	8f a9       	ldd	r24, Y+55	; 0x37
    2192:	98 ad       	ldd	r25, Y+56	; 0x38
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a e7       	ldi	r20, 0x7A	; 122
    219a:	53 e4       	ldi	r21, 0x43	; 67
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 ab       	std	Y+49, r24	; 0x31
    21a6:	9a ab       	std	Y+50, r25	; 0x32
    21a8:	ab ab       	std	Y+51, r26	; 0x33
    21aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ac:	69 a9       	ldd	r22, Y+49	; 0x31
    21ae:	7a a9       	ldd	r23, Y+50	; 0x32
    21b0:	8b a9       	ldd	r24, Y+51	; 0x33
    21b2:	9c a9       	ldd	r25, Y+52	; 0x34
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <LCD_sendCommand+0x7c>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	98 ab       	std	Y+48, r25	; 0x30
    21ca:	8f a7       	std	Y+47, r24	; 0x2f
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    21ce:	69 a9       	ldd	r22, Y+49	; 0x31
    21d0:	7a a9       	ldd	r23, Y+50	; 0x32
    21d2:	8b a9       	ldd	r24, Y+51	; 0x33
    21d4:	9c a9       	ldd	r25, Y+52	; 0x34
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6d a9       	ldd	r22, Y+53	; 0x35
    21e8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ea:	8f a9       	ldd	r24, Y+55	; 0x37
    21ec:	98 ad       	ldd	r25, Y+56	; 0x38
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	98 ab       	std	Y+48, r25	; 0x30
    220c:	8f a7       	std	Y+47, r24	; 0x2f
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_sendCommand+0xdc>
    2210:	89 e1       	ldi	r24, 0x19	; 25
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9e a7       	std	Y+46, r25	; 0x2e
    2216:	8d a7       	std	Y+45, r24	; 0x2d
    2218:	8d a5       	ldd	r24, Y+45	; 0x2d
    221a:	9e a5       	ldd	r25, Y+46	; 0x2e
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_sendCommand+0xca>
    2220:	9e a7       	std	Y+46, r25	; 0x2e
    2222:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8f a5       	ldd	r24, Y+47	; 0x2f
    2226:	98 a9       	ldd	r25, Y+48	; 0x30
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2230:	98 a9       	ldd	r25, Y+48	; 0x30
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <LCD_sendCommand+0xbe>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	69 a9       	ldd	r22, Y+49	; 0x31
    223a:	7a a9       	ldd	r23, Y+50	; 0x32
    223c:	8b a9       	ldd	r24, Y+51	; 0x33
    223e:	9c a9       	ldd	r25, Y+52	; 0x34
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	98 ab       	std	Y+48, r25	; 0x30
    224a:	8f a7       	std	Y+47, r24	; 0x2f
    224c:	8f a5       	ldd	r24, Y+47	; 0x2f
    224e:	98 a9       	ldd	r25, Y+48	; 0x30
    2250:	9c a7       	std	Y+44, r25	; 0x2c
    2252:	8b a7       	std	Y+43, r24	; 0x2b
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	9c a5       	ldd	r25, Y+44	; 0x2c
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_sendCommand+0x106>
    225c:	9c a7       	std	Y+44, r25	; 0x2c
    225e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e8       	ldi	r26, 0x80	; 128
    2270:	bf e3       	ldi	r27, 0x3F	; 63
    2272:	8f a3       	std	Y+39, r24	; 0x27
    2274:	98 a7       	std	Y+40, r25	; 0x28
    2276:	a9 a7       	std	Y+41, r26	; 0x29
    2278:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6f a1       	ldd	r22, Y+39	; 0x27
    227c:	78 a5       	ldd	r23, Y+40	; 0x28
    227e:	89 a5       	ldd	r24, Y+41	; 0x29
    2280:	9a a5       	ldd	r25, Y+42	; 0x2a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	53 e4       	ldi	r21, 0x43	; 67
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8b a3       	std	Y+35, r24	; 0x23
    2294:	9c a3       	std	Y+36, r25	; 0x24
    2296:	ad a3       	std	Y+37, r26	; 0x25
    2298:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    229a:	6b a1       	ldd	r22, Y+35	; 0x23
    229c:	7c a1       	ldd	r23, Y+36	; 0x24
    229e:	8d a1       	ldd	r24, Y+37	; 0x25
    22a0:	9e a1       	ldd	r25, Y+38	; 0x26
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_sendCommand+0x16a>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    22bc:	6b a1       	ldd	r22, Y+35	; 0x23
    22be:	7c a1       	ldd	r23, Y+36	; 0x24
    22c0:	8d a1       	ldd	r24, Y+37	; 0x25
    22c2:	9e a1       	ldd	r25, Y+38	; 0x26
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6f a1       	ldd	r22, Y+39	; 0x27
    22d6:	78 a5       	ldd	r23, Y+40	; 0x28
    22d8:	89 a5       	ldd	r24, Y+41	; 0x29
    22da:	9a a5       	ldd	r25, Y+42	; 0x2a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9a a3       	std	Y+34, r25	; 0x22
    22fa:	89 a3       	std	Y+33, r24	; 0x21
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_sendCommand+0x1ca>
    22fe:	89 e1       	ldi	r24, 0x19	; 25
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	98 a3       	std	Y+32, r25	; 0x20
    2304:	8f 8f       	std	Y+31, r24	; 0x1f
    2306:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2308:	98 a1       	ldd	r25, Y+32	; 0x20
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_sendCommand+0x1b8>
    230e:	98 a3       	std	Y+32, r25	; 0x20
    2310:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	89 a1       	ldd	r24, Y+33	; 0x21
    2314:	9a a1       	ldd	r25, Y+34	; 0x22
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9a a3       	std	Y+34, r25	; 0x22
    231a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	89 a1       	ldd	r24, Y+33	; 0x21
    231e:	9a a1       	ldd	r25, Y+34	; 0x22
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_sendCommand+0x1ac>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6b a1       	ldd	r22, Y+35	; 0x23
    2328:	7c a1       	ldd	r23, Y+36	; 0x24
    232a:	8d a1       	ldd	r24, Y+37	; 0x25
    232c:	9e a1       	ldd	r25, Y+38	; 0x26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	9a a1       	ldd	r25, Y+34	; 0x22
    233e:	9e 8f       	std	Y+30, r25	; 0x1e
    2340:	8d 8f       	std	Y+29, r24	; 0x1d
    2342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2344:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_sendCommand+0x1f4>
    234a:	9e 8f       	std	Y+30, r25	; 0x1e
    234c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	69 ad       	ldd	r22, Y+57	; 0x39
    2352:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e8       	ldi	r26, 0x80	; 128
    235c:	bf e3       	ldi	r27, 0x3F	; 63
    235e:	89 8f       	std	Y+25, r24	; 0x19
    2360:	9a 8f       	std	Y+26, r25	; 0x1a
    2362:	ab 8f       	std	Y+27, r26	; 0x1b
    2364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2366:	69 8d       	ldd	r22, Y+25	; 0x19
    2368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	53 e4       	ldi	r21, 0x43	; 67
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8d 8b       	std	Y+21, r24	; 0x15
    2380:	9e 8b       	std	Y+22, r25	; 0x16
    2382:	af 8b       	std	Y+23, r26	; 0x17
    2384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2386:	6d 89       	ldd	r22, Y+21	; 0x15
    2388:	7e 89       	ldd	r23, Y+22	; 0x16
    238a:	8f 89       	ldd	r24, Y+23	; 0x17
    238c:	98 8d       	ldd	r25, Y+24	; 0x18
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <LCD_sendCommand+0x256>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 8b       	std	Y+20, r25	; 0x14
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    23a8:	6d 89       	ldd	r22, Y+21	; 0x15
    23aa:	7e 89       	ldd	r23, Y+22	; 0x16
    23ac:	8f 89       	ldd	r24, Y+23	; 0x17
    23ae:	98 8d       	ldd	r25, Y+24	; 0x18
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <LCD_sendCommand+0x2b6>
    23ea:	89 e1       	ldi	r24, 0x19	; 25
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9a 8b       	std	Y+18, r25	; 0x12
    23f0:	89 8b       	std	Y+17, r24	; 0x11
    23f2:	89 89       	ldd	r24, Y+17	; 0x11
    23f4:	9a 89       	ldd	r25, Y+18	; 0x12
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_sendCommand+0x2a4>
    23fa:	9a 8b       	std	Y+18, r25	; 0x12
    23fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	69 f7       	brne	.-38     	; 0x23ea <LCD_sendCommand+0x298>
    2410:	14 c0       	rjmp	.+40     	; 0x243a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6d 89       	ldd	r22, Y+21	; 0x15
    2414:	7e 89       	ldd	r23, Y+22	; 0x16
    2416:	8f 89       	ldd	r24, Y+23	; 0x17
    2418:	98 8d       	ldd	r25, Y+24	; 0x18
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9c 8b       	std	Y+20, r25	; 0x14
    2424:	8b 8b       	std	Y+19, r24	; 0x13
    2426:	8b 89       	ldd	r24, Y+19	; 0x13
    2428:	9c 89       	ldd	r25, Y+20	; 0x14
    242a:	98 8b       	std	Y+16, r25	; 0x10
    242c:	8f 87       	std	Y+15, r24	; 0x0f
    242e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2430:	98 89       	ldd	r25, Y+16	; 0x10
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_sendCommand+0x2e0>
    2436:	98 8b       	std	Y+16, r25	; 0x10
    2438:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e8       	ldi	r26, 0x80	; 128
    244a:	bf e3       	ldi	r27, 0x3F	; 63
    244c:	8b 87       	std	Y+11, r24	; 0x0b
    244e:	9c 87       	std	Y+12, r25	; 0x0c
    2450:	ad 87       	std	Y+13, r26	; 0x0d
    2452:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a e7       	ldi	r20, 0x7A	; 122
    2462:	53 e4       	ldi	r21, 0x43	; 67
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8f 83       	std	Y+7, r24	; 0x07
    246e:	98 87       	std	Y+8, r25	; 0x08
    2470:	a9 87       	std	Y+9, r26	; 0x09
    2472:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2474:	6f 81       	ldd	r22, Y+7	; 0x07
    2476:	78 85       	ldd	r23, Y+8	; 0x08
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <LCD_sendCommand+0x344>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	3f c0       	rjmp	.+126    	; 0x2514 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2496:	6f 81       	ldd	r22, Y+7	; 0x07
    2498:	78 85       	ldd	r23, Y+8	; 0x08
    249a:	89 85       	ldd	r24, Y+9	; 0x09
    249c:	9a 85       	ldd	r25, Y+10	; 0x0a
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	4c f5       	brge	.+82     	; 0x2500 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <LCD_sendCommand+0x3a4>
    24d8:	89 e1       	ldi	r24, 0x19	; 25
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_sendCommand+0x392>
    24e8:	9c 83       	std	Y+4, r25	; 0x04
    24ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	69 f7       	brne	.-38     	; 0x24d8 <LCD_sendCommand+0x386>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_sendCommand+0x3ce>
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2528:	e9 96       	adiw	r28, 0x39	; 57
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	e9 97       	sbiw	r28, 0x39	; 57
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	64 e0       	ldi	r22, 0x04	; 4
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	63 e0       	ldi	r22, 0x03	; 3
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	8d ab       	std	Y+53, r24	; 0x35
    256e:	9e ab       	std	Y+54, r25	; 0x36
    2570:	af ab       	std	Y+55, r26	; 0x37
    2572:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	6d a9       	ldd	r22, Y+53	; 0x35
    2576:	7e a9       	ldd	r23, Y+54	; 0x36
    2578:	8f a9       	ldd	r24, Y+55	; 0x37
    257a:	98 ad       	ldd	r25, Y+56	; 0x38
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	53 e4       	ldi	r21, 0x43	; 67
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	89 ab       	std	Y+49, r24	; 0x31
    258e:	9a ab       	std	Y+50, r25	; 0x32
    2590:	ab ab       	std	Y+51, r26	; 0x33
    2592:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2594:	69 a9       	ldd	r22, Y+49	; 0x31
    2596:	7a a9       	ldd	r23, Y+50	; 0x32
    2598:	8b a9       	ldd	r24, Y+51	; 0x33
    259a:	9c a9       	ldd	r25, Y+52	; 0x34
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	98 ab       	std	Y+48, r25	; 0x30
    25b2:	8f a7       	std	Y+47, r24	; 0x2f
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    25b6:	69 a9       	ldd	r22, Y+49	; 0x31
    25b8:	7a a9       	ldd	r23, Y+50	; 0x32
    25ba:	8b a9       	ldd	r24, Y+51	; 0x33
    25bc:	9c a9       	ldd	r25, Y+52	; 0x34
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	6d a9       	ldd	r22, Y+53	; 0x35
    25d0:	7e a9       	ldd	r23, Y+54	; 0x36
    25d2:	8f a9       	ldd	r24, Y+55	; 0x37
    25d4:	98 ad       	ldd	r25, Y+56	; 0x38
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	98 ab       	std	Y+48, r25	; 0x30
    25f4:	8f a7       	std	Y+47, r24	; 0x2f
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <LCD_displayCharacter+0xdc>
    25f8:	89 e1       	ldi	r24, 0x19	; 25
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9e a7       	std	Y+46, r25	; 0x2e
    25fe:	8d a7       	std	Y+45, r24	; 0x2d
    2600:	8d a5       	ldd	r24, Y+45	; 0x2d
    2602:	9e a5       	ldd	r25, Y+46	; 0x2e
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_displayCharacter+0xca>
    2608:	9e a7       	std	Y+46, r25	; 0x2e
    260a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8f a5       	ldd	r24, Y+47	; 0x2f
    260e:	98 a9       	ldd	r25, Y+48	; 0x30
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	98 ab       	std	Y+48, r25	; 0x30
    2614:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8f a5       	ldd	r24, Y+47	; 0x2f
    2618:	98 a9       	ldd	r25, Y+48	; 0x30
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <LCD_displayCharacter+0xbe>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	69 a9       	ldd	r22, Y+49	; 0x31
    2622:	7a a9       	ldd	r23, Y+50	; 0x32
    2624:	8b a9       	ldd	r24, Y+51	; 0x33
    2626:	9c a9       	ldd	r25, Y+52	; 0x34
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	98 ab       	std	Y+48, r25	; 0x30
    2632:	8f a7       	std	Y+47, r24	; 0x2f
    2634:	8f a5       	ldd	r24, Y+47	; 0x2f
    2636:	98 a9       	ldd	r25, Y+48	; 0x30
    2638:	9c a7       	std	Y+44, r25	; 0x2c
    263a:	8b a7       	std	Y+43, r24	; 0x2b
    263c:	8b a5       	ldd	r24, Y+43	; 0x2b
    263e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_displayCharacter+0x106>
    2644:	9c a7       	std	Y+44, r25	; 0x2c
    2646:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e8       	ldi	r26, 0x80	; 128
    2658:	bf e3       	ldi	r27, 0x3F	; 63
    265a:	8f a3       	std	Y+39, r24	; 0x27
    265c:	98 a7       	std	Y+40, r25	; 0x28
    265e:	a9 a7       	std	Y+41, r26	; 0x29
    2660:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6f a1       	ldd	r22, Y+39	; 0x27
    2664:	78 a5       	ldd	r23, Y+40	; 0x28
    2666:	89 a5       	ldd	r24, Y+41	; 0x29
    2668:	9a a5       	ldd	r25, Y+42	; 0x2a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a e7       	ldi	r20, 0x7A	; 122
    2670:	53 e4       	ldi	r21, 0x43	; 67
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8b a3       	std	Y+35, r24	; 0x23
    267c:	9c a3       	std	Y+36, r25	; 0x24
    267e:	ad a3       	std	Y+37, r26	; 0x25
    2680:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2682:	6b a1       	ldd	r22, Y+35	; 0x23
    2684:	7c a1       	ldd	r23, Y+36	; 0x24
    2686:	8d a1       	ldd	r24, Y+37	; 0x25
    2688:	9e a1       	ldd	r25, Y+38	; 0x26
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	89 a3       	std	Y+33, r24	; 0x21
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    26a4:	6b a1       	ldd	r22, Y+35	; 0x23
    26a6:	7c a1       	ldd	r23, Y+36	; 0x24
    26a8:	8d a1       	ldd	r24, Y+37	; 0x25
    26aa:	9e a1       	ldd	r25, Y+38	; 0x26
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6f a1       	ldd	r22, Y+39	; 0x27
    26be:	78 a5       	ldd	r23, Y+40	; 0x28
    26c0:	89 a5       	ldd	r24, Y+41	; 0x29
    26c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9a a3       	std	Y+34, r25	; 0x22
    26e2:	89 a3       	std	Y+33, r24	; 0x21
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_displayCharacter+0x1ca>
    26e6:	89 e1       	ldi	r24, 0x19	; 25
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	98 a3       	std	Y+32, r25	; 0x20
    26ec:	8f 8f       	std	Y+31, r24	; 0x1f
    26ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f0:	98 a1       	ldd	r25, Y+32	; 0x20
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_displayCharacter+0x1b8>
    26f6:	98 a3       	std	Y+32, r25	; 0x20
    26f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	89 a1       	ldd	r24, Y+33	; 0x21
    26fc:	9a a1       	ldd	r25, Y+34	; 0x22
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9a a3       	std	Y+34, r25	; 0x22
    2702:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	89 a1       	ldd	r24, Y+33	; 0x21
    2706:	9a a1       	ldd	r25, Y+34	; 0x22
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <LCD_displayCharacter+0x1ac>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6b a1       	ldd	r22, Y+35	; 0x23
    2710:	7c a1       	ldd	r23, Y+36	; 0x24
    2712:	8d a1       	ldd	r24, Y+37	; 0x25
    2714:	9e a1       	ldd	r25, Y+38	; 0x26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
    2722:	89 a1       	ldd	r24, Y+33	; 0x21
    2724:	9a a1       	ldd	r25, Y+34	; 0x22
    2726:	9e 8f       	std	Y+30, r25	; 0x1e
    2728:	8d 8f       	std	Y+29, r24	; 0x1d
    272a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    272c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_displayCharacter+0x1f4>
    2732:	9e 8f       	std	Y+30, r25	; 0x1e
    2734:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	69 ad       	ldd	r22, Y+57	; 0x39
    273a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e8       	ldi	r26, 0x80	; 128
    2744:	bf e3       	ldi	r27, 0x3F	; 63
    2746:	89 8f       	std	Y+25, r24	; 0x19
    2748:	9a 8f       	std	Y+26, r25	; 0x1a
    274a:	ab 8f       	std	Y+27, r26	; 0x1b
    274c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	69 8d       	ldd	r22, Y+25	; 0x19
    2750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a e7       	ldi	r20, 0x7A	; 122
    275c:	53 e4       	ldi	r21, 0x43	; 67
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	8d 8b       	std	Y+21, r24	; 0x15
    2768:	9e 8b       	std	Y+22, r25	; 0x16
    276a:	af 8b       	std	Y+23, r26	; 0x17
    276c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    276e:	6d 89       	ldd	r22, Y+21	; 0x15
    2770:	7e 89       	ldd	r23, Y+22	; 0x16
    2772:	8f 89       	ldd	r24, Y+23	; 0x17
    2774:	98 8d       	ldd	r25, Y+24	; 0x18
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e8       	ldi	r20, 0x80	; 128
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2782:	88 23       	and	r24, r24
    2784:	2c f4       	brge	.+10     	; 0x2790 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9c 8b       	std	Y+20, r25	; 0x14
    278c:	8b 8b       	std	Y+19, r24	; 0x13
    278e:	3f c0       	rjmp	.+126    	; 0x280e <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2790:	6d 89       	ldd	r22, Y+21	; 0x15
    2792:	7e 89       	ldd	r23, Y+22	; 0x16
    2794:	8f 89       	ldd	r24, Y+23	; 0x17
    2796:	98 8d       	ldd	r25, Y+24	; 0x18
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	3f ef       	ldi	r19, 0xFF	; 255
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	57 e4       	ldi	r21, 0x47	; 71
    27a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	4c f5       	brge	.+82     	; 0x27fa <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	69 8d       	ldd	r22, Y+25	; 0x19
    27aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e2       	ldi	r20, 0x20	; 32
    27b6:	51 e4       	ldi	r21, 0x41	; 65
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9c 8b       	std	Y+20, r25	; 0x14
    27ce:	8b 8b       	std	Y+19, r24	; 0x13
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <LCD_displayCharacter+0x2b6>
    27d2:	89 e1       	ldi	r24, 0x19	; 25
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9a 8b       	std	Y+18, r25	; 0x12
    27d8:	89 8b       	std	Y+17, r24	; 0x11
    27da:	89 89       	ldd	r24, Y+17	; 0x11
    27dc:	9a 89       	ldd	r25, Y+18	; 0x12
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_displayCharacter+0x2a4>
    27e2:	9a 8b       	std	Y+18, r25	; 0x12
    27e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e6:	8b 89       	ldd	r24, Y+19	; 0x13
    27e8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	9c 8b       	std	Y+20, r25	; 0x14
    27ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	69 f7       	brne	.-38     	; 0x27d2 <LCD_displayCharacter+0x298>
    27f8:	14 c0       	rjmp	.+40     	; 0x2822 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	98 8b       	std	Y+16, r25	; 0x10
    2814:	8f 87       	std	Y+15, r24	; 0x0f
    2816:	8f 85       	ldd	r24, Y+15	; 0x0f
    2818:	98 89       	ldd	r25, Y+16	; 0x10
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_displayCharacter+0x2e0>
    281e:	98 8b       	std	Y+16, r25	; 0x10
    2820:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e8       	ldi	r26, 0x80	; 128
    2832:	bf e3       	ldi	r27, 0x3F	; 63
    2834:	8b 87       	std	Y+11, r24	; 0x0b
    2836:	9c 87       	std	Y+12, r25	; 0x0c
    2838:	ad 87       	std	Y+13, r26	; 0x0d
    283a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	6b 85       	ldd	r22, Y+11	; 0x0b
    283e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2840:	8d 85       	ldd	r24, Y+13	; 0x0d
    2842:	9e 85       	ldd	r25, Y+14	; 0x0e
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a e7       	ldi	r20, 0x7A	; 122
    284a:	53 e4       	ldi	r21, 0x43	; 67
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8f 83       	std	Y+7, r24	; 0x07
    2856:	98 87       	std	Y+8, r25	; 0x08
    2858:	a9 87       	std	Y+9, r26	; 0x09
    285a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    285c:	6f 81       	ldd	r22, Y+7	; 0x07
    285e:	78 85       	ldd	r23, Y+8	; 0x08
    2860:	89 85       	ldd	r24, Y+9	; 0x09
    2862:	9a 85       	ldd	r25, Y+10	; 0x0a
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	2c f4       	brge	.+10     	; 0x287e <LCD_displayCharacter+0x344>
		__ticks = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    287e:	6f 81       	ldd	r22, Y+7	; 0x07
    2880:	78 85       	ldd	r23, Y+8	; 0x08
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	4c f5       	brge	.+82     	; 0x28e8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	6b 85       	ldd	r22, Y+11	; 0x0b
    2898:	7c 85       	ldd	r23, Y+12	; 0x0c
    289a:	8d 85       	ldd	r24, Y+13	; 0x0d
    289c:	9e 85       	ldd	r25, Y+14	; 0x0e
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
    28be:	0f c0       	rjmp	.+30     	; 0x28de <LCD_displayCharacter+0x3a4>
    28c0:	89 e1       	ldi	r24, 0x19	; 25
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c 83       	std	Y+4, r25	; 0x04
    28c6:	8b 83       	std	Y+3, r24	; 0x03
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_displayCharacter+0x392>
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <LCD_displayCharacter+0x386>
    28e6:	14 c0       	rjmp	.+40     	; 0x2910 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ea:	78 85       	ldd	r23, Y+8	; 0x08
    28ec:	89 85       	ldd	r24, Y+9	; 0x09
    28ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <LCD_displayCharacter+0x3ce>
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2910:	e9 96       	adiw	r28, 0x39	; 57
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <LCD_displayString+0x6>
    2928:	0f 92       	push	r0
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	9b 83       	std	Y+3, r25	; 0x03
    2930:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2932:	19 82       	std	Y+1, r1	; 0x01
    2934:	0e c0       	rjmp	.+28     	; 0x2952 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	fc 01       	movw	r30, r24
    2942:	e2 0f       	add	r30, r18
    2944:	f3 1f       	adc	r31, r19
    2946:	80 81       	ld	r24, Z
    2948:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayCharacter>
		i++;
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	8f 5f       	subi	r24, 0xFF	; 255
    2950:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	fc 01       	movw	r30, r24
    295e:	e2 0f       	add	r30, r18
    2960:	f3 1f       	adc	r31, r19
    2962:	80 81       	ld	r24, Z
    2964:	88 23       	and	r24, r24
    2966:	39 f7       	brne	.-50     	; 0x2936 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <LCD_moveCursor+0x6>
    297a:	00 d0       	rcall	.+0      	; 0x297c <LCD_moveCursor+0x8>
    297c:	0f 92       	push	r0
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	8a 83       	std	Y+2, r24	; 0x02
    2984:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	3d 83       	std	Y+5, r19	; 0x05
    298e:	2c 83       	std	Y+4, r18	; 0x04
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	91 05       	cpc	r25, r1
    2998:	c1 f0       	breq	.+48     	; 0x29ca <LCD_moveCursor+0x56>
    299a:	2c 81       	ldd	r18, Y+4	; 0x04
    299c:	3d 81       	ldd	r19, Y+5	; 0x05
    299e:	22 30       	cpi	r18, 0x02	; 2
    29a0:	31 05       	cpc	r19, r1
    29a2:	2c f4       	brge	.+10     	; 0x29ae <LCD_moveCursor+0x3a>
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	61 f0       	breq	.+24     	; 0x29c4 <LCD_moveCursor+0x50>
    29ac:	19 c0       	rjmp	.+50     	; 0x29e0 <LCD_moveCursor+0x6c>
    29ae:	2c 81       	ldd	r18, Y+4	; 0x04
    29b0:	3d 81       	ldd	r19, Y+5	; 0x05
    29b2:	22 30       	cpi	r18, 0x02	; 2
    29b4:	31 05       	cpc	r19, r1
    29b6:	69 f0       	breq	.+26     	; 0x29d2 <LCD_moveCursor+0x5e>
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	83 30       	cpi	r24, 0x03	; 3
    29be:	91 05       	cpc	r25, r1
    29c0:	61 f0       	breq	.+24     	; 0x29da <LCD_moveCursor+0x66>
    29c2:	0e c0       	rjmp	.+28     	; 0x29e0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	0b c0       	rjmp	.+22     	; 0x29e0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	80 5c       	subi	r24, 0xC0	; 192
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	07 c0       	rjmp	.+14     	; 0x29e0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	80 5f       	subi	r24, 0xF0	; 240
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	80 5b       	subi	r24, 0xB0	; 176
    29de:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	80 68       	ori	r24, 0x80	; 128
    29e4:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_sendCommand>
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <LCD_displayStringRowColumn+0x6>
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <LCD_displayStringRowColumn+0x8>
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	6a 83       	std	Y+2, r22	; 0x02
    2a08:	5c 83       	std	Y+4, r21	; 0x04
    2a0a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	6a 81       	ldd	r22, Y+2	; 0x02
    2a10:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
}
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	62 97       	sbiw	r28, 0x12	; 18
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	9a 8b       	std	Y+18, r25	; 0x12
    2a40:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a42:	89 89       	ldd	r24, Y+17	; 0x11
    2a44:	9a 89       	ldd	r25, Y+18	; 0x12
    2a46:	9e 01       	movw	r18, r28
    2a48:	2f 5f       	subi	r18, 0xFF	; 255
    2a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4c:	b9 01       	movw	r22, r18
    2a4e:	4a e0       	ldi	r20, 0x0A	; 10
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <itoa>
   LCD_displayString(buff); /* Display the string */
    2a56:	ce 01       	movw	r24, r28
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_displayString>
}
    2a5e:	62 96       	adiw	r28, 0x12	; 18
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_sendCommand>
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2a84:	1f 92       	push	r1
    2a86:	0f 92       	push	r0
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	0f 92       	push	r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	2f 93       	push	r18
    2a90:	3f 93       	push	r19
    2a92:	4f 93       	push	r20
    2a94:	5f 93       	push	r21
    2a96:	6f 93       	push	r22
    2a98:	7f 93       	push	r23
    2a9a:	8f 93       	push	r24
    2a9c:	9f 93       	push	r25
    2a9e:	af 93       	push	r26
    2aa0:	bf 93       	push	r27
    2aa2:	ef 93       	push	r30
    2aa4:	ff 93       	push	r31
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    2aae:	80 91 42 01 	lds	r24, 0x0142
    2ab2:	90 91 43 01 	lds	r25, 0x0143
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	29 f0       	breq	.+10     	; 0x2ac4 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    2aba:	e0 91 42 01 	lds	r30, 0x0142
    2abe:	f0 91 43 01 	lds	r31, 0x0143
    2ac2:	09 95       	icall
	}
}
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	ff 91       	pop	r31
    2aca:	ef 91       	pop	r30
    2acc:	bf 91       	pop	r27
    2ace:	af 91       	pop	r26
    2ad0:	9f 91       	pop	r25
    2ad2:	8f 91       	pop	r24
    2ad4:	7f 91       	pop	r23
    2ad6:	6f 91       	pop	r22
    2ad8:	5f 91       	pop	r21
    2ada:	4f 91       	pop	r20
    2adc:	3f 91       	pop	r19
    2ade:	2f 91       	pop	r18
    2ae0:	0f 90       	pop	r0
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	0f 90       	pop	r0
    2ae6:	1f 90       	pop	r1
    2ae8:	18 95       	reti

00002aea <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2aea:	1f 92       	push	r1
    2aec:	0f 92       	push	r0
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	0f 92       	push	r0
    2af2:	11 24       	eor	r1, r1
    2af4:	2f 93       	push	r18
    2af6:	3f 93       	push	r19
    2af8:	4f 93       	push	r20
    2afa:	5f 93       	push	r21
    2afc:	6f 93       	push	r22
    2afe:	7f 93       	push	r23
    2b00:	8f 93       	push	r24
    2b02:	9f 93       	push	r25
    2b04:	af 93       	push	r26
    2b06:	bf 93       	push	r27
    2b08:	ef 93       	push	r30
    2b0a:	ff 93       	push	r31
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    2b14:	80 91 42 01 	lds	r24, 0x0142
    2b18:	90 91 43 01 	lds	r25, 0x0143
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	29 f0       	breq	.+10     	; 0x2b2a <__vector_19+0x40>
	{
		(*g_callBackPtr)();
    2b20:	e0 91 42 01 	lds	r30, 0x0142
    2b24:	f0 91 43 01 	lds	r31, 0x0143
    2b28:	09 95       	icall
	}
}
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	ff 91       	pop	r31
    2b30:	ef 91       	pop	r30
    2b32:	bf 91       	pop	r27
    2b34:	af 91       	pop	r26
    2b36:	9f 91       	pop	r25
    2b38:	8f 91       	pop	r24
    2b3a:	7f 91       	pop	r23
    2b3c:	6f 91       	pop	r22
    2b3e:	5f 91       	pop	r21
    2b40:	4f 91       	pop	r20
    2b42:	3f 91       	pop	r19
    2b44:	2f 91       	pop	r18
    2b46:	0f 90       	pop	r0
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	0f 90       	pop	r0
    2b4c:	1f 90       	pop	r1
    2b4e:	18 95       	reti

00002b50 <Timer0_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_init(Timer0_ConfigType *ConfigPtr)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <Timer0_init+0x6>
    2b56:	00 d0       	rcall	.+0      	; 0x2b58 <Timer0_init+0x8>
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	9a 83       	std	Y+2, r25	; 0x02
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigPtr->mode)
    2b60:	e9 81       	ldd	r30, Y+1	; 0x01
    2b62:	fa 81       	ldd	r31, Y+2	; 0x02
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	3c 83       	std	Y+4, r19	; 0x04
    2b6c:	2b 83       	std	Y+3, r18	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	31 f0       	breq	.+12     	; 0x2b82 <Timer0_init+0x32>
    2b76:	2b 81       	ldd	r18, Y+3	; 0x03
    2b78:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7a:	21 30       	cpi	r18, 0x01	; 1
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	b1 f0       	breq	.+44     	; 0x2bac <Timer0_init+0x5c>
    2b80:	33 c0       	rjmp	.+102    	; 0x2be8 <Timer0_init+0x98>
	{
	case normal:
		TCNT0 = ConfigPtr->initial_val; // Set Timer initial value to 195
    2b82:	a2 e5       	ldi	r26, 0x52	; 82
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e9 81       	ldd	r30, Y+1	; 0x01
    2b88:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8a:	81 81       	ldd	r24, Z+1	; 0x01
    2b8c:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0 = 1
		 * 2. Normal Mode WGM01 = 0 & WGM00 = 0
		 * 3. Normal Mode COM00 = 0 & COM01 = 0
		 * 4. clock selected
		 */
		TCCR0 = (1 << FOC0) | (ConfigPtr->clock);
    2b8e:	a3 e5       	ldi	r26, 0x53	; 83
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e9 81       	ldd	r30, Y+1	; 0x01
    2b94:	fa 81       	ldd	r31, Y+2	; 0x02
    2b96:	83 81       	ldd	r24, Z+3	; 0x03
    2b98:	80 68       	ori	r24, 0x80	; 128
    2b9a:	8c 93       	st	X, r24

		TIMSK |= (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    2b9c:	a9 e5       	ldi	r26, 0x59	; 89
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e9 e5       	ldi	r30, 0x59	; 89
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	81 60       	ori	r24, 0x01	; 1
    2ba8:	8c 93       	st	X, r24
    2baa:	1e c0       	rjmp	.+60     	; 0x2be8 <Timer0_init+0x98>
		break;

	case compare:
		TCNT0 = ConfigPtr->initial_val; // Set Timer initial value to 0
    2bac:	a2 e5       	ldi	r26, 0x52	; 82
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	81 81       	ldd	r24, Z+1	; 0x01
    2bb6:	8c 93       	st	X, r24

		OCR0  = ConfigPtr->compare_val; // Set Compare Value
    2bb8:	ac e5       	ldi	r26, 0x5C	; 92
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0 = 1
		 * 2. CTC Mode WGM01 = 1 & WGM00 = 0
		 * 3. Clear OC0 on compare match so COM00 = 0 & COM01 = 1
		 * 4. clock selected
		 */
		TCCR0 |= (1 << FOC0) | (1 << WGM01) | (ConfigPtr->clock) | (1 << COM01);
    2bc4:	a3 e5       	ldi	r26, 0x53	; 83
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e3 e5       	ldi	r30, 0x53	; 83
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	90 81       	ld	r25, Z
    2bce:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd2:	83 81       	ldd	r24, Z+3	; 0x03
    2bd4:	89 2b       	or	r24, r25
    2bd6:	88 6a       	ori	r24, 0xA8	; 168
    2bd8:	8c 93       	st	X, r24

		TIMSK |= (1 << OCIE0); // Enable Timer0 Compare Interrupt
    2bda:	a9 e5       	ldi	r26, 0x59	; 89
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e9 e5       	ldi	r30, 0x59	; 89
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	82 60       	ori	r24, 0x02	; 2
    2be6:	8c 93       	st	X, r24
		break;
	}
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <Set_Callback>:

void Set_Callback(void (*a_ptr)(void))
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <Set_Callback+0x6>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	90 93 43 01 	sts	0x0143, r25
    2c0c:	80 93 42 01 	sts	0x0142, r24
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <Timer0_Deinit>:

void Timer0_Deinit(void)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2c22:	e3 e5       	ldi	r30, 0x53	; 83
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	10 82       	st	Z, r1
}
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <UART_init+0x6>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <UART_init+0x8>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <UART_init+0xa>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	6b 83       	std	Y+3, r22	; 0x03
    2c3e:	7c 83       	std	Y+4, r23	; 0x04
    2c40:	8d 83       	std	Y+5, r24	; 0x05
    2c42:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2c44:	1a 82       	std	Y+2, r1	; 0x02
    2c46:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c48:	eb e2       	ldi	r30, 0x2B	; 43
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c50:	ea e2       	ldi	r30, 0x2A	; 42
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	88 e1       	ldi	r24, 0x18	; 24
    2c56:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2c58:	e0 e4       	ldi	r30, 0x40	; 64
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	86 e8       	ldi	r24, 0x86	; 134
    2c5e:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	ad 81       	ldd	r26, Y+5	; 0x05
    2c66:	be 81       	ldd	r27, Y+6	; 0x06
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	aa 1f       	adc	r26, r26
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	aa 1f       	adc	r26, r26
    2c76:	bb 1f       	adc	r27, r27
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	aa 1f       	adc	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	9c 01       	movw	r18, r24
    2c82:	ad 01       	movw	r20, r26
    2c84:	80 e4       	ldi	r24, 0x40	; 64
    2c86:	92 e4       	ldi	r25, 0x42	; 66
    2c88:	af e0       	ldi	r26, 0x0F	; 15
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 f5 16 	call	0x2dea	; 0x2dea <__udivmodsi4>
    2c94:	da 01       	movw	r26, r20
    2c96:	c9 01       	movw	r24, r18
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	89 2f       	mov	r24, r25
    2ca8:	99 27       	eor	r25, r25
    2caa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2cac:	e9 e2       	ldi	r30, 0x29	; 41
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	80 83       	st	Z, r24
}
    2cb4:	26 96       	adiw	r28, 0x06	; 6
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2cd2:	eb e2       	ldi	r30, 0x2B	; 43
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	80 72       	andi	r24, 0x20	; 32
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	b9 f3       	breq	.-18     	; 0x2cd2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2ce4:	ec e2       	ldi	r30, 0x2C	; 44
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cfc:	eb e2       	ldi	r30, 0x2B	; 43
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	88 23       	and	r24, r24
    2d04:	dc f7       	brge	.-10     	; 0x2cfc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d06:	ec e2       	ldi	r30, 0x2C	; 44
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
}
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <UART_sendString+0x6>
    2d18:	0f 92       	push	r0
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	9b 83       	std	Y+3, r25	; 0x03
    2d20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d22:	19 82       	std	Y+1, r1	; 0x01
    2d24:	0e c0       	rjmp	.+28     	; 0x2d42 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <UART_sendByte>
		i++;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e2 0f       	add	r30, r18
    2d50:	f3 1f       	adc	r31, r19
    2d52:	80 81       	ld	r24, Z
    2d54:	88 23       	and	r24, r24
    2d56:	39 f7       	brne	.-50     	; 0x2d26 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <UART_receiveString+0xa>
    2d6e:	0f 92       	push	r0
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	9b 83       	std	Y+3, r25	; 0x03
    2d76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d78:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	8c 01       	movw	r16, r24
    2d86:	02 0f       	add	r16, r18
    2d88:	13 1f       	adc	r17, r19
    2d8a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_recieveByte>
    2d8e:	f8 01       	movw	r30, r16
    2d90:	80 83       	st	Z, r24
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	8c 01       	movw	r16, r24
    2da6:	02 0f       	add	r16, r18
    2da8:	13 1f       	adc	r17, r19
    2daa:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_recieveByte>
    2dae:	f8 01       	movw	r30, r16
    2db0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	28 2f       	mov	r18, r24
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e2 0f       	add	r30, r18
    2dc0:	f3 1f       	adc	r31, r19
    2dc2:	80 81       	ld	r24, Z
    2dc4:	83 32       	cpi	r24, 0x23	; 35
    2dc6:	31 f7       	brne	.-52     	; 0x2d94 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e2 0f       	add	r30, r18
    2dd6:	f3 1f       	adc	r31, r19
    2dd8:	10 82       	st	Z, r1
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	1f 91       	pop	r17
    2de6:	0f 91       	pop	r16
    2de8:	08 95       	ret

00002dea <__udivmodsi4>:
    2dea:	a1 e2       	ldi	r26, 0x21	; 33
    2dec:	1a 2e       	mov	r1, r26
    2dee:	aa 1b       	sub	r26, r26
    2df0:	bb 1b       	sub	r27, r27
    2df2:	fd 01       	movw	r30, r26
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <__udivmodsi4_ep>

00002df6 <__udivmodsi4_loop>:
    2df6:	aa 1f       	adc	r26, r26
    2df8:	bb 1f       	adc	r27, r27
    2dfa:	ee 1f       	adc	r30, r30
    2dfc:	ff 1f       	adc	r31, r31
    2dfe:	a2 17       	cp	r26, r18
    2e00:	b3 07       	cpc	r27, r19
    2e02:	e4 07       	cpc	r30, r20
    2e04:	f5 07       	cpc	r31, r21
    2e06:	20 f0       	brcs	.+8      	; 0x2e10 <__udivmodsi4_ep>
    2e08:	a2 1b       	sub	r26, r18
    2e0a:	b3 0b       	sbc	r27, r19
    2e0c:	e4 0b       	sbc	r30, r20
    2e0e:	f5 0b       	sbc	r31, r21

00002e10 <__udivmodsi4_ep>:
    2e10:	66 1f       	adc	r22, r22
    2e12:	77 1f       	adc	r23, r23
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	1a 94       	dec	r1
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <__udivmodsi4_loop>
    2e1c:	60 95       	com	r22
    2e1e:	70 95       	com	r23
    2e20:	80 95       	com	r24
    2e22:	90 95       	com	r25
    2e24:	9b 01       	movw	r18, r22
    2e26:	ac 01       	movw	r20, r24
    2e28:	bd 01       	movw	r22, r26
    2e2a:	cf 01       	movw	r24, r30
    2e2c:	08 95       	ret

00002e2e <__prologue_saves__>:
    2e2e:	2f 92       	push	r2
    2e30:	3f 92       	push	r3
    2e32:	4f 92       	push	r4
    2e34:	5f 92       	push	r5
    2e36:	6f 92       	push	r6
    2e38:	7f 92       	push	r7
    2e3a:	8f 92       	push	r8
    2e3c:	9f 92       	push	r9
    2e3e:	af 92       	push	r10
    2e40:	bf 92       	push	r11
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	ca 1b       	sub	r28, r26
    2e58:	db 0b       	sbc	r29, r27
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	09 94       	ijmp

00002e66 <__epilogue_restores__>:
    2e66:	2a 88       	ldd	r2, Y+18	; 0x12
    2e68:	39 88       	ldd	r3, Y+17	; 0x11
    2e6a:	48 88       	ldd	r4, Y+16	; 0x10
    2e6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e78:	b9 84       	ldd	r11, Y+9	; 0x09
    2e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2e7c:	df 80       	ldd	r13, Y+7	; 0x07
    2e7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2e80:	fd 80       	ldd	r15, Y+5	; 0x05
    2e82:	0c 81       	ldd	r16, Y+4	; 0x04
    2e84:	1b 81       	ldd	r17, Y+3	; 0x03
    2e86:	aa 81       	ldd	r26, Y+2	; 0x02
    2e88:	b9 81       	ldd	r27, Y+1	; 0x01
    2e8a:	ce 0f       	add	r28, r30
    2e8c:	d1 1d       	adc	r29, r1
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	ed 01       	movw	r28, r26
    2e9a:	08 95       	ret

00002e9c <itoa>:
    2e9c:	fb 01       	movw	r30, r22
    2e9e:	9f 01       	movw	r18, r30
    2ea0:	e8 94       	clt
    2ea2:	42 30       	cpi	r20, 0x02	; 2
    2ea4:	c4 f0       	brlt	.+48     	; 0x2ed6 <itoa+0x3a>
    2ea6:	45 32       	cpi	r20, 0x25	; 37
    2ea8:	b4 f4       	brge	.+44     	; 0x2ed6 <itoa+0x3a>
    2eaa:	4a 30       	cpi	r20, 0x0A	; 10
    2eac:	29 f4       	brne	.+10     	; 0x2eb8 <itoa+0x1c>
    2eae:	97 fb       	bst	r25, 7
    2eb0:	1e f4       	brtc	.+6      	; 0x2eb8 <itoa+0x1c>
    2eb2:	90 95       	com	r25
    2eb4:	81 95       	neg	r24
    2eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb8:	64 2f       	mov	r22, r20
    2eba:	77 27       	eor	r23, r23
    2ebc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__udivmodhi4>
    2ec0:	80 5d       	subi	r24, 0xD0	; 208
    2ec2:	8a 33       	cpi	r24, 0x3A	; 58
    2ec4:	0c f0       	brlt	.+2      	; 0x2ec8 <itoa+0x2c>
    2ec6:	89 5d       	subi	r24, 0xD9	; 217
    2ec8:	81 93       	st	Z+, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	a1 f7       	brne	.-24     	; 0x2eb8 <itoa+0x1c>
    2ed0:	16 f4       	brtc	.+4      	; 0x2ed6 <itoa+0x3a>
    2ed2:	5d e2       	ldi	r21, 0x2D	; 45
    2ed4:	51 93       	st	Z+, r21
    2ed6:	10 82       	st	Z, r1
    2ed8:	c9 01       	movw	r24, r18
    2eda:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <strrev>

00002ede <strrev>:
    2ede:	dc 01       	movw	r26, r24
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	67 2f       	mov	r22, r23
    2ee4:	71 91       	ld	r23, Z+
    2ee6:	77 23       	and	r23, r23
    2ee8:	e1 f7       	brne	.-8      	; 0x2ee2 <strrev+0x4>
    2eea:	32 97       	sbiw	r30, 0x02	; 2
    2eec:	04 c0       	rjmp	.+8      	; 0x2ef6 <strrev+0x18>
    2eee:	7c 91       	ld	r23, X
    2ef0:	6d 93       	st	X+, r22
    2ef2:	70 83       	st	Z, r23
    2ef4:	62 91       	ld	r22, -Z
    2ef6:	ae 17       	cp	r26, r30
    2ef8:	bf 07       	cpc	r27, r31
    2efa:	c8 f3       	brcs	.-14     	; 0x2eee <strrev+0x10>
    2efc:	08 95       	ret

00002efe <__udivmodhi4>:
    2efe:	aa 1b       	sub	r26, r26
    2f00:	bb 1b       	sub	r27, r27
    2f02:	51 e1       	ldi	r21, 0x11	; 17
    2f04:	07 c0       	rjmp	.+14     	; 0x2f14 <__udivmodhi4_ep>

00002f06 <__udivmodhi4_loop>:
    2f06:	aa 1f       	adc	r26, r26
    2f08:	bb 1f       	adc	r27, r27
    2f0a:	a6 17       	cp	r26, r22
    2f0c:	b7 07       	cpc	r27, r23
    2f0e:	10 f0       	brcs	.+4      	; 0x2f14 <__udivmodhi4_ep>
    2f10:	a6 1b       	sub	r26, r22
    2f12:	b7 0b       	sbc	r27, r23

00002f14 <__udivmodhi4_ep>:
    2f14:	88 1f       	adc	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	5a 95       	dec	r21
    2f1a:	a9 f7       	brne	.-22     	; 0x2f06 <__udivmodhi4_loop>
    2f1c:	80 95       	com	r24
    2f1e:	90 95       	com	r25
    2f20:	bc 01       	movw	r22, r24
    2f22:	cd 01       	movw	r24, r26
    2f24:	08 95       	ret

00002f26 <_exit>:
    2f26:	f8 94       	cli

00002f28 <__stop_program>:
    2f28:	ff cf       	rjmp	.-2      	; 0x2f28 <__stop_program>

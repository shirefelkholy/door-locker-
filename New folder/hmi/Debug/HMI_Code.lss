
HMI_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00002f22  00002fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800140  00800140  00003096  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00003098  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fff  00000000  00000000  00005cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a868  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 34       	cpi	r26, 0x44	; 68
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 0c 	call	0x1822	; 0x1822 <main>
      8a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e3       	ldi	r26, 0x37	; 55
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e3       	ldi	r24, 0x37	; 55
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <pass_first_time>:
 * Description:
 * Display Door is locking on LCD
 * */
void door_lock(void);

void pass_first_time(uint8 *key){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	a0 97       	sbiw	r28, 0x20	; 32
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	98 a3       	std	Y+32, r25	; 0x20
    11d8:	8f 8f       	std	Y+31, r24	; 0x1f
	LCD_clearScreen();
    11da:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
	uint8 count = 0, check_numb = 0;
    11de:	1e 8e       	std	Y+30, r1	; 0x1e
    11e0:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_displayString("Please Enter New");
    11e2:	80 e6       	ldi	r24, 0x60	; 96
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	LCD_moveCursor(1, 0);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
	LCD_displayString("Password:");
    11f2:	81 e7       	ldi	r24, 0x71	; 113
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	for (count = 0; count < 5; count++) {
    11fa:	1e 8e       	std	Y+30, r1	; 0x1e
    11fc:	11 c1       	rjmp	.+546    	; 0x1420 <pass_first_time+0x25e>
		check_numb = KEYPAD_getPressedKey();
    11fe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <KEYPAD_getPressedKey>
    1202:	8d 8f       	std	Y+29, r24	; 0x1d
		if (check_numb <= 9 && check_numb >= 0) {
    1204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1206:	8a 30       	cpi	r24, 0x0A	; 10
    1208:	08 f0       	brcs	.+2      	; 0x120c <pass_first_time+0x4a>
    120a:	80 c0       	rjmp	.+256    	; 0x130c <pass_first_time+0x14a>
			key[count] = check_numb;
    120c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1214:	98 a1       	ldd	r25, Y+32	; 0x20
    1216:	fc 01       	movw	r30, r24
    1218:	e2 0f       	add	r30, r18
    121a:	f3 1f       	adc	r31, r19
    121c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121e:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1220:	8a e2       	ldi	r24, 0x2A	; 42
    1222:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayCharacter>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a6 e9       	ldi	r26, 0x96	; 150
    122c:	b3 e4       	ldi	r27, 0x43	; 67
    122e:	89 8f       	std	Y+25, r24	; 0x19
    1230:	9a 8f       	std	Y+26, r25	; 0x1a
    1232:	ab 8f       	std	Y+27, r26	; 0x1b
    1234:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1236:	69 8d       	ldd	r22, Y+25	; 0x19
    1238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    123a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	4a e7       	ldi	r20, 0x7A	; 122
    1244:	53 e4       	ldi	r21, 0x43	; 67
    1246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	8d 8b       	std	Y+21, r24	; 0x15
    1250:	9e 8b       	std	Y+22, r25	; 0x16
    1252:	af 8b       	std	Y+23, r26	; 0x17
    1254:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1256:	6d 89       	ldd	r22, Y+21	; 0x15
    1258:	7e 89       	ldd	r23, Y+22	; 0x16
    125a:	8f 89       	ldd	r24, Y+23	; 0x17
    125c:	98 8d       	ldd	r25, Y+24	; 0x18
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e8       	ldi	r20, 0x80	; 128
    1264:	5f e3       	ldi	r21, 0x3F	; 63
    1266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126a:	88 23       	and	r24, r24
    126c:	2c f4       	brge	.+10     	; 0x1278 <pass_first_time+0xb6>
		__ticks = 1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9c 8b       	std	Y+20, r25	; 0x14
    1274:	8b 8b       	std	Y+19, r24	; 0x13
    1276:	3f c0       	rjmp	.+126    	; 0x12f6 <pass_first_time+0x134>
	else if (__tmp > 65535)
    1278:	6d 89       	ldd	r22, Y+21	; 0x15
    127a:	7e 89       	ldd	r23, Y+22	; 0x16
    127c:	8f 89       	ldd	r24, Y+23	; 0x17
    127e:	98 8d       	ldd	r25, Y+24	; 0x18
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	3f ef       	ldi	r19, 0xFF	; 255
    1284:	4f e7       	ldi	r20, 0x7F	; 127
    1286:	57 e4       	ldi	r21, 0x47	; 71
    1288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128c:	18 16       	cp	r1, r24
    128e:	4c f5       	brge	.+82     	; 0x12e2 <pass_first_time+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1290:	69 8d       	ldd	r22, Y+25	; 0x19
    1292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e2       	ldi	r20, 0x20	; 32
    129e:	51 e4       	ldi	r21, 0x41	; 65
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	bc 01       	movw	r22, r24
    12aa:	cd 01       	movw	r24, r26
    12ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9c 8b       	std	Y+20, r25	; 0x14
    12b6:	8b 8b       	std	Y+19, r24	; 0x13
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <pass_first_time+0x116>
    12ba:	89 e1       	ldi	r24, 0x19	; 25
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9a 8b       	std	Y+18, r25	; 0x12
    12c0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c2:	89 89       	ldd	r24, Y+17	; 0x11
    12c4:	9a 89       	ldd	r25, Y+18	; 0x12
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <pass_first_time+0x104>
    12ca:	9a 8b       	std	Y+18, r25	; 0x12
    12cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	8b 89       	ldd	r24, Y+19	; 0x13
    12d0:	9c 89       	ldd	r25, Y+20	; 0x14
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	9c 8b       	std	Y+20, r25	; 0x14
    12d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d8:	8b 89       	ldd	r24, Y+19	; 0x13
    12da:	9c 89       	ldd	r25, Y+20	; 0x14
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	69 f7       	brne	.-38     	; 0x12ba <pass_first_time+0xf8>
    12e0:	9c c0       	rjmp	.+312    	; 0x141a <pass_first_time+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9c 8b       	std	Y+20, r25	; 0x14
    12f4:	8b 8b       	std	Y+19, r24	; 0x13
    12f6:	8b 89       	ldd	r24, Y+19	; 0x13
    12f8:	9c 89       	ldd	r25, Y+20	; 0x14
    12fa:	98 8b       	std	Y+16, r25	; 0x10
    12fc:	8f 87       	std	Y+15, r24	; 0x0f
    12fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1300:	98 89       	ldd	r25, Y+16	; 0x10
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <pass_first_time+0x140>
    1306:	98 8b       	std	Y+16, r25	; 0x10
    1308:	8f 87       	std	Y+15, r24	; 0x0f
    130a:	87 c0       	rjmp	.+270    	; 0x141a <pass_first_time+0x258>
			_delay_ms(300);
		} else {
			LCD_clearScreen();
    130c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
			LCD_displayString("Please Enter Five Numbs!");
    1310:	8b e7       	ldi	r24, 0x7B	; 123
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	aa ef       	ldi	r26, 0xFA	; 250
    131e:	b3 e4       	ldi	r27, 0x43	; 67
    1320:	8b 87       	std	Y+11, r24	; 0x0b
    1322:	9c 87       	std	Y+12, r25	; 0x0c
    1324:	ad 87       	std	Y+13, r26	; 0x0d
    1326:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	6b 85       	ldd	r22, Y+11	; 0x0b
    132a:	7c 85       	ldd	r23, Y+12	; 0x0c
    132c:	8d 85       	ldd	r24, Y+13	; 0x0d
    132e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a e7       	ldi	r20, 0x7A	; 122
    1336:	53 e4       	ldi	r21, 0x43	; 67
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8f 83       	std	Y+7, r24	; 0x07
    1342:	98 87       	std	Y+8, r25	; 0x08
    1344:	a9 87       	std	Y+9, r26	; 0x09
    1346:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1348:	6f 81       	ldd	r22, Y+7	; 0x07
    134a:	78 85       	ldd	r23, Y+8	; 0x08
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	2c f4       	brge	.+10     	; 0x136a <pass_first_time+0x1a8>
		__ticks = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <pass_first_time+0x226>
	else if (__tmp > 65535)
    136a:	6f 81       	ldd	r22, Y+7	; 0x07
    136c:	78 85       	ldd	r23, Y+8	; 0x08
    136e:	89 85       	ldd	r24, Y+9	; 0x09
    1370:	9a 85       	ldd	r25, Y+10	; 0x0a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	57 e4       	ldi	r21, 0x47	; 71
    137a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	4c f5       	brge	.+82     	; 0x13d4 <pass_first_time+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	6b 85       	ldd	r22, Y+11	; 0x0b
    1384:	7c 85       	ldd	r23, Y+12	; 0x0c
    1386:	8d 85       	ldd	r24, Y+13	; 0x0d
    1388:	9e 85       	ldd	r25, Y+14	; 0x0e
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <pass_first_time+0x208>
    13ac:	89 e1       	ldi	r24, 0x19	; 25
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	8b 83       	std	Y+3, r24	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <pass_first_time+0x1f6>
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	9e 81       	ldd	r25, Y+6	; 0x06
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	69 f7       	brne	.-38     	; 0x13ac <pass_first_time+0x1ea>
    13d2:	14 c0       	rjmp	.+40     	; 0x13fc <pass_first_time+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d4:	6f 81       	ldd	r22, Y+7	; 0x07
    13d6:	78 85       	ldd	r23, Y+8	; 0x08
    13d8:	89 85       	ldd	r24, Y+9	; 0x09
    13da:	9a 85       	ldd	r25, Y+10	; 0x0a
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <pass_first_time+0x232>
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    13fc:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
			LCD_displayString("Please Enter New");
    1400:	80 e6       	ldi	r24, 0x60	; 96
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
			LCD_moveCursor(1, 0);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
			LCD_displayString("Password:");
    1410:	81 e7       	ldi	r24, 0x71	; 113
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
			count = 0;
    1418:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
	uint8 count = 0, check_numb = 0;
	LCD_displayString("Please Enter New");
	LCD_moveCursor(1, 0);
	LCD_displayString("Password:");
	for (count = 0; count < 5; count++) {
    141a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141c:	8f 5f       	subi	r24, 0xFF	; 255
    141e:	8e 8f       	std	Y+30, r24	; 0x1e
    1420:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1422:	85 30       	cpi	r24, 0x05	; 5
    1424:	08 f4       	brcc	.+2      	; 0x1428 <pass_first_time+0x266>
    1426:	eb ce       	rjmp	.-554    	; 0x11fe <pass_first_time+0x3c>
			LCD_moveCursor(1, 0);
			LCD_displayString("Password:");
			count = 0;
		}
	}
}
    1428:	a0 96       	adiw	r28, 0x20	; 32
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <ask_pass>:

void ask_pass(uint8 *key) {
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	61 97       	sbiw	r28, 0x11	; 17
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	99 8b       	std	Y+17, r25	; 0x11
    1454:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count = 0;
    1456:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    1458:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
	LCD_displayString("Please Enter");
    145c:	84 e9       	ldi	r24, 0x94	; 148
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	LCD_moveCursor(1, 0);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
	LCD_displayString("Password:");
    146c:	81 e7       	ldi	r24, 0x71	; 113
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	for (count = 0; count < 5; count++) {
    1474:	1f 86       	std	Y+15, r1	; 0x0f
    1476:	84 c0       	rjmp	.+264    	; 0x1580 <ask_pass+0x146>
		key[count] = KEYPAD_getPressedKey();
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	88 89       	ldd	r24, Y+16	; 0x10
    1480:	99 89       	ldd	r25, Y+17	; 0x11
    1482:	8c 01       	movw	r16, r24
    1484:	02 0f       	add	r16, r18
    1486:	13 1f       	adc	r17, r19
    1488:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <KEYPAD_getPressedKey>
    148c:	f8 01       	movw	r30, r16
    148e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1490:	8a e2       	ldi	r24, 0x2A	; 42
    1492:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayCharacter>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a6 e9       	ldi	r26, 0x96	; 150
    149c:	b3 e4       	ldi	r27, 0x43	; 67
    149e:	8b 87       	std	Y+11, r24	; 0x0b
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	ad 87       	std	Y+13, r26	; 0x0d
    14a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a e7       	ldi	r20, 0x7A	; 122
    14b4:	53 e4       	ldi	r21, 0x43	; 67
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	98 87       	std	Y+8, r25	; 0x08
    14c2:	a9 87       	std	Y+9, r26	; 0x09
    14c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <ask_pass+0xae>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <ask_pass+0x12c>
	else if (__tmp > 65535)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <ask_pass+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <ask_pass+0x10e>
    152a:	89 e1       	ldi	r24, 0x19	; 25
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <ask_pass+0xfc>
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <ask_pass+0xf0>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <ask_pass+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <ask_pass+0x138>
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
	uint8 count = 0;
	LCD_clearScreen();
	LCD_displayString("Please Enter");
	LCD_moveCursor(1, 0);
	LCD_displayString("Password:");
	for (count = 0; count < 5; count++) {
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	8f 87       	std	Y+15, r24	; 0x0f
    1580:	8f 85       	ldd	r24, Y+15	; 0x0f
    1582:	85 30       	cpi	r24, 0x05	; 5
    1584:	08 f4       	brcc	.+2      	; 0x1588 <ask_pass+0x14e>
    1586:	78 cf       	rjmp	.-272    	; 0x1478 <ask_pass+0x3e>
		key[count] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	key[5] = '#';
    1588:	88 89       	ldd	r24, Y+16	; 0x10
    158a:	99 89       	ldd	r25, Y+17	; 0x11
    158c:	fc 01       	movw	r30, r24
    158e:	35 96       	adiw	r30, 0x05	; 5
    1590:	83 e2       	ldi	r24, 0x23	; 35
    1592:	80 83       	st	Z, r24
	key[6] = '\0';
    1594:	88 89       	ldd	r24, Y+16	; 0x10
    1596:	99 89       	ldd	r25, Y+17	; 0x11
    1598:	fc 01       	movw	r30, r24
    159a:	36 96       	adiw	r30, 0x06	; 6
    159c:	10 82       	st	Z, r1
	UART_sendString(key);
    159e:	88 89       	ldd	r24, Y+16	; 0x10
    15a0:	99 89       	ldd	r25, Y+17	; 0x11
    15a2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <UART_sendString>
}
    15a6:	61 96       	adiw	r28, 0x11	; 17
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

000015bc <old_pass>:

void old_pass(uint8 *key) {
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	6f 97       	sbiw	r28, 0x1f	; 31
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	9f 8f       	std	Y+31, r25	; 0x1f
    15d6:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 count = 0;
    15d8:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    15da:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
	LCD_displayString("Please Enter Old ");
    15de:	81 ea       	ldi	r24, 0xA1	; 161
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	LCD_moveCursor(1, 0);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
	LCD_displayString("Password :");
    15ee:	83 eb       	ldi	r24, 0xB3	; 179
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	aa ef       	ldi	r26, 0xFA	; 250
    15fc:	b3 e4       	ldi	r27, 0x43	; 67
    15fe:	89 8f       	std	Y+25, r24	; 0x19
    1600:	9a 8f       	std	Y+26, r25	; 0x1a
    1602:	ab 8f       	std	Y+27, r26	; 0x1b
    1604:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	69 8d       	ldd	r22, Y+25	; 0x19
    1608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a e7       	ldi	r20, 0x7A	; 122
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8d 8b       	std	Y+21, r24	; 0x15
    1620:	9e 8b       	std	Y+22, r25	; 0x16
    1622:	af 8b       	std	Y+23, r26	; 0x17
    1624:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1626:	6d 89       	ldd	r22, Y+21	; 0x15
    1628:	7e 89       	ldd	r23, Y+22	; 0x16
    162a:	8f 89       	ldd	r24, Y+23	; 0x17
    162c:	98 8d       	ldd	r25, Y+24	; 0x18
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <old_pass+0x8c>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
    1646:	3f c0       	rjmp	.+126    	; 0x16c6 <old_pass+0x10a>
	else if (__tmp > 65535)
    1648:	6d 89       	ldd	r22, Y+21	; 0x15
    164a:	7e 89       	ldd	r23, Y+22	; 0x16
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	98 8d       	ldd	r25, Y+24	; 0x18
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	4c f5       	brge	.+82     	; 0x16b2 <old_pass+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <old_pass+0xec>
    168a:	89 e1       	ldi	r24, 0x19	; 25
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	89 8b       	std	Y+17, r24	; 0x11
    1692:	89 89       	ldd	r24, Y+17	; 0x11
    1694:	9a 89       	ldd	r25, Y+18	; 0x12
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <old_pass+0xda>
    169a:	9a 8b       	std	Y+18, r25	; 0x12
    169c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	8b 89       	ldd	r24, Y+19	; 0x13
    16a0:	9c 89       	ldd	r25, Y+20	; 0x14
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	8b 89       	ldd	r24, Y+19	; 0x13
    16aa:	9c 89       	ldd	r25, Y+20	; 0x14
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <old_pass+0xce>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <old_pass+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	6d 89       	ldd	r22, Y+21	; 0x15
    16b4:	7e 89       	ldd	r23, Y+22	; 0x16
    16b6:	8f 89       	ldd	r24, Y+23	; 0x17
    16b8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9c 8b       	std	Y+20, r25	; 0x14
    16c4:	8b 8b       	std	Y+19, r24	; 0x13
    16c6:	8b 89       	ldd	r24, Y+19	; 0x13
    16c8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ca:	98 8b       	std	Y+16, r25	; 0x10
    16cc:	8f 87       	std	Y+15, r24	; 0x0f
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	98 89       	ldd	r25, Y+16	; 0x10
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <old_pass+0x116>
    16d6:	98 8b       	std	Y+16, r25	; 0x10
    16d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	for (count = 0; count < 5; count++) {
    16da:	1d 8e       	std	Y+29, r1	; 0x1d
    16dc:	84 c0       	rjmp	.+264    	; 0x17e6 <old_pass+0x22a>
		key[count] = KEYPAD_getPressedKey();
    16de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16e8:	8c 01       	movw	r16, r24
    16ea:	02 0f       	add	r16, r18
    16ec:	13 1f       	adc	r17, r19
    16ee:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <KEYPAD_getPressedKey>
    16f2:	f8 01       	movw	r30, r16
    16f4:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    16f6:	8a e2       	ldi	r24, 0x2A	; 42
    16f8:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayCharacter>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a6 e9       	ldi	r26, 0x96	; 150
    1702:	b3 e4       	ldi	r27, 0x43	; 67
    1704:	8b 87       	std	Y+11, r24	; 0x0b
    1706:	9c 87       	std	Y+12, r25	; 0x0c
    1708:	ad 87       	std	Y+13, r26	; 0x0d
    170a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	6b 85       	ldd	r22, Y+11	; 0x0b
    170e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a e7       	ldi	r20, 0x7A	; 122
    171a:	53 e4       	ldi	r21, 0x43	; 67
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8f 83       	std	Y+7, r24	; 0x07
    1726:	98 87       	std	Y+8, r25	; 0x08
    1728:	a9 87       	std	Y+9, r26	; 0x09
    172a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <old_pass+0x192>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <old_pass+0x210>
	else if (__tmp > 65535)
    174e:	6f 81       	ldd	r22, Y+7	; 0x07
    1750:	78 85       	ldd	r23, Y+8	; 0x08
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <old_pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	6b 85       	ldd	r22, Y+11	; 0x0b
    1768:	7c 85       	ldd	r23, Y+12	; 0x0c
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <old_pass+0x1f2>
    1790:	89 e1       	ldi	r24, 0x19	; 25
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <old_pass+0x1e0>
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <old_pass+0x1d4>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <old_pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <old_pass+0x21c>
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Old ");
	LCD_moveCursor(1, 0);
	LCD_displayString("Password :");
	_delay_ms(500);
	for (count = 0; count < 5; count++) {
    17e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	8d 8f       	std	Y+29, r24	; 0x1d
    17e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e8:	85 30       	cpi	r24, 0x05	; 5
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <old_pass+0x232>
    17ec:	78 cf       	rjmp	.-272    	; 0x16de <old_pass+0x122>
		key[count] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	key[5] = '#';
    17ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17f2:	fc 01       	movw	r30, r24
    17f4:	35 96       	adiw	r30, 0x05	; 5
    17f6:	83 e2       	ldi	r24, 0x23	; 35
    17f8:	80 83       	st	Z, r24
	key[6] = '\0';
    17fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17fe:	fc 01       	movw	r30, r24
    1800:	36 96       	adiw	r30, 0x06	; 6
    1802:	10 82       	st	Z, r1
	UART_sendString(key);
    1804:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1806:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1808:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <UART_sendString>
}
    180c:	6f 96       	adiw	r28, 0x1f	; 31
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <main>:

int main(void)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	cc 54       	subi	r28, 0x4C	; 76
    182c:	d0 40       	sbci	r29, 0x00	; 0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
	 *                           Initialization Section                            *
	 *******************************************************************************/
	uint8 check[6], key[7], option_key = 0, wrong_input = 0, i = 0;
    1838:	1b ae       	std	Y+59, r1	; 0x3b
    183a:	1a ae       	std	Y+58, r1	; 0x3a
    183c:	19 ae       	std	Y+57, r1	; 0x39

	SREG |= (1 << 7);
    183e:	af e5       	ldi	r26, 0x5F	; 95
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ef e5       	ldi	r30, 0x5F	; 95
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 68       	ori	r24, 0x80	; 128
    184a:	8c 93       	st	X, r24

	// Set configuration for Timer0
	Timer0_ConfigType timer_config = { normal, 0, 0, clk_256};
    184c:	fe 01       	movw	r30, r28
    184e:	e7 5b       	subi	r30, 0xB7	; 183
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	10 82       	st	Z, r1
    1854:	fe 01       	movw	r30, r28
    1856:	e7 5b       	subi	r30, 0xB7	; 183
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	11 82       	std	Z+1, r1	; 0x01
    185c:	fe 01       	movw	r30, r28
    185e:	e7 5b       	subi	r30, 0xB7	; 183
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	12 82       	std	Z+2, r1	; 0x02
    1864:	fe 01       	movw	r30, r28
    1866:	e7 5b       	subi	r30, 0xB7	; 183
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	83 83       	std	Z+3, r24	; 0x03

	// Initialize the UART driver with Baud-rate = 9600 bits/sec
	UART_init(9600);
    186e:	60 e8       	ldi	r22, 0x80	; 128
    1870:	75 e2       	ldi	r23, 0x25	; 37
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 13 16 	call	0x2c26	; 0x2c26 <UART_init>

	// Initialize LCD
	LCD_init();
    187a:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_init>

	// Set Timer0 Call back function
	Set_Callback(Timer0_Tick);
    187e:	83 e4       	ldi	r24, 0x43	; 67
    1880:	9f e0       	ldi	r25, 0x0F	; 15
    1882:	0e 94 f7 15 	call	0x2bee	; 0x2bee <Set_Callback>
//		match_check = pass_match_check(key, check);
//	}
//	match_check = 1;

	while (1) {
		pass_first_time(key);
    1886:	ce 01       	movw	r24, r28
    1888:	8e 5b       	subi	r24, 0xBE	; 190
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <pass_first_time>
		pass_first_time(check);
    1890:	ce 01       	movw	r24, r28
    1892:	cc 96       	adiw	r24, 0x3c	; 60
    1894:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <pass_first_time>
		for (i = 0; i < 5; i++) {
    1898:	19 ae       	std	Y+57, r1	; 0x39
    189a:	18 c0       	rjmp	.+48     	; 0x18cc <main+0xaa>
			if (key[i] == check[i]) {
    189c:	89 ad       	ldd	r24, Y+57	; 0x39
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	ce 01       	movw	r24, r28
    18a4:	8e 5b       	subi	r24, 0xBE	; 190
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	fc 01       	movw	r30, r24
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	40 81       	ld	r20, Z
    18b0:	89 ad       	ldd	r24, Y+57	; 0x39
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	ce 01       	movw	r24, r28
    18b8:	cc 96       	adiw	r24, 0x3c	; 60
    18ba:	fc 01       	movw	r30, r24
    18bc:	e2 0f       	add	r30, r18
    18be:	f3 1f       	adc	r31, r19
    18c0:	80 81       	ld	r24, Z
    18c2:	48 17       	cp	r20, r24
    18c4:	31 f4       	brne	.+12     	; 0x18d2 <main+0xb0>
//	match_check = 1;

	while (1) {
		pass_first_time(key);
		pass_first_time(check);
		for (i = 0; i < 5; i++) {
    18c6:	89 ad       	ldd	r24, Y+57	; 0x39
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	89 af       	std	Y+57, r24	; 0x39
    18cc:	89 ad       	ldd	r24, Y+57	; 0x39
    18ce:	85 30       	cpi	r24, 0x05	; 5
    18d0:	28 f3       	brcs	.-54     	; 0x189c <main+0x7a>

			} else {
				break;
			}
		}
		if (i == 5) {
    18d2:	89 ad       	ldd	r24, Y+57	; 0x39
    18d4:	85 30       	cpi	r24, 0x05	; 5
    18d6:	11 f0       	breq	.+4      	; 0x18dc <main+0xba>
			break;
		} else {
			i = 0;
    18d8:	19 ae       	std	Y+57, r1	; 0x39
    18da:	d5 cf       	rjmp	.-86     	; 0x1886 <main+0x64>
		}
	}

	key[5] = '#'; // termination Character to UART message
    18dc:	fe 01       	movw	r30, r28
    18de:	ee 5b       	subi	r30, 0xBE	; 190
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	83 e2       	ldi	r24, 0x23	; 35
    18e4:	85 83       	std	Z+5, r24	; 0x05
	key[6] = '\0';
    18e6:	fe 01       	movw	r30, r28
    18e8:	ee 5b       	subi	r30, 0xBE	; 190
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	16 82       	std	Z+6, r1	; 0x06

	// Send the password to Control ECU to Save it in EEPROM
	UART_sendString(key);
    18ee:	ce 01       	movw	r24, r28
    18f0:	8e 5b       	subi	r24, 0xBE	; 190
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <UART_sendString>
	while (1) {
		main_options();
    18f8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <main_options>
		option_key = KEYPAD_getPressedKey();
    18fc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <KEYPAD_getPressedKey>
    1900:	8b af       	std	Y+59, r24	; 0x3b
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a6 e9       	ldi	r26, 0x96	; 150
    1908:	b3 e4       	ldi	r27, 0x43	; 67
    190a:	8d ab       	std	Y+53, r24	; 0x35
    190c:	9e ab       	std	Y+54, r25	; 0x36
    190e:	af ab       	std	Y+55, r26	; 0x37
    1910:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1912:	6d a9       	ldd	r22, Y+53	; 0x35
    1914:	7e a9       	ldd	r23, Y+54	; 0x36
    1916:	8f a9       	ldd	r24, Y+55	; 0x37
    1918:	98 ad       	ldd	r25, Y+56	; 0x38
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	89 ab       	std	Y+49, r24	; 0x31
    192c:	9a ab       	std	Y+50, r25	; 0x32
    192e:	ab ab       	std	Y+51, r26	; 0x33
    1930:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1932:	69 a9       	ldd	r22, Y+49	; 0x31
    1934:	7a a9       	ldd	r23, Y+50	; 0x32
    1936:	8b a9       	ldd	r24, Y+51	; 0x33
    1938:	9c a9       	ldd	r25, Y+52	; 0x34
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1946:	88 23       	and	r24, r24
    1948:	2c f4       	brge	.+10     	; 0x1954 <main+0x132>
		__ticks = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	3f c0       	rjmp	.+126    	; 0x19d2 <main+0x1b0>
	else if (__tmp > 65535)
    1954:	69 a9       	ldd	r22, Y+49	; 0x31
    1956:	7a a9       	ldd	r23, Y+50	; 0x32
    1958:	8b a9       	ldd	r24, Y+51	; 0x33
    195a:	9c a9       	ldd	r25, Y+52	; 0x34
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	4c f5       	brge	.+82     	; 0x19be <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	6d a9       	ldd	r22, Y+53	; 0x35
    196e:	7e a9       	ldd	r23, Y+54	; 0x36
    1970:	8f a9       	ldd	r24, Y+55	; 0x37
    1972:	98 ad       	ldd	r25, Y+56	; 0x38
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	98 ab       	std	Y+48, r25	; 0x30
    1992:	8f a7       	std	Y+47, r24	; 0x2f
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <main+0x192>
    1996:	89 e1       	ldi	r24, 0x19	; 25
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9e a7       	std	Y+46, r25	; 0x2e
    199c:	8d a7       	std	Y+45, r24	; 0x2d
    199e:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <main+0x180>
    19a6:	9e a7       	std	Y+46, r25	; 0x2e
    19a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ac:	98 a9       	ldd	r25, Y+48	; 0x30
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	98 ab       	std	Y+48, r25	; 0x30
    19b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b6:	98 a9       	ldd	r25, Y+48	; 0x30
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	69 f7       	brne	.-38     	; 0x1996 <main+0x174>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19be:	69 a9       	ldd	r22, Y+49	; 0x31
    19c0:	7a a9       	ldd	r23, Y+50	; 0x32
    19c2:	8b a9       	ldd	r24, Y+51	; 0x33
    19c4:	9c a9       	ldd	r25, Y+52	; 0x34
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	98 ab       	std	Y+48, r25	; 0x30
    19d0:	8f a7       	std	Y+47, r24	; 0x2f
    19d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d4:	98 a9       	ldd	r25, Y+48	; 0x30
    19d6:	9c a7       	std	Y+44, r25	; 0x2c
    19d8:	8b a7       	std	Y+43, r24	; 0x2b
    19da:	8b a5       	ldd	r24, Y+43	; 0x2b
    19dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <main+0x1bc>
    19e2:	9c a7       	std	Y+44, r25	; 0x2c
    19e4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);

		if (option_key == '+') {
    19e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    19e8:	8b 32       	cpi	r24, 0x2B	; 43
    19ea:	09 f0       	breq	.+2      	; 0x19ee <main+0x1cc>
    19ec:	50 c1       	rjmp	.+672    	; 0x1c8e <main+0x46c>
			ask_pass(key);
    19ee:	ce 01       	movw	r24, r28
    19f0:	8e 5b       	subi	r24, 0xBE	; 190
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	0e 94 1d 0a 	call	0x143a	; 0x143a <ask_pass>
//			// Send the password to Control ECU to compare it with pass in EEPROM
//			UART_sendString(key);
//			_delay_ms(10);

			// Send to Control_ECU that the user wants to open door
			UART_sendByte(option_key);
    19f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    19fa:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <UART_sendByte>

			// if the Password is the same compared to EEPROM, open the door
			option_key = UART_recieveByte();
    19fe:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
    1a02:	8b af       	std	Y+59, r24	; 0x3b

			if (option_key == READY) {
    1a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	49 f5       	brne	.+82     	; 0x1a5c <main+0x23a>
				door_unlock();
    1a0a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <door_unlock>

				// wait 15s till door opens
				Timer0_init(&timer_config);
    1a0e:	ce 01       	movw	r24, r28
    1a10:	87 5b       	subi	r24, 0xB7	; 183
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <Timer0_init>
				while (Tick < NUMBER_OF_OVERFLOWS_PER_SECOND);
    1a18:	80 91 40 01 	lds	r24, 0x0140
    1a1c:	90 91 41 01 	lds	r25, 0x0141
    1a20:	8f 30       	cpi	r24, 0x0F	; 15
    1a22:	91 05       	cpc	r25, r1
    1a24:	c8 f3       	brcs	.-14     	; 0x1a18 <main+0x1f6>
				// disable timer0 & reset tick
				Timer0_Deinit();
    1a26:	0e 94 09 16 	call	0x2c12	; 0x2c12 <Timer0_Deinit>
				Tick = 0;
    1a2a:	10 92 41 01 	sts	0x0141, r1
    1a2e:	10 92 40 01 	sts	0x0140, r1

				//LCD_clearScreen();

				door_lock();
    1a32:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <door_lock>

				Timer0_init(&timer_config);
    1a36:	ce 01       	movw	r24, r28
    1a38:	87 5b       	subi	r24, 0xB7	; 183
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <Timer0_init>
				while (Tick < NUMBER_OF_OVERFLOWS_PER_SECOND);
    1a40:	80 91 40 01 	lds	r24, 0x0140
    1a44:	90 91 41 01 	lds	r25, 0x0141
    1a48:	8f 30       	cpi	r24, 0x0F	; 15
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	c8 f3       	brcs	.-14     	; 0x1a40 <main+0x21e>
				// disable timer0 & reset tick
				Timer0_Deinit();
    1a4e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <Timer0_Deinit>
				Tick = 0;
    1a52:	10 92 41 01 	sts	0x0141, r1
    1a56:	10 92 40 01 	sts	0x0140, r1
    1a5a:	4e cf       	rjmp	.-356    	; 0x18f8 <main+0xd6>
			}
			// if the Password is not right print error message and count number of wrong inputs
			else {
				LCD_clearScreen();
    1a5c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
				LCD_displayString("Wrong Pass!");
    1a60:	8e eb       	ldi	r24, 0xBE	; 190
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
				wrong_input++;
    1a68:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	8a af       	std	Y+58, r24	; 0x3a

				// if the user enter the password wrong three times Stop the System for one minute
				if (wrong_input == 3) {
    1a6e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	11 f5       	brne	.+68     	; 0x1ab8 <main+0x296>
					LCD_clearScreen();
    1a74:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
					LCD_displayString("Multi Wrong!!");
    1a78:	8a ec       	ldi	r24, 0xCA	; 202
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
					LCD_moveCursor(1, 0);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
					LCD_displayString("Wait 1 minute...");
    1a88:	88 ed       	ldi	r24, 0xD8	; 216
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>

					Timer0_init(&timer_config);
    1a90:	ce 01       	movw	r24, r28
    1a92:	87 5b       	subi	r24, 0xB7	; 183
    1a94:	9f 4f       	sbci	r25, 0xFF	; 255
    1a96:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <Timer0_init>
					while (Tick < NUMBER_OF_OVERFLOWS_PER_4_SECONDS);
    1a9a:	80 91 40 01 	lds	r24, 0x0140
    1a9e:	90 91 41 01 	lds	r25, 0x0141
    1aa2:	8c 33       	cpi	r24, 0x3C	; 60
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	c8 f3       	brcs	.-14     	; 0x1a9a <main+0x278>
					Timer0_Deinit();
    1aa8:	0e 94 09 16 	call	0x2c12	; 0x2c12 <Timer0_Deinit>
					Tick = 0;
    1aac:	10 92 41 01 	sts	0x0141, r1
    1ab0:	10 92 40 01 	sts	0x0140, r1
					wrong_input = 0;
    1ab4:	1a ae       	std	Y+58, r1	; 0x3a
    1ab6:	72 c0       	rjmp	.+228    	; 0x1b9c <main+0x37a>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	aa ef       	ldi	r26, 0xFA	; 250
    1abe:	b3 e4       	ldi	r27, 0x43	; 67
    1ac0:	8f a3       	std	Y+39, r24	; 0x27
    1ac2:	98 a7       	std	Y+40, r25	; 0x28
    1ac4:	a9 a7       	std	Y+41, r26	; 0x29
    1ac6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aca:	78 a5       	ldd	r23, Y+40	; 0x28
    1acc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a e7       	ldi	r20, 0x7A	; 122
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8b a3       	std	Y+35, r24	; 0x23
    1ae2:	9c a3       	std	Y+36, r25	; 0x24
    1ae4:	ad a3       	std	Y+37, r26	; 0x25
    1ae6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aea:	7c a1       	ldd	r23, Y+36	; 0x24
    1aec:	8d a1       	ldd	r24, Y+37	; 0x25
    1aee:	9e a1       	ldd	r25, Y+38	; 0x26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <main+0x2e8>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9a a3       	std	Y+34, r25	; 0x22
    1b06:	89 a3       	std	Y+33, r24	; 0x21
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <main+0x366>
	else if (__tmp > 65535)
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6f a1       	ldd	r22, Y+39	; 0x27
    1b24:	78 a5       	ldd	r23, Y+40	; 0x28
    1b26:	89 a5       	ldd	r24, Y+41	; 0x29
    1b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <main+0x348>
    1b4c:	89 e1       	ldi	r24, 0x19	; 25
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 a3       	std	Y+32, r25	; 0x20
    1b52:	8f 8f       	std	Y+31, r24	; 0x1f
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <main+0x336>
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <main+0x32a>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <main+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <main+0x372>
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d

				} else {
					_delay_ms(500);
				}
				LCD_clearScreen();
    1b9c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
				LCD_displayString("Door is closed");
    1ba0:	89 ee       	ldi	r24, 0xE9	; 233
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	aa ef       	ldi	r26, 0xFA	; 250
    1bae:	b3 e4       	ldi	r27, 0x43	; 67
    1bb0:	89 8f       	std	Y+25, r24	; 0x19
    1bb2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a e7       	ldi	r20, 0x7A	; 122
    1bc6:	53 e4       	ldi	r21, 0x43	; 67
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8d 8b       	std	Y+21, r24	; 0x15
    1bd2:	9e 8b       	std	Y+22, r25	; 0x16
    1bd4:	af 8b       	std	Y+23, r26	; 0x17
    1bd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bda:	7e 89       	ldd	r23, Y+22	; 0x16
    1bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bde:	98 8d       	ldd	r25, Y+24	; 0x18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <main+0x3d8>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 8b       	std	Y+20, r25	; 0x14
    1bf6:	8b 8b       	std	Y+19, r24	; 0x13
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <main+0x456>
	else if (__tmp > 65535)
    1bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <main+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	69 8d       	ldd	r22, Y+25	; 0x19
    1c14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <main+0x438>
    1c3c:	89 e1       	ldi	r24, 0x19	; 25
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9a 8b       	std	Y+18, r25	; 0x12
    1c42:	89 8b       	std	Y+17, r24	; 0x11
    1c44:	89 89       	ldd	r24, Y+17	; 0x11
    1c46:	9a 89       	ldd	r25, Y+18	; 0x12
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <main+0x426>
    1c4c:	9a 8b       	std	Y+18, r25	; 0x12
    1c4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8b 89       	ldd	r24, Y+19	; 0x13
    1c52:	9c 89       	ldd	r25, Y+20	; 0x14
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <main+0x41a>
    1c62:	4a ce       	rjmp	.-876    	; 0x18f8 <main+0xd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6d 89       	ldd	r22, Y+21	; 0x15
    1c66:	7e 89       	ldd	r23, Y+22	; 0x16
    1c68:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	98 8b       	std	Y+16, r25	; 0x10
    1c7e:	8f 87       	std	Y+15, r24	; 0x0f
    1c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c82:	98 89       	ldd	r25, Y+16	; 0x10
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <main+0x462>
    1c88:	98 8b       	std	Y+16, r25	; 0x10
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	35 ce       	rjmp	.-918    	; 0x18f8 <main+0xd6>
				_delay_ms(500);
			}
		}
		// if the user want to change password
		else if (option_key == '-') {
    1c8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c90:	8d 32       	cpi	r24, 0x2D	; 45
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <main+0x474>
    1c94:	57 c0       	rjmp	.+174    	; 0x1d44 <main+0x522>
			old_pass(key);
    1c96:	ce 01       	movw	r24, r28
    1c98:	8e 5b       	subi	r24, 0xBE	; 190
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <old_pass>
//			// Send the password to Control ECU to compare it with pass in EEPROM
//			UART_sendString(key);
//			_delay_ms(10);

			// Send to C_ECU that the user want to change password
			UART_sendByte(option_key);
    1ca0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ca2:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <UART_sendByte>

			option_key = UART_recieveByte();
    1ca6:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
    1caa:	8b af       	std	Y+59, r24	; 0x3b

			// if the password is right get the new password
			if (option_key == READY) {
    1cac:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <main+0x492>
    1cb2:	22 ce       	rjmp	.-956    	; 0x18f8 <main+0xd6>

				// check if enter the password entered by user twice are right
				while (1) {
						pass_first_time(key);
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	8e 5b       	subi	r24, 0xBE	; 190
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <pass_first_time>
						pass_first_time(check);
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	cc 96       	adiw	r24, 0x3c	; 60
    1cc2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <pass_first_time>
						for (i = 0; i < 5; i++) {
    1cc6:	19 ae       	std	Y+57, r1	; 0x39
    1cc8:	18 c0       	rjmp	.+48     	; 0x1cfa <main+0x4d8>
							if (key[i] == check[i]) {
    1cca:	89 ad       	ldd	r24, Y+57	; 0x39
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	8e 5b       	subi	r24, 0xBE	; 190
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e2 0f       	add	r30, r18
    1cda:	f3 1f       	adc	r31, r19
    1cdc:	40 81       	ld	r20, Z
    1cde:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	cc 96       	adiw	r24, 0x3c	; 60
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e2 0f       	add	r30, r18
    1cec:	f3 1f       	adc	r31, r19
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 17       	cp	r20, r24
    1cf2:	31 f4       	brne	.+12     	; 0x1d00 <main+0x4de>

				// check if enter the password entered by user twice are right
				while (1) {
						pass_first_time(key);
						pass_first_time(check);
						for (i = 0; i < 5; i++) {
    1cf4:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	89 af       	std	Y+57, r24	; 0x39
    1cfa:	89 ad       	ldd	r24, Y+57	; 0x39
    1cfc:	85 30       	cpi	r24, 0x05	; 5
    1cfe:	28 f3       	brcs	.-54     	; 0x1cca <main+0x4a8>

							} else {
								break;
							}
						}
					if (i == 5) {
    1d00:	89 ad       	ldd	r24, Y+57	; 0x39
    1d02:	85 30       	cpi	r24, 0x05	; 5
    1d04:	e9 f4       	brne	.+58     	; 0x1d40 <main+0x51e>
						key[5] = '#'; // termination Character to UART message
    1d06:	fe 01       	movw	r30, r28
    1d08:	ee 5b       	subi	r30, 0xBE	; 190
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	83 e2       	ldi	r24, 0x23	; 35
    1d0e:	85 83       	std	Z+5, r24	; 0x05
						key[6] = '\0';
    1d10:	fe 01       	movw	r30, r28
    1d12:	ee 5b       	subi	r30, 0xBE	; 190
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	16 82       	std	Z+6, r1	; 0x06

						// send to ecu to save it at eeprom
						UART_sendString(key);
    1d18:	ce 01       	movw	r24, r28
    1d1a:	8e 5b       	subi	r24, 0xBE	; 190
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <UART_sendString>
						} else {
							i = 0;
						}
					}

				key[5] = '#'; // termination Character to UART message
    1d22:	fe 01       	movw	r30, r28
    1d24:	ee 5b       	subi	r30, 0xBE	; 190
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	83 e2       	ldi	r24, 0x23	; 35
    1d2a:	85 83       	std	Z+5, r24	; 0x05
				key[6] = '\0';
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ee 5b       	subi	r30, 0xBE	; 190
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	16 82       	std	Z+6, r1	; 0x06

				// send to ecu to save it at eeprom
				UART_sendString(key);
    1d34:	ce 01       	movw	r24, r28
    1d36:	8e 5b       	subi	r24, 0xBE	; 190
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <UART_sendString>
    1d3e:	dc cd       	rjmp	.-1096   	; 0x18f8 <main+0xd6>

						// send to ecu to save it at eeprom
						UART_sendString(key);
						break;
						} else {
							i = 0;
    1d40:	19 ae       	std	Y+57, r1	; 0x39
    1d42:	b8 cf       	rjmp	.-144    	; 0x1cb4 <main+0x492>
				UART_sendString(key);
			}
		}
		/*if the Password is not right Print in LCD Wrong*/
		else {
			LCD_clearScreen();
    1d44:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
			LCD_displayString("Wrong Pass!");
    1d48:	8e eb       	ldi	r24, 0xBE	; 190
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
			wrong_input++;
    1d50:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d52:	8f 5f       	subi	r24, 0xFF	; 255
    1d54:	8a af       	std	Y+58, r24	; 0x3a

			// if the user enter the password wrong three times Stop the System for one minute
			if (wrong_input >= 3) {
    1d56:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d58:	83 30       	cpi	r24, 0x03	; 3
    1d5a:	10 f1       	brcs	.+68     	; 0x1da0 <main+0x57e>
				LCD_clearScreen();
    1d5c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
				LCD_displayString("Multi Wrong!!");
    1d60:	8a ec       	ldi	r24, 0xCA	; 202
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
				LCD_moveCursor(1, 0);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
				LCD_displayString("Wait 1 minute...");
    1d70:	88 ed       	ldi	r24, 0xD8	; 216
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>

				Timer0_init(&timer_config);
    1d78:	ce 01       	movw	r24, r28
    1d7a:	87 5b       	subi	r24, 0xB7	; 183
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <Timer0_init>
				while (Tick < NUMBER_OF_OVERFLOWS_PER_4_SECONDS);
    1d82:	80 91 40 01 	lds	r24, 0x0140
    1d86:	90 91 41 01 	lds	r25, 0x0141
    1d8a:	8c 33       	cpi	r24, 0x3C	; 60
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	c8 f3       	brcs	.-14     	; 0x1d82 <main+0x560>
				Timer0_Deinit();
    1d90:	0e 94 09 16 	call	0x2c12	; 0x2c12 <Timer0_Deinit>
				Tick = 0;
    1d94:	10 92 41 01 	sts	0x0141, r1
    1d98:	10 92 40 01 	sts	0x0140, r1
				wrong_input = 0;
    1d9c:	1a ae       	std	Y+58, r1	; 0x3a
    1d9e:	ac cd       	rjmp	.-1192   	; 0x18f8 <main+0xd6>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	aa ef       	ldi	r26, 0xFA	; 250
    1da6:	b3 e4       	ldi	r27, 0x43	; 67
    1da8:	8b 87       	std	Y+11, r24	; 0x0b
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	ad 87       	std	Y+13, r26	; 0x0d
    1dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	53 e4       	ldi	r21, 0x43	; 67
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    1dcc:	a9 87       	std	Y+9, r26	; 0x09
    1dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <main+0x5d0>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <main+0x64e>
	else if (__tmp > 65535)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <main+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <main+0x630>
    1e34:	89 e1       	ldi	r24, 0x19	; 25
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <main+0x61e>
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <main+0x612>
    1e5a:	4e cd       	rjmp	.-1380   	; 0x18f8 <main+0xd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <main+0x65a>
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	39 cd       	rjmp	.-1422   	; 0x18f8 <main+0xd6>

00001e86 <Timer0_Tick>:
			}
		}
	}
}

void Timer0_Tick(void){
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    1e8e:	80 91 40 01 	lds	r24, 0x0140
    1e92:	90 91 41 01 	lds	r25, 0x0141
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	90 93 41 01 	sts	0x0141, r25
    1e9c:	80 93 40 01 	sts	0x0140, r24
}
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <main_options>:
//		return 1;
//	}
//}

void main_options(void)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1eae:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
	LCD_displayString("+ :Open Door");
    1eb2:	88 ef       	ldi	r24, 0xF8	; 248
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	LCD_moveCursor(1,0);
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
	LCD_displayString("- :Change Pass");
    1ec2:	85 e0       	ldi	r24, 0x05	; 5
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <door_unlock>:

void door_unlock(void)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1ed8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
	LCD_displayString("Door is ");
    1edc:	84 e1       	ldi	r24, 0x14	; 20
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
	LCD_moveCursor(1, 0);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
	LCD_displayString("unlocking");
    1eec:	8d e1       	ldi	r24, 0x1D	; 29
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <door_lock>:

void door_lock(void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1f02:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_clearScreen>
	LCD_displayString("Door is Locking");
    1f06:	87 e2       	ldi	r24, 0x27	; 39
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <KEYPAD_getPressedKey+0x6>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f22:	1b 82       	std	Y+3, r1	; 0x03
    1f24:	43 c0       	rjmp	.+134    	; 0x1fac <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	98 2f       	mov	r25, r24
    1f32:	9c 5f       	subi	r25, 0xFC	; 252
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	69 2f       	mov	r22, r25
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 01       	movw	r18, r24
    1f46:	2c 5f       	subi	r18, 0xFC	; 252
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <KEYPAD_getPressedKey+0x40>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	2a 95       	dec	r18
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <KEYPAD_getPressedKey+0x3c>
    1f58:	80 95       	com	r24
    1f5a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	69 81       	ldd	r22, Y+1	; 0x01
    1f60:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f64:	1a 82       	std	Y+2, r1	; 0x02
    1f66:	1c c0       	rjmp	.+56     	; 0x1fa0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if (GPIO_readPin(KEYPAD_PORT_ID, row + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f6c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1f70:	88 23       	and	r24, r24
    1f72:	99 f4       	brne	.+38     	; 0x1f9a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	98 2f       	mov	r25, r24
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	89 0f       	add	r24, r25
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <KEYPAD_4x4_adjustKeyNumber>
                    #endif
				}
			}
		}
	}	
}
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	08 f3       	brcs	.-62     	; 0x1f68 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	84 30       	cpi	r24, 0x04	; 4
    1fb0:	08 f4       	brcc	.+2      	; 0x1fb4 <KEYPAD_getPressedKey+0xa0>
    1fb2:	b9 cf       	rjmp	.-142    	; 0x1f26 <KEYPAD_getPressedKey+0x12>
    1fb4:	b6 cf       	rjmp	.-148    	; 0x1f22 <KEYPAD_getPressedKey+0xe>

00001fb6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1fc4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	3c 83       	std	Y+4, r19	; 0x04
    1fce:	2b 83       	std	Y+3, r18	; 0x03
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <KEYPAD_4x4_adjustKeyNumber+0x26>
    1fda:	70 c0       	rjmp	.+224    	; 0x20bc <KEYPAD_4x4_adjustKeyNumber+0x106>
    1fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fde:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe0:	29 30       	cpi	r18, 0x09	; 9
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	5c f5       	brge	.+86     	; 0x203c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	91 05       	cpc	r25, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ff0:	59 c0       	rjmp	.+178    	; 0x20a4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	25 30       	cpi	r18, 0x05	; 5
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	9c f4       	brge	.+38     	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	91 05       	cpc	r25, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2006:	48 c0       	rjmp	.+144    	; 0x2098 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2008:	2b 81       	ldd	r18, Y+3	; 0x03
    200a:	3c 81       	ldd	r19, Y+4	; 0x04
    200c:	23 30       	cpi	r18, 0x03	; 3
    200e:	31 05       	cpc	r19, r1
    2010:	0c f0       	brlt	.+2      	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2012:	45 c0       	rjmp	.+138    	; 0x209e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    201e:	39 c0       	rjmp	.+114    	; 0x2092 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2020:	67 c0       	rjmp	.+206    	; 0x20f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	26 30       	cpi	r18, 0x06	; 6
    2028:	31 05       	cpc	r19, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <KEYPAD_4x4_adjustKeyNumber+0x78>
    202c:	41 c0       	rjmp	.+130    	; 0x20b0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	87 30       	cpi	r24, 0x07	; 7
    2034:	91 05       	cpc	r25, r1
    2036:	0c f0       	brlt	.+2      	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2038:	3e c0       	rjmp	.+124    	; 0x20b6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    203a:	37 c0       	rjmp	.+110    	; 0x20aa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	2c 30       	cpi	r18, 0x0C	; 12
    2042:	31 05       	cpc	r19, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2046:	46 c0       	rjmp	.+140    	; 0x20d4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	8d 30       	cpi	r24, 0x0D	; 13
    204e:	91 05       	cpc	r25, r1
    2050:	5c f4       	brge	.+22     	; 0x2068 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	2a 30       	cpi	r18, 0x0A	; 10
    2058:	31 05       	cpc	r19, r1
    205a:	b1 f1       	breq	.+108    	; 0x20c8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	8b 30       	cpi	r24, 0x0B	; 11
    2062:	91 05       	cpc	r25, r1
    2064:	a4 f5       	brge	.+104    	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x118>
    2066:	2d c0       	rjmp	.+90     	; 0x20c2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2068:	2b 81       	ldd	r18, Y+3	; 0x03
    206a:	3c 81       	ldd	r19, Y+4	; 0x04
    206c:	2e 30       	cpi	r18, 0x0E	; 14
    206e:	31 05       	cpc	r19, r1
    2070:	b9 f1       	breq	.+110    	; 0x20e0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	8e 30       	cpi	r24, 0x0E	; 14
    2078:	91 05       	cpc	r25, r1
    207a:	7c f1       	brlt	.+94     	; 0x20da <KEYPAD_4x4_adjustKeyNumber+0x124>
    207c:	2b 81       	ldd	r18, Y+3	; 0x03
    207e:	3c 81       	ldd	r19, Y+4	; 0x04
    2080:	2f 30       	cpi	r18, 0x0F	; 15
    2082:	31 05       	cpc	r19, r1
    2084:	79 f1       	breq	.+94     	; 0x20e4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	80 31       	cpi	r24, 0x10	; 16
    208c:	91 05       	cpc	r25, r1
    208e:	69 f1       	breq	.+90     	; 0x20ea <KEYPAD_4x4_adjustKeyNumber+0x134>
    2090:	2f c0       	rjmp	.+94     	; 0x20f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2092:	87 e0       	ldi	r24, 0x07	; 7
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	2e c0       	rjmp	.+92     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	2b c0       	rjmp	.+86     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    209e:	89 e0       	ldi	r24, 0x09	; 9
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	28 c0       	rjmp	.+80     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    20a4:	85 e2       	ldi	r24, 0x25	; 37
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	25 c0       	rjmp	.+74     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    20aa:	84 e0       	ldi	r24, 0x04	; 4
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	22 c0       	rjmp	.+68     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    20b0:	85 e0       	ldi	r24, 0x05	; 5
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	1f c0       	rjmp	.+62     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    20b6:	86 e0       	ldi	r24, 0x06	; 6
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	1c c0       	rjmp	.+56     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    20bc:	8a e2       	ldi	r24, 0x2A	; 42
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	19 c0       	rjmp	.+50     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	16 c0       	rjmp	.+44     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	13 c0       	rjmp	.+38     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	10 c0       	rjmp	.+32     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20d4:	8d e2       	ldi	r24, 0x2D	; 45
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	0d c0       	rjmp	.+26     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20da:	8d e0       	ldi	r24, 0x0D	; 13
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	0a c0       	rjmp	.+20     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    20e0:	19 82       	std	Y+1, r1	; 0x01
    20e2:	08 c0       	rjmp	.+16     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    20e4:	8d e3       	ldi	r24, 0x3D	; 61
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	05 c0       	rjmp	.+10     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    20ea:	8b e2       	ldi	r24, 0x2B	; 43
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	63 e0       	ldi	r22, 0x03	; 3
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2120:	83 e0       	ldi	r24, 0x03	; 3
    2122:	64 e0       	ldi	r22, 0x04	; 4
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	6f ef       	ldi	r22, 0xFF	; 255
    212e:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2132:	88 e3       	ldi	r24, 0x38	; 56
    2134:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2138:	8c e0       	ldi	r24, 0x0C	; 12
    213a:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_sendCommand>
}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	e9 97       	sbiw	r28, 0x39	; 57
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	62 e0       	ldi	r22, 0x02	; 2
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	63 e0       	ldi	r22, 0x03	; 3
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e8       	ldi	r26, 0x80	; 128
    217a:	bf e3       	ldi	r27, 0x3F	; 63
    217c:	8d ab       	std	Y+53, r24	; 0x35
    217e:	9e ab       	std	Y+54, r25	; 0x36
    2180:	af ab       	std	Y+55, r26	; 0x37
    2182:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6d a9       	ldd	r22, Y+53	; 0x35
    2186:	7e a9       	ldd	r23, Y+54	; 0x36
    2188:	8f a9       	ldd	r24, Y+55	; 0x37
    218a:	98 ad       	ldd	r25, Y+56	; 0x38
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a e7       	ldi	r20, 0x7A	; 122
    2192:	53 e4       	ldi	r21, 0x43	; 67
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	89 ab       	std	Y+49, r24	; 0x31
    219e:	9a ab       	std	Y+50, r25	; 0x32
    21a0:	ab ab       	std	Y+51, r26	; 0x33
    21a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_sendCommand+0x7c>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	98 ab       	std	Y+48, r25	; 0x30
    21c2:	8f a7       	std	Y+47, r24	; 0x2f
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    21c6:	69 a9       	ldd	r22, Y+49	; 0x31
    21c8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ca:	8b a9       	ldd	r24, Y+51	; 0x33
    21cc:	9c a9       	ldd	r25, Y+52	; 0x34
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6d a9       	ldd	r22, Y+53	; 0x35
    21e0:	7e a9       	ldd	r23, Y+54	; 0x36
    21e2:	8f a9       	ldd	r24, Y+55	; 0x37
    21e4:	98 ad       	ldd	r25, Y+56	; 0x38
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_sendCommand+0xdc>
    2208:	89 e1       	ldi	r24, 0x19	; 25
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	8d a7       	std	Y+45, r24	; 0x2d
    2210:	8d a5       	ldd	r24, Y+45	; 0x2d
    2212:	9e a5       	ldd	r25, Y+46	; 0x2e
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_sendCommand+0xca>
    2218:	9e a7       	std	Y+46, r25	; 0x2e
    221a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	98 ab       	std	Y+48, r25	; 0x30
    2224:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_sendCommand+0xbe>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	69 a9       	ldd	r22, Y+49	; 0x31
    2232:	7a a9       	ldd	r23, Y+50	; 0x32
    2234:	8b a9       	ldd	r24, Y+51	; 0x33
    2236:	9c a9       	ldd	r25, Y+52	; 0x34
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	98 ab       	std	Y+48, r25	; 0x30
    2242:	8f a7       	std	Y+47, r24	; 0x2f
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	8b a7       	std	Y+43, r24	; 0x2b
    224c:	8b a5       	ldd	r24, Y+43	; 0x2b
    224e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_sendCommand+0x106>
    2254:	9c a7       	std	Y+44, r25	; 0x2c
    2256:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	64 e0       	ldi	r22, 0x04	; 4
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 e8       	ldi	r26, 0x80	; 128
    2268:	bf e3       	ldi	r27, 0x3F	; 63
    226a:	8f a3       	std	Y+39, r24	; 0x27
    226c:	98 a7       	std	Y+40, r25	; 0x28
    226e:	a9 a7       	std	Y+41, r26	; 0x29
    2270:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	6f a1       	ldd	r22, Y+39	; 0x27
    2274:	78 a5       	ldd	r23, Y+40	; 0x28
    2276:	89 a5       	ldd	r24, Y+41	; 0x29
    2278:	9a a5       	ldd	r25, Y+42	; 0x2a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a e7       	ldi	r20, 0x7A	; 122
    2280:	53 e4       	ldi	r21, 0x43	; 67
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8b a3       	std	Y+35, r24	; 0x23
    228c:	9c a3       	std	Y+36, r25	; 0x24
    228e:	ad a3       	std	Y+37, r26	; 0x25
    2290:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2292:	6b a1       	ldd	r22, Y+35	; 0x23
    2294:	7c a1       	ldd	r23, Y+36	; 0x24
    2296:	8d a1       	ldd	r24, Y+37	; 0x25
    2298:	9e a1       	ldd	r25, Y+38	; 0x26
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <LCD_sendCommand+0x16a>
		__ticks = 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9a a3       	std	Y+34, r25	; 0x22
    22b0:	89 a3       	std	Y+33, r24	; 0x21
    22b2:	3f c0       	rjmp	.+126    	; 0x2332 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    22b4:	6b a1       	ldd	r22, Y+35	; 0x23
    22b6:	7c a1       	ldd	r23, Y+36	; 0x24
    22b8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ba:	9e a1       	ldd	r25, Y+38	; 0x26
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	4c f5       	brge	.+82     	; 0x231e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22cc:	6f a1       	ldd	r22, Y+39	; 0x27
    22ce:	78 a5       	ldd	r23, Y+40	; 0x28
    22d0:	89 a5       	ldd	r24, Y+41	; 0x29
    22d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9a a3       	std	Y+34, r25	; 0x22
    22f2:	89 a3       	std	Y+33, r24	; 0x21
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <LCD_sendCommand+0x1ca>
    22f6:	89 e1       	ldi	r24, 0x19	; 25
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	98 a3       	std	Y+32, r25	; 0x20
    22fc:	8f 8f       	std	Y+31, r24	; 0x1f
    22fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2300:	98 a1       	ldd	r25, Y+32	; 0x20
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_sendCommand+0x1b8>
    2306:	98 a3       	std	Y+32, r25	; 0x20
    2308:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	89 a1       	ldd	r24, Y+33	; 0x21
    230c:	9a a1       	ldd	r25, Y+34	; 0x22
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9a a3       	std	Y+34, r25	; 0x22
    2312:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	69 f7       	brne	.-38     	; 0x22f6 <LCD_sendCommand+0x1ac>
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9a a3       	std	Y+34, r25	; 0x22
    2330:	89 a3       	std	Y+33, r24	; 0x21
    2332:	89 a1       	ldd	r24, Y+33	; 0x21
    2334:	9a a1       	ldd	r25, Y+34	; 0x22
    2336:	9e 8f       	std	Y+30, r25	; 0x1e
    2338:	8d 8f       	std	Y+29, r24	; 0x1d
    233a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_sendCommand+0x1f4>
    2342:	9e 8f       	std	Y+30, r25	; 0x1e
    2344:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	69 ad       	ldd	r22, Y+57	; 0x39
    234a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e8       	ldi	r26, 0x80	; 128
    2354:	bf e3       	ldi	r27, 0x3F	; 63
    2356:	89 8f       	std	Y+25, r24	; 0x19
    2358:	9a 8f       	std	Y+26, r25	; 0x1a
    235a:	ab 8f       	std	Y+27, r26	; 0x1b
    235c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	69 8d       	ldd	r22, Y+25	; 0x19
    2360:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a e7       	ldi	r20, 0x7A	; 122
    236c:	53 e4       	ldi	r21, 0x43	; 67
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8d 8b       	std	Y+21, r24	; 0x15
    2378:	9e 8b       	std	Y+22, r25	; 0x16
    237a:	af 8b       	std	Y+23, r26	; 0x17
    237c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    237e:	6d 89       	ldd	r22, Y+21	; 0x15
    2380:	7e 89       	ldd	r23, Y+22	; 0x16
    2382:	8f 89       	ldd	r24, Y+23	; 0x17
    2384:	98 8d       	ldd	r25, Y+24	; 0x18
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <LCD_sendCommand+0x256>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9c 8b       	std	Y+20, r25	; 0x14
    239c:	8b 8b       	std	Y+19, r24	; 0x13
    239e:	3f c0       	rjmp	.+126    	; 0x241e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    23a0:	6d 89       	ldd	r22, Y+21	; 0x15
    23a2:	7e 89       	ldd	r23, Y+22	; 0x16
    23a4:	8f 89       	ldd	r24, Y+23	; 0x17
    23a6:	98 8d       	ldd	r25, Y+24	; 0x18
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <LCD_sendCommand+0x2b6>
    23e2:	89 e1       	ldi	r24, 0x19	; 25
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9a 8b       	std	Y+18, r25	; 0x12
    23e8:	89 8b       	std	Y+17, r24	; 0x11
    23ea:	89 89       	ldd	r24, Y+17	; 0x11
    23ec:	9a 89       	ldd	r25, Y+18	; 0x12
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_sendCommand+0x2a4>
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8b 89       	ldd	r24, Y+19	; 0x13
    23f8:	9c 89       	ldd	r25, Y+20	; 0x14
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8b 89       	ldd	r24, Y+19	; 0x13
    2402:	9c 89       	ldd	r25, Y+20	; 0x14
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <LCD_sendCommand+0x298>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6d 89       	ldd	r22, Y+21	; 0x15
    240c:	7e 89       	ldd	r23, Y+22	; 0x16
    240e:	8f 89       	ldd	r24, Y+23	; 0x17
    2410:	98 8d       	ldd	r25, Y+24	; 0x18
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	8b 89       	ldd	r24, Y+19	; 0x13
    2420:	9c 89       	ldd	r25, Y+20	; 0x14
    2422:	98 8b       	std	Y+16, r25	; 0x10
    2424:	8f 87       	std	Y+15, r24	; 0x0f
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	98 89       	ldd	r25, Y+16	; 0x10
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_sendCommand+0x2e0>
    242e:	98 8b       	std	Y+16, r25	; 0x10
    2430:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2432:	83 e0       	ldi	r24, 0x03	; 3
    2434:	64 e0       	ldi	r22, 0x04	; 4
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	8b 87       	std	Y+11, r24	; 0x0b
    2446:	9c 87       	std	Y+12, r25	; 0x0c
    2448:	ad 87       	std	Y+13, r26	; 0x0d
    244a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	6b 85       	ldd	r22, Y+11	; 0x0b
    244e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2450:	8d 85       	ldd	r24, Y+13	; 0x0d
    2452:	9e 85       	ldd	r25, Y+14	; 0x0e
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a e7       	ldi	r20, 0x7A	; 122
    245a:	53 e4       	ldi	r21, 0x43	; 67
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8f 83       	std	Y+7, r24	; 0x07
    2466:	98 87       	std	Y+8, r25	; 0x08
    2468:	a9 87       	std	Y+9, r26	; 0x09
    246a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246c:	6f 81       	ldd	r22, Y+7	; 0x07
    246e:	78 85       	ldd	r23, Y+8	; 0x08
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	2c f4       	brge	.+10     	; 0x248e <LCD_sendCommand+0x344>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	3f c0       	rjmp	.+126    	; 0x250c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    248e:	6f 81       	ldd	r22, Y+7	; 0x07
    2490:	78 85       	ldd	r23, Y+8	; 0x08
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	4c f5       	brge	.+82     	; 0x24f8 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <LCD_sendCommand+0x3a4>
    24d0:	89 e1       	ldi	r24, 0x19	; 25
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_sendCommand+0x392>
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <LCD_sendCommand+0x386>
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_sendCommand+0x3ce>
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2520:	e9 96       	adiw	r28, 0x39	; 57
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	e9 97       	sbiw	r28, 0x39	; 57
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	62 e0       	ldi	r22, 0x02	; 2
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2552:	83 e0       	ldi	r24, 0x03	; 3
    2554:	63 e0       	ldi	r22, 0x03	; 3
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 e8       	ldi	r26, 0x80	; 128
    2562:	bf e3       	ldi	r27, 0x3F	; 63
    2564:	8d ab       	std	Y+53, r24	; 0x35
    2566:	9e ab       	std	Y+54, r25	; 0x36
    2568:	af ab       	std	Y+55, r26	; 0x37
    256a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	6d a9       	ldd	r22, Y+53	; 0x35
    256e:	7e a9       	ldd	r23, Y+54	; 0x36
    2570:	8f a9       	ldd	r24, Y+55	; 0x37
    2572:	98 ad       	ldd	r25, Y+56	; 0x38
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a e7       	ldi	r20, 0x7A	; 122
    257a:	53 e4       	ldi	r21, 0x43	; 67
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	89 ab       	std	Y+49, r24	; 0x31
    2586:	9a ab       	std	Y+50, r25	; 0x32
    2588:	ab ab       	std	Y+51, r26	; 0x33
    258a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    258c:	69 a9       	ldd	r22, Y+49	; 0x31
    258e:	7a a9       	ldd	r23, Y+50	; 0x32
    2590:	8b a9       	ldd	r24, Y+51	; 0x33
    2592:	9c a9       	ldd	r25, Y+52	; 0x34
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <LCD_displayCharacter+0x7c>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	98 ab       	std	Y+48, r25	; 0x30
    25aa:	8f a7       	std	Y+47, r24	; 0x2f
    25ac:	3f c0       	rjmp	.+126    	; 0x262c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    25ae:	69 a9       	ldd	r22, Y+49	; 0x31
    25b0:	7a a9       	ldd	r23, Y+50	; 0x32
    25b2:	8b a9       	ldd	r24, Y+51	; 0x33
    25b4:	9c a9       	ldd	r25, Y+52	; 0x34
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	4c f5       	brge	.+82     	; 0x2618 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	6d a9       	ldd	r22, Y+53	; 0x35
    25c8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ca:	8f a9       	ldd	r24, Y+55	; 0x37
    25cc:	98 ad       	ldd	r25, Y+56	; 0x38
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	98 ab       	std	Y+48, r25	; 0x30
    25ec:	8f a7       	std	Y+47, r24	; 0x2f
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <LCD_displayCharacter+0xdc>
    25f0:	89 e1       	ldi	r24, 0x19	; 25
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9e a7       	std	Y+46, r25	; 0x2e
    25f6:	8d a7       	std	Y+45, r24	; 0x2d
    25f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    25fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_displayCharacter+0xca>
    2600:	9e a7       	std	Y+46, r25	; 0x2e
    2602:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8f a5       	ldd	r24, Y+47	; 0x2f
    2606:	98 a9       	ldd	r25, Y+48	; 0x30
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	98 ab       	std	Y+48, r25	; 0x30
    260c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2610:	98 a9       	ldd	r25, Y+48	; 0x30
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <LCD_displayCharacter+0xbe>
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	69 a9       	ldd	r22, Y+49	; 0x31
    261a:	7a a9       	ldd	r23, Y+50	; 0x32
    261c:	8b a9       	ldd	r24, Y+51	; 0x33
    261e:	9c a9       	ldd	r25, Y+52	; 0x34
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	98 ab       	std	Y+48, r25	; 0x30
    262a:	8f a7       	std	Y+47, r24	; 0x2f
    262c:	8f a5       	ldd	r24, Y+47	; 0x2f
    262e:	98 a9       	ldd	r25, Y+48	; 0x30
    2630:	9c a7       	std	Y+44, r25	; 0x2c
    2632:	8b a7       	std	Y+43, r24	; 0x2b
    2634:	8b a5       	ldd	r24, Y+43	; 0x2b
    2636:	9c a5       	ldd	r25, Y+44	; 0x2c
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_displayCharacter+0x106>
    263c:	9c a7       	std	Y+44, r25	; 0x2c
    263e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2640:	83 e0       	ldi	r24, 0x03	; 3
    2642:	64 e0       	ldi	r22, 0x04	; 4
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	a0 e8       	ldi	r26, 0x80	; 128
    2650:	bf e3       	ldi	r27, 0x3F	; 63
    2652:	8f a3       	std	Y+39, r24	; 0x27
    2654:	98 a7       	std	Y+40, r25	; 0x28
    2656:	a9 a7       	std	Y+41, r26	; 0x29
    2658:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265a:	6f a1       	ldd	r22, Y+39	; 0x27
    265c:	78 a5       	ldd	r23, Y+40	; 0x28
    265e:	89 a5       	ldd	r24, Y+41	; 0x29
    2660:	9a a5       	ldd	r25, Y+42	; 0x2a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a e7       	ldi	r20, 0x7A	; 122
    2668:	53 e4       	ldi	r21, 0x43	; 67
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8b a3       	std	Y+35, r24	; 0x23
    2674:	9c a3       	std	Y+36, r25	; 0x24
    2676:	ad a3       	std	Y+37, r26	; 0x25
    2678:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    267a:	6b a1       	ldd	r22, Y+35	; 0x23
    267c:	7c a1       	ldd	r23, Y+36	; 0x24
    267e:	8d a1       	ldd	r24, Y+37	; 0x25
    2680:	9e a1       	ldd	r25, Y+38	; 0x26
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268e:	88 23       	and	r24, r24
    2690:	2c f4       	brge	.+10     	; 0x269c <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9a a3       	std	Y+34, r25	; 0x22
    2698:	89 a3       	std	Y+33, r24	; 0x21
    269a:	3f c0       	rjmp	.+126    	; 0x271a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    269c:	6b a1       	ldd	r22, Y+35	; 0x23
    269e:	7c a1       	ldd	r23, Y+36	; 0x24
    26a0:	8d a1       	ldd	r24, Y+37	; 0x25
    26a2:	9e a1       	ldd	r25, Y+38	; 0x26
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	3f ef       	ldi	r19, 0xFF	; 255
    26a8:	4f e7       	ldi	r20, 0x7F	; 127
    26aa:	57 e4       	ldi	r21, 0x47	; 71
    26ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b0:	18 16       	cp	r1, r24
    26b2:	4c f5       	brge	.+82     	; 0x2706 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b4:	6f a1       	ldd	r22, Y+39	; 0x27
    26b6:	78 a5       	ldd	r23, Y+40	; 0x28
    26b8:	89 a5       	ldd	r24, Y+41	; 0x29
    26ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9a a3       	std	Y+34, r25	; 0x22
    26da:	89 a3       	std	Y+33, r24	; 0x21
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <LCD_displayCharacter+0x1ca>
    26de:	89 e1       	ldi	r24, 0x19	; 25
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	98 a3       	std	Y+32, r25	; 0x20
    26e4:	8f 8f       	std	Y+31, r24	; 0x1f
    26e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26e8:	98 a1       	ldd	r25, Y+32	; 0x20
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_displayCharacter+0x1b8>
    26ee:	98 a3       	std	Y+32, r25	; 0x20
    26f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	89 a1       	ldd	r24, Y+33	; 0x21
    26f4:	9a a1       	ldd	r25, Y+34	; 0x22
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9a a3       	std	Y+34, r25	; 0x22
    26fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fc:	89 a1       	ldd	r24, Y+33	; 0x21
    26fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	69 f7       	brne	.-38     	; 0x26de <LCD_displayCharacter+0x1ac>
    2704:	14 c0       	rjmp	.+40     	; 0x272e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	6b a1       	ldd	r22, Y+35	; 0x23
    2708:	7c a1       	ldd	r23, Y+36	; 0x24
    270a:	8d a1       	ldd	r24, Y+37	; 0x25
    270c:	9e a1       	ldd	r25, Y+38	; 0x26
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9a a3       	std	Y+34, r25	; 0x22
    2718:	89 a3       	std	Y+33, r24	; 0x21
    271a:	89 a1       	ldd	r24, Y+33	; 0x21
    271c:	9a a1       	ldd	r25, Y+34	; 0x22
    271e:	9e 8f       	std	Y+30, r25	; 0x1e
    2720:	8d 8f       	std	Y+29, r24	; 0x1d
    2722:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2724:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_displayCharacter+0x1f4>
    272a:	9e 8f       	std	Y+30, r25	; 0x1e
    272c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	69 ad       	ldd	r22, Y+57	; 0x39
    2732:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e8       	ldi	r26, 0x80	; 128
    273c:	bf e3       	ldi	r27, 0x3F	; 63
    273e:	89 8f       	std	Y+25, r24	; 0x19
    2740:	9a 8f       	std	Y+26, r25	; 0x1a
    2742:	ab 8f       	std	Y+27, r26	; 0x1b
    2744:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	69 8d       	ldd	r22, Y+25	; 0x19
    2748:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e7       	ldi	r20, 0x7A	; 122
    2754:	53 e4       	ldi	r21, 0x43	; 67
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8d 8b       	std	Y+21, r24	; 0x15
    2760:	9e 8b       	std	Y+22, r25	; 0x16
    2762:	af 8b       	std	Y+23, r26	; 0x17
    2764:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2766:	6d 89       	ldd	r22, Y+21	; 0x15
    2768:	7e 89       	ldd	r23, Y+22	; 0x16
    276a:	8f 89       	ldd	r24, Y+23	; 0x17
    276c:	98 8d       	ldd	r25, Y+24	; 0x18
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <LCD_displayCharacter+0x256>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c 8b       	std	Y+20, r25	; 0x14
    2784:	8b 8b       	std	Y+19, r24	; 0x13
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2788:	6d 89       	ldd	r22, Y+21	; 0x15
    278a:	7e 89       	ldd	r23, Y+22	; 0x16
    278c:	8f 89       	ldd	r24, Y+23	; 0x17
    278e:	98 8d       	ldd	r25, Y+24	; 0x18
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	69 8d       	ldd	r22, Y+25	; 0x19
    27a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <LCD_displayCharacter+0x2b6>
    27ca:	89 e1       	ldi	r24, 0x19	; 25
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9a 8b       	std	Y+18, r25	; 0x12
    27d0:	89 8b       	std	Y+17, r24	; 0x11
    27d2:	89 89       	ldd	r24, Y+17	; 0x11
    27d4:	9a 89       	ldd	r25, Y+18	; 0x12
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_displayCharacter+0x2a4>
    27da:	9a 8b       	std	Y+18, r25	; 0x12
    27dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9c 8b       	std	Y+20, r25	; 0x14
    27e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ea:	9c 89       	ldd	r25, Y+20	; 0x14
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <LCD_displayCharacter+0x298>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
    2806:	8b 89       	ldd	r24, Y+19	; 0x13
    2808:	9c 89       	ldd	r25, Y+20	; 0x14
    280a:	98 8b       	std	Y+16, r25	; 0x10
    280c:	8f 87       	std	Y+15, r24	; 0x0f
    280e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2810:	98 89       	ldd	r25, Y+16	; 0x10
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <LCD_displayCharacter+0x2e0>
    2816:	98 8b       	std	Y+16, r25	; 0x10
    2818:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    281a:	83 e0       	ldi	r24, 0x03	; 3
    281c:	64 e0       	ldi	r22, 0x04	; 4
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e8       	ldi	r26, 0x80	; 128
    282a:	bf e3       	ldi	r27, 0x3F	; 63
    282c:	8b 87       	std	Y+11, r24	; 0x0b
    282e:	9c 87       	std	Y+12, r25	; 0x0c
    2830:	ad 87       	std	Y+13, r26	; 0x0d
    2832:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2834:	6b 85       	ldd	r22, Y+11	; 0x0b
    2836:	7c 85       	ldd	r23, Y+12	; 0x0c
    2838:	8d 85       	ldd	r24, Y+13	; 0x0d
    283a:	9e 85       	ldd	r25, Y+14	; 0x0e
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4a e7       	ldi	r20, 0x7A	; 122
    2842:	53 e4       	ldi	r21, 0x43	; 67
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	8f 83       	std	Y+7, r24	; 0x07
    284e:	98 87       	std	Y+8, r25	; 0x08
    2850:	a9 87       	std	Y+9, r26	; 0x09
    2852:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2854:	6f 81       	ldd	r22, Y+7	; 0x07
    2856:	78 85       	ldd	r23, Y+8	; 0x08
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	2c f4       	brge	.+10     	; 0x2876 <LCD_displayCharacter+0x344>
		__ticks = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	3f c0       	rjmp	.+126    	; 0x28f4 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2876:	6f 81       	ldd	r22, Y+7	; 0x07
    2878:	78 85       	ldd	r23, Y+8	; 0x08
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	3f ef       	ldi	r19, 0xFF	; 255
    2882:	4f e7       	ldi	r20, 0x7F	; 127
    2884:	57 e4       	ldi	r21, 0x47	; 71
    2886:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288a:	18 16       	cp	r1, r24
    288c:	4c f5       	brge	.+82     	; 0x28e0 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2890:	7c 85       	ldd	r23, Y+12	; 0x0c
    2892:	8d 85       	ldd	r24, Y+13	; 0x0d
    2894:	9e 85       	ldd	r25, Y+14	; 0x0e
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <LCD_displayCharacter+0x3a4>
    28b8:	89 e1       	ldi	r24, 0x19	; 25
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    28be:	8b 83       	std	Y+3, r24	; 0x03
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_displayCharacter+0x392>
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	9e 81       	ldd	r25, Y+6	; 0x06
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <LCD_displayCharacter+0x386>
    28de:	14 c0       	rjmp	.+40     	; 0x2908 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_displayCharacter+0x3ce>
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2908:	e9 96       	adiw	r28, 0x39	; 57
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	00 d0       	rcall	.+0      	; 0x2920 <LCD_displayString+0x6>
    2920:	0f 92       	push	r0
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	9b 83       	std	Y+3, r25	; 0x03
    2928:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    292a:	19 82       	std	Y+1, r1	; 0x01
    292c:	0e c0       	rjmp	.+28     	; 0x294a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	9b 81       	ldd	r25, Y+3	; 0x03
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	80 81       	ld	r24, Z
    2940:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_displayCharacter>
		i++;
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	8f 5f       	subi	r24, 0xFF	; 255
    2948:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	9b 81       	ldd	r25, Y+3	; 0x03
    2954:	fc 01       	movw	r30, r24
    2956:	e2 0f       	add	r30, r18
    2958:	f3 1f       	adc	r31, r19
    295a:	80 81       	ld	r24, Z
    295c:	88 23       	and	r24, r24
    295e:	39 f7       	brne	.-50     	; 0x292e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <LCD_moveCursor+0x6>
    2972:	00 d0       	rcall	.+0      	; 0x2974 <LCD_moveCursor+0x8>
    2974:	0f 92       	push	r0
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	8a 83       	std	Y+2, r24	; 0x02
    297c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	28 2f       	mov	r18, r24
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	3d 83       	std	Y+5, r19	; 0x05
    2986:	2c 83       	std	Y+4, r18	; 0x04
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	9d 81       	ldd	r25, Y+5	; 0x05
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	91 05       	cpc	r25, r1
    2990:	c1 f0       	breq	.+48     	; 0x29c2 <LCD_moveCursor+0x56>
    2992:	2c 81       	ldd	r18, Y+4	; 0x04
    2994:	3d 81       	ldd	r19, Y+5	; 0x05
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 05       	cpc	r19, r1
    299a:	2c f4       	brge	.+10     	; 0x29a6 <LCD_moveCursor+0x3a>
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	61 f0       	breq	.+24     	; 0x29bc <LCD_moveCursor+0x50>
    29a4:	19 c0       	rjmp	.+50     	; 0x29d8 <LCD_moveCursor+0x6c>
    29a6:	2c 81       	ldd	r18, Y+4	; 0x04
    29a8:	3d 81       	ldd	r19, Y+5	; 0x05
    29aa:	22 30       	cpi	r18, 0x02	; 2
    29ac:	31 05       	cpc	r19, r1
    29ae:	69 f0       	breq	.+26     	; 0x29ca <LCD_moveCursor+0x5e>
    29b0:	8c 81       	ldd	r24, Y+4	; 0x04
    29b2:	9d 81       	ldd	r25, Y+5	; 0x05
    29b4:	83 30       	cpi	r24, 0x03	; 3
    29b6:	91 05       	cpc	r25, r1
    29b8:	61 f0       	breq	.+24     	; 0x29d2 <LCD_moveCursor+0x66>
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	0b c0       	rjmp	.+22     	; 0x29d8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	80 5c       	subi	r24, 0xC0	; 192
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	07 c0       	rjmp	.+14     	; 0x29d8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	80 5f       	subi	r24, 0xF0	; 240
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	03 c0       	rjmp	.+6      	; 0x29d8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	80 5b       	subi	r24, 0xB0	; 176
    29d6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	80 68       	ori	r24, 0x80	; 128
    29dc:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_sendCommand>
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <LCD_displayStringRowColumn+0x6>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <LCD_displayStringRowColumn+0x8>
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	6a 83       	std	Y+2, r22	; 0x02
    2a00:	5c 83       	std	Y+4, r21	; 0x04
    2a02:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	6a 81       	ldd	r22, Y+2	; 0x02
    2a08:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	62 97       	sbiw	r28, 0x12	; 18
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	9a 8b       	std	Y+18, r25	; 0x12
    2a38:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a3a:	89 89       	ldd	r24, Y+17	; 0x11
    2a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3e:	9e 01       	movw	r18, r28
    2a40:	2f 5f       	subi	r18, 0xFF	; 255
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	b9 01       	movw	r22, r18
    2a46:	4a e0       	ldi	r20, 0x0A	; 10
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a4e:	ce 01       	movw	r24, r28
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_displayString>
}
    2a56:	62 96       	adiw	r28, 0x12	; 18
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	0e 94 a5 10 	call	0x214a	; 0x214a <LCD_sendCommand>
}
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2a7c:	1f 92       	push	r1
    2a7e:	0f 92       	push	r0
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	0f 92       	push	r0
    2a84:	11 24       	eor	r1, r1
    2a86:	2f 93       	push	r18
    2a88:	3f 93       	push	r19
    2a8a:	4f 93       	push	r20
    2a8c:	5f 93       	push	r21
    2a8e:	6f 93       	push	r22
    2a90:	7f 93       	push	r23
    2a92:	8f 93       	push	r24
    2a94:	9f 93       	push	r25
    2a96:	af 93       	push	r26
    2a98:	bf 93       	push	r27
    2a9a:	ef 93       	push	r30
    2a9c:	ff 93       	push	r31
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    2aa6:	80 91 42 01 	lds	r24, 0x0142
    2aaa:	90 91 43 01 	lds	r25, 0x0143
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	29 f0       	breq	.+10     	; 0x2abc <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    2ab2:	e0 91 42 01 	lds	r30, 0x0142
    2ab6:	f0 91 43 01 	lds	r31, 0x0143
    2aba:	09 95       	icall
	}
}
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	ff 91       	pop	r31
    2ac2:	ef 91       	pop	r30
    2ac4:	bf 91       	pop	r27
    2ac6:	af 91       	pop	r26
    2ac8:	9f 91       	pop	r25
    2aca:	8f 91       	pop	r24
    2acc:	7f 91       	pop	r23
    2ace:	6f 91       	pop	r22
    2ad0:	5f 91       	pop	r21
    2ad2:	4f 91       	pop	r20
    2ad4:	3f 91       	pop	r19
    2ad6:	2f 91       	pop	r18
    2ad8:	0f 90       	pop	r0
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	0f 90       	pop	r0
    2ade:	1f 90       	pop	r1
    2ae0:	18 95       	reti

00002ae2 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2ae2:	1f 92       	push	r1
    2ae4:	0f 92       	push	r0
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	0f 92       	push	r0
    2aea:	11 24       	eor	r1, r1
    2aec:	2f 93       	push	r18
    2aee:	3f 93       	push	r19
    2af0:	4f 93       	push	r20
    2af2:	5f 93       	push	r21
    2af4:	6f 93       	push	r22
    2af6:	7f 93       	push	r23
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	af 93       	push	r26
    2afe:	bf 93       	push	r27
    2b00:	ef 93       	push	r30
    2b02:	ff 93       	push	r31
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    2b0c:	80 91 42 01 	lds	r24, 0x0142
    2b10:	90 91 43 01 	lds	r25, 0x0143
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	29 f0       	breq	.+10     	; 0x2b22 <__vector_19+0x40>
	{
		(*g_callBackPtr)();
    2b18:	e0 91 42 01 	lds	r30, 0x0142
    2b1c:	f0 91 43 01 	lds	r31, 0x0143
    2b20:	09 95       	icall
	}
}
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	ff 91       	pop	r31
    2b28:	ef 91       	pop	r30
    2b2a:	bf 91       	pop	r27
    2b2c:	af 91       	pop	r26
    2b2e:	9f 91       	pop	r25
    2b30:	8f 91       	pop	r24
    2b32:	7f 91       	pop	r23
    2b34:	6f 91       	pop	r22
    2b36:	5f 91       	pop	r21
    2b38:	4f 91       	pop	r20
    2b3a:	3f 91       	pop	r19
    2b3c:	2f 91       	pop	r18
    2b3e:	0f 90       	pop	r0
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	0f 90       	pop	r0
    2b44:	1f 90       	pop	r1
    2b46:	18 95       	reti

00002b48 <Timer0_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_init(Timer0_ConfigType *ConfigPtr)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <Timer0_init+0x6>
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <Timer0_init+0x8>
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	9a 83       	std	Y+2, r25	; 0x02
    2b56:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigPtr->mode)
    2b58:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5c:	80 81       	ld	r24, Z
    2b5e:	28 2f       	mov	r18, r24
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	3c 83       	std	Y+4, r19	; 0x04
    2b64:	2b 83       	std	Y+3, r18	; 0x03
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	31 f0       	breq	.+12     	; 0x2b7a <Timer0_init+0x32>
    2b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b70:	3c 81       	ldd	r19, Y+4	; 0x04
    2b72:	21 30       	cpi	r18, 0x01	; 1
    2b74:	31 05       	cpc	r19, r1
    2b76:	b1 f0       	breq	.+44     	; 0x2ba4 <Timer0_init+0x5c>
    2b78:	33 c0       	rjmp	.+102    	; 0x2be0 <Timer0_init+0x98>
	{
	case normal:
		TCNT0 = ConfigPtr->initial_val; // Set Timer initial value to 195
    2b7a:	a2 e5       	ldi	r26, 0x52	; 82
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	81 81       	ldd	r24, Z+1	; 0x01
    2b84:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0 = 1
		 * 2. Normal Mode WGM01 = 0 & WGM00 = 0
		 * 3. Normal Mode COM00 = 0 & COM01 = 0
		 * 4. clock selected
		 */
		TCCR0 = (1 << FOC0) | (ConfigPtr->clock);
    2b86:	a3 e5       	ldi	r26, 0x53	; 83
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8e:	83 81       	ldd	r24, Z+3	; 0x03
    2b90:	80 68       	ori	r24, 0x80	; 128
    2b92:	8c 93       	st	X, r24

		TIMSK |= (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    2b94:	a9 e5       	ldi	r26, 0x59	; 89
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e9 e5       	ldi	r30, 0x59	; 89
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	81 60       	ori	r24, 0x01	; 1
    2ba0:	8c 93       	st	X, r24
    2ba2:	1e c0       	rjmp	.+60     	; 0x2be0 <Timer0_init+0x98>
		break;

	case compare:
		TCNT0 = ConfigPtr->initial_val; // Set Timer initial value to 0
    2ba4:	a2 e5       	ldi	r26, 0x52	; 82
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	81 81       	ldd	r24, Z+1	; 0x01
    2bae:	8c 93       	st	X, r24

		OCR0  = ConfigPtr->compare_val; // Set Compare Value
    2bb0:	ac e5       	ldi	r26, 0x5C	; 92
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0 = 1
		 * 2. CTC Mode WGM01 = 1 & WGM00 = 0
		 * 3. Clear OC0 on compare match so COM00 = 0 & COM01 = 1
		 * 4. clock selected
		 */
		TCCR0 |= (1 << FOC0) | (1 << WGM01) | (ConfigPtr->clock) | (1 << COM01);
    2bbc:	a3 e5       	ldi	r26, 0x53	; 83
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e3 e5       	ldi	r30, 0x53	; 83
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	90 81       	ld	r25, Z
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	83 81       	ldd	r24, Z+3	; 0x03
    2bcc:	89 2b       	or	r24, r25
    2bce:	88 6a       	ori	r24, 0xA8	; 168
    2bd0:	8c 93       	st	X, r24

		TIMSK |= (1 << OCIE0); // Enable Timer0 Compare Interrupt
    2bd2:	a9 e5       	ldi	r26, 0x59	; 89
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e9 e5       	ldi	r30, 0x59	; 89
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	82 60       	ori	r24, 0x02	; 2
    2bde:	8c 93       	st	X, r24
		break;
	}
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <Set_Callback>:

void Set_Callback(void (*a_ptr)(void))
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <Set_Callback+0x6>
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	90 93 43 01 	sts	0x0143, r25
    2c04:	80 93 42 01 	sts	0x0142, r24
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <Timer0_Deinit>:

void Timer0_Deinit(void)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2c1a:	e3 e5       	ldi	r30, 0x53	; 83
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	10 82       	st	Z, r1
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <UART_init+0x6>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <UART_init+0x8>
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <UART_init+0xa>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	6b 83       	std	Y+3, r22	; 0x03
    2c36:	7c 83       	std	Y+4, r23	; 0x04
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2c3c:	1a 82       	std	Y+2, r1	; 0x02
    2c3e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c40:	eb e2       	ldi	r30, 0x2B	; 43
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c48:	ea e2       	ldi	r30, 0x2A	; 42
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	88 e1       	ldi	r24, 0x18	; 24
    2c4e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2c50:	e0 e4       	ldi	r30, 0x40	; 64
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	86 e8       	ldi	r24, 0x86	; 134
    2c56:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	ad 81       	ldd	r26, Y+5	; 0x05
    2c5e:	be 81       	ldd	r27, Y+6	; 0x06
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	aa 1f       	adc	r26, r26
    2c66:	bb 1f       	adc	r27, r27
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	aa 1f       	adc	r26, r26
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	aa 1f       	adc	r26, r26
    2c76:	bb 1f       	adc	r27, r27
    2c78:	9c 01       	movw	r18, r24
    2c7a:	ad 01       	movw	r20, r26
    2c7c:	80 e4       	ldi	r24, 0x40	; 64
    2c7e:	92 e4       	ldi	r25, 0x42	; 66
    2c80:	af e0       	ldi	r26, 0x0F	; 15
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__udivmodsi4>
    2c8c:	da 01       	movw	r26, r20
    2c8e:	c9 01       	movw	r24, r18
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c96:	e0 e4       	ldi	r30, 0x40	; 64
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	89 2f       	mov	r24, r25
    2ca0:	99 27       	eor	r25, r25
    2ca2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ca4:	e9 e2       	ldi	r30, 0x29	; 41
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	80 83       	st	Z, r24
}
    2cac:	26 96       	adiw	r28, 0x06	; 6
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	0f 92       	push	r0
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2cca:	eb e2       	ldi	r30, 0x2B	; 43
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	80 72       	andi	r24, 0x20	; 32
    2cd6:	90 70       	andi	r25, 0x00	; 0
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	b9 f3       	breq	.-18     	; 0x2cca <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2cdc:	ec e2       	ldi	r30, 0x2C	; 44
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cf4:	eb e2       	ldi	r30, 0x2B	; 43
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 23       	and	r24, r24
    2cfc:	dc f7       	brge	.-10     	; 0x2cf4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2cfe:	ec e2       	ldi	r30, 0x2C	; 44
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
}
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <UART_sendString+0x6>
    2d10:	0f 92       	push	r0
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	9b 83       	std	Y+3, r25	; 0x03
    2d18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d1a:	19 82       	std	Y+1, r1	; 0x01
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	80 81       	ld	r24, Z
    2d30:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <UART_sendByte>
		i++;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 23       	and	r24, r24
    2d4e:	39 f7       	brne	.-50     	; 0x2d1e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <UART_receiveString+0xa>
    2d66:	0f 92       	push	r0
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9b 83       	std	Y+3, r25	; 0x03
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	8c 01       	movw	r16, r24
    2d7e:	02 0f       	add	r16, r18
    2d80:	13 1f       	adc	r17, r19
    2d82:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
    2d86:	f8 01       	movw	r30, r16
    2d88:	80 83       	st	Z, r24
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	8f 5f       	subi	r24, 0xFF	; 255
    2d90:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	28 2f       	mov	r18, r24
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	8c 01       	movw	r16, r24
    2d9e:	02 0f       	add	r16, r18
    2da0:	13 1f       	adc	r17, r19
    2da2:	0e 94 76 16 	call	0x2cec	; 0x2cec <UART_recieveByte>
    2da6:	f8 01       	movw	r30, r16
    2da8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	9b 81       	ldd	r25, Y+3	; 0x03
    2db4:	fc 01       	movw	r30, r24
    2db6:	e2 0f       	add	r30, r18
    2db8:	f3 1f       	adc	r31, r19
    2dba:	80 81       	ld	r24, Z
    2dbc:	83 32       	cpi	r24, 0x23	; 35
    2dbe:	31 f7       	brne	.-52     	; 0x2d8c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 0f       	add	r30, r18
    2dce:	f3 1f       	adc	r31, r19
    2dd0:	10 82       	st	Z, r1
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	08 95       	ret

00002de2 <__udivmodsi4>:
    2de2:	a1 e2       	ldi	r26, 0x21	; 33
    2de4:	1a 2e       	mov	r1, r26
    2de6:	aa 1b       	sub	r26, r26
    2de8:	bb 1b       	sub	r27, r27
    2dea:	fd 01       	movw	r30, r26
    2dec:	0d c0       	rjmp	.+26     	; 0x2e08 <__udivmodsi4_ep>

00002dee <__udivmodsi4_loop>:
    2dee:	aa 1f       	adc	r26, r26
    2df0:	bb 1f       	adc	r27, r27
    2df2:	ee 1f       	adc	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	a2 17       	cp	r26, r18
    2df8:	b3 07       	cpc	r27, r19
    2dfa:	e4 07       	cpc	r30, r20
    2dfc:	f5 07       	cpc	r31, r21
    2dfe:	20 f0       	brcs	.+8      	; 0x2e08 <__udivmodsi4_ep>
    2e00:	a2 1b       	sub	r26, r18
    2e02:	b3 0b       	sbc	r27, r19
    2e04:	e4 0b       	sbc	r30, r20
    2e06:	f5 0b       	sbc	r31, r21

00002e08 <__udivmodsi4_ep>:
    2e08:	66 1f       	adc	r22, r22
    2e0a:	77 1f       	adc	r23, r23
    2e0c:	88 1f       	adc	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	1a 94       	dec	r1
    2e12:	69 f7       	brne	.-38     	; 0x2dee <__udivmodsi4_loop>
    2e14:	60 95       	com	r22
    2e16:	70 95       	com	r23
    2e18:	80 95       	com	r24
    2e1a:	90 95       	com	r25
    2e1c:	9b 01       	movw	r18, r22
    2e1e:	ac 01       	movw	r20, r24
    2e20:	bd 01       	movw	r22, r26
    2e22:	cf 01       	movw	r24, r30
    2e24:	08 95       	ret

00002e26 <__prologue_saves__>:
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	ca 1b       	sub	r28, r26
    2e50:	db 0b       	sbc	r29, r27
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	09 94       	ijmp

00002e5e <__epilogue_restores__>:
    2e5e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e60:	39 88       	ldd	r3, Y+17	; 0x11
    2e62:	48 88       	ldd	r4, Y+16	; 0x10
    2e64:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e66:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e68:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e70:	b9 84       	ldd	r11, Y+9	; 0x09
    2e72:	c8 84       	ldd	r12, Y+8	; 0x08
    2e74:	df 80       	ldd	r13, Y+7	; 0x07
    2e76:	ee 80       	ldd	r14, Y+6	; 0x06
    2e78:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e7c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e80:	b9 81       	ldd	r27, Y+1	; 0x01
    2e82:	ce 0f       	add	r28, r30
    2e84:	d1 1d       	adc	r29, r1
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	ed 01       	movw	r28, r26
    2e92:	08 95       	ret

00002e94 <itoa>:
    2e94:	fb 01       	movw	r30, r22
    2e96:	9f 01       	movw	r18, r30
    2e98:	e8 94       	clt
    2e9a:	42 30       	cpi	r20, 0x02	; 2
    2e9c:	c4 f0       	brlt	.+48     	; 0x2ece <itoa+0x3a>
    2e9e:	45 32       	cpi	r20, 0x25	; 37
    2ea0:	b4 f4       	brge	.+44     	; 0x2ece <itoa+0x3a>
    2ea2:	4a 30       	cpi	r20, 0x0A	; 10
    2ea4:	29 f4       	brne	.+10     	; 0x2eb0 <itoa+0x1c>
    2ea6:	97 fb       	bst	r25, 7
    2ea8:	1e f4       	brtc	.+6      	; 0x2eb0 <itoa+0x1c>
    2eaa:	90 95       	com	r25
    2eac:	81 95       	neg	r24
    2eae:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb0:	64 2f       	mov	r22, r20
    2eb2:	77 27       	eor	r23, r23
    2eb4:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodhi4>
    2eb8:	80 5d       	subi	r24, 0xD0	; 208
    2eba:	8a 33       	cpi	r24, 0x3A	; 58
    2ebc:	0c f0       	brlt	.+2      	; 0x2ec0 <itoa+0x2c>
    2ebe:	89 5d       	subi	r24, 0xD9	; 217
    2ec0:	81 93       	st	Z+, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	a1 f7       	brne	.-24     	; 0x2eb0 <itoa+0x1c>
    2ec8:	16 f4       	brtc	.+4      	; 0x2ece <itoa+0x3a>
    2eca:	5d e2       	ldi	r21, 0x2D	; 45
    2ecc:	51 93       	st	Z+, r21
    2ece:	10 82       	st	Z, r1
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <strrev>

00002ed6 <strrev>:
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	fc 01       	movw	r30, r24
    2eda:	67 2f       	mov	r22, r23
    2edc:	71 91       	ld	r23, Z+
    2ede:	77 23       	and	r23, r23
    2ee0:	e1 f7       	brne	.-8      	; 0x2eda <strrev+0x4>
    2ee2:	32 97       	sbiw	r30, 0x02	; 2
    2ee4:	04 c0       	rjmp	.+8      	; 0x2eee <strrev+0x18>
    2ee6:	7c 91       	ld	r23, X
    2ee8:	6d 93       	st	X+, r22
    2eea:	70 83       	st	Z, r23
    2eec:	62 91       	ld	r22, -Z
    2eee:	ae 17       	cp	r26, r30
    2ef0:	bf 07       	cpc	r27, r31
    2ef2:	c8 f3       	brcs	.-14     	; 0x2ee6 <strrev+0x10>
    2ef4:	08 95       	ret

00002ef6 <__udivmodhi4>:
    2ef6:	aa 1b       	sub	r26, r26
    2ef8:	bb 1b       	sub	r27, r27
    2efa:	51 e1       	ldi	r21, 0x11	; 17
    2efc:	07 c0       	rjmp	.+14     	; 0x2f0c <__udivmodhi4_ep>

00002efe <__udivmodhi4_loop>:
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	a6 17       	cp	r26, r22
    2f04:	b7 07       	cpc	r27, r23
    2f06:	10 f0       	brcs	.+4      	; 0x2f0c <__udivmodhi4_ep>
    2f08:	a6 1b       	sub	r26, r22
    2f0a:	b7 0b       	sbc	r27, r23

00002f0c <__udivmodhi4_ep>:
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	5a 95       	dec	r21
    2f12:	a9 f7       	brne	.-22     	; 0x2efe <__udivmodhi4_loop>
    2f14:	80 95       	com	r24
    2f16:	90 95       	com	r25
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	08 95       	ret

00002f1e <_exit>:
    2f1e:	f8 94       	cli

00002f20 <__stop_program>:
    2f20:	ff cf       	rjmp	.-2      	; 0x2f20 <__stop_program>

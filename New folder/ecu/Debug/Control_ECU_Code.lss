
Control_ECU_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000208a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000208a  0000211e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00002126  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8b  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000052d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005413  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000080b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009251  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e8       	ldi	r30, 0x8A	; 138
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7d 06 	call	0xcfa	; 0xcfa <main>
      8a:	0c 94 43 10 	jmp	0x2086	; 0x2086 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

#include "buzzer.h"
#include "gpio.h"

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_ON>:

void Buzzer_ON(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_OFF>:

void Buzzer_OFF(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
#include "dc_motor.h"
#include <avr/io.h>
#include "gpio.h"

void DcMotor_Init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	64 e0       	ldi	r22, 0x04	; 4
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DcMotor_Rotate+0x8>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <DcMotor_Rotate+0xa>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	6a 83       	std	Y+2, r22	; 0x02
	switch (speed) {
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3e 83       	std	Y+6, r19	; 0x06
     be8:	2d 83       	std	Y+5, r18	; 0x05
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	9e 81       	ldd	r25, Y+6	; 0x06
     bee:	82 33       	cpi	r24, 0x32	; 50
     bf0:	91 05       	cpc	r25, r1
     bf2:	11 f1       	breq	.+68     	; 0xc38 <DcMotor_Rotate+0x6a>
     bf4:	2d 81       	ldd	r18, Y+5	; 0x05
     bf6:	3e 81       	ldd	r19, Y+6	; 0x06
     bf8:	23 33       	cpi	r18, 0x33	; 51
     bfa:	31 05       	cpc	r19, r1
     bfc:	54 f4       	brge	.+20     	; 0xc12 <DcMotor_Rotate+0x44>
     bfe:	8d 81       	ldd	r24, Y+5	; 0x05
     c00:	9e 81       	ldd	r25, Y+6	; 0x06
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	89 f0       	breq	.+34     	; 0xc28 <DcMotor_Rotate+0x5a>
     c06:	2d 81       	ldd	r18, Y+5	; 0x05
     c08:	3e 81       	ldd	r19, Y+6	; 0x06
     c0a:	29 31       	cpi	r18, 0x19	; 25
     c0c:	31 05       	cpc	r19, r1
     c0e:	81 f0       	breq	.+32     	; 0xc30 <DcMotor_Rotate+0x62>
     c10:	1e c0       	rjmp	.+60     	; 0xc4e <DcMotor_Rotate+0x80>
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	8b 34       	cpi	r24, 0x4B	; 75
     c18:	91 05       	cpc	r25, r1
     c1a:	91 f0       	breq	.+36     	; 0xc40 <DcMotor_Rotate+0x72>
     c1c:	2d 81       	ldd	r18, Y+5	; 0x05
     c1e:	3e 81       	ldd	r19, Y+6	; 0x06
     c20:	24 36       	cpi	r18, 0x64	; 100
     c22:	31 05       	cpc	r19, r1
     c24:	89 f0       	breq	.+34     	; 0xc48 <DcMotor_Rotate+0x7a>
     c26:	13 c0       	rjmp	.+38     	; 0xc4e <DcMotor_Rotate+0x80>
	case 0:
		PWM_Timer0_Start(0);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <PWM_Timer0_Start>
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <DcMotor_Rotate+0x80>
		break;
	case 25:
		PWM_Timer0_Start(64);
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	0e 94 63 06 	call	0xcc6	; 0xcc6 <PWM_Timer0_Start>
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <DcMotor_Rotate+0x80>
		break;
	case 50:
		PWM_Timer0_Start(128);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <PWM_Timer0_Start>
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <DcMotor_Rotate+0x80>
		break;
	case 75:
		PWM_Timer0_Start(192);
     c40:	80 ec       	ldi	r24, 0xC0	; 192
     c42:	0e 94 63 06 	call	0xcc6	; 0xcc6 <PWM_Timer0_Start>
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <DcMotor_Rotate+0x80>
		break;
	case 100:
		PWM_Timer0_Start(255);
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <PWM_Timer0_Start>
		break;
	}

	switch(state){
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3c 83       	std	Y+4, r19	; 0x04
     c56:	2b 83       	std	Y+3, r18	; 0x03
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	a1 f0       	breq	.+40     	; 0xc8a <DcMotor_Rotate+0xbc>
     c62:	2b 81       	ldd	r18, Y+3	; 0x03
     c64:	3c 81       	ldd	r19, Y+4	; 0x04
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	d1 f0       	breq	.+52     	; 0xca0 <DcMotor_Rotate+0xd2>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	01 f5       	brne	.+64     	; 0xcb4 <DcMotor_Rotate+0xe6>
	case Stop:
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	63 e0       	ldi	r22, 0x03	; 3
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	64 e0       	ldi	r22, 0x04	; 4
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
     c88:	15 c0       	rjmp	.+42     	; 0xcb4 <DcMotor_Rotate+0xe6>
		break;
	case Anti_CW:
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	63 e0       	ldi	r22, 0x03	; 3
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	64 e0       	ldi	r22, 0x04	; 4
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <DcMotor_Rotate+0xe6>
		break;
	case CW:
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	63 e0       	ldi	r22, 0x03	; 3
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	64 e0       	ldi	r22, 0x04	; 4
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
		break;
	}
}
     cb4:	26 96       	adiw	r28, 0x06	; 6
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
     cd2:	e2 e5       	ldi	r30, 0x52	; 82
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1

	OCR0 = duty_cycle; // Set Compare Value
     cd8:	ec e5       	ldi	r30, 0x5C	; 92
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	80 83       	st	Z, r24

	GPIO_setupPinDirection(MOTOR_EN_PORT_ID, MOTOR_EN_PIN_ID, PIN_OUTPUT);
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	63 e0       	ldi	r22, 0x03	; 3
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     cea:	e3 e5       	ldi	r30, 0x53	; 83
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	8a e6       	ldi	r24, 0x6A	; 106
     cf0:	80 83       	st	Z, r24
}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <main>:
 * Function to calculate numbers of Overflow
 * */
void Timer0_Tick(void);

int main(void)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	c7 54       	subi	r28, 0x47	; 71
     d04:	d0 40       	sbci	r29, 0x00	; 0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************
	 *                           Initialization Section                            *
	 *******************************************************************************/
	SREG |= (1 << 7); // Enable global interrupt
     d10:	af e5       	ldi	r26, 0x5F	; 95
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ef e5       	ldi	r30, 0x5F	; 95
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	8c 93       	st	X, r24

	uint8 key[7] = {0}, match_check = 0, counter = 0, option_key = 0, wrong_input = 0;
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	fe 01       	movw	r30, r28
     d22:	fc 96       	adiw	r30, 0x3c	; 60
     d24:	df 01       	movw	r26, r30
     d26:	98 2f       	mov	r25, r24
     d28:	1d 92       	st	X+, r1
     d2a:	9a 95       	dec	r25
     d2c:	e9 f7       	brne	.-6      	; 0xd28 <main+0x2e>
     d2e:	fe 01       	movw	r30, r28
     d30:	ed 5b       	subi	r30, 0xBD	; 189
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	10 82       	st	Z, r1
     d36:	1b ae       	std	Y+59, r1	; 0x3b
     d38:	1a ae       	std	Y+58, r1	; 0x3a
     d3a:	19 ae       	std	Y+57, r1	; 0x39

	// Set configuration for Timer0
	Timer0_ConfigType timer_config = {normal, 0, 0, clk_1024};
     d3c:	fe 01       	movw	r30, r28
     d3e:	ec 5b       	subi	r30, 0xBC	; 188
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	10 82       	st	Z, r1
     d44:	fe 01       	movw	r30, r28
     d46:	ec 5b       	subi	r30, 0xBC	; 188
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	11 82       	std	Z+1, r1	; 0x01
     d4c:	fe 01       	movw	r30, r28
     d4e:	ec 5b       	subi	r30, 0xBC	; 188
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	12 82       	std	Z+2, r1	; 0x02
     d54:	fe 01       	movw	r30, r28
     d56:	ec 5b       	subi	r30, 0xBC	; 188
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	85 e0       	ldi	r24, 0x05	; 5
     d5c:	83 83       	std	Z+3, r24	; 0x03

	// Set Timer0 Call back function
	Set_Callback(Timer0_Tick);
     d5e:	82 ec       	ldi	r24, 0xC2	; 194
     d60:	99 e0       	ldi	r25, 0x09	; 9
     d62:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <Set_Callback>

	// Initialize the UART driver with Baud-rate = 9600 bits/sec
	UART_init(9600);
     d66:	60 e8       	ldi	r22, 0x80	; 128
     d68:	75 e2       	ldi	r23, 0x25	; 37
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <UART_init>

	// Initialize I2C
	EEPROM_init();
     d72:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_init>

	// Receive the password for the first time
	UART_receiveString(key);
     d76:	ce 01       	movw	r24, r28
     d78:	cc 96       	adiw	r24, 0x3c	; 60
     d7a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <UART_receiveString>

	// Configure buzzer
	Buzzer_init();
     d7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	// Initialize DC motor
	DcMotor_Init();
     d82:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>

	/*Save the password in EEPROM*/
	for (counter = 0; counter < 6; counter++) {
     d86:	1b ae       	std	Y+59, r1	; 0x3b
     d88:	88 c0       	rjmp	.+272    	; 0xe9a <main+0x1a0>
		EEPROM_writeByte(0x0040 + counter, key[counter]);
     d8a:	8b ad       	ldd	r24, Y+59	; 0x3b
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	80 5c       	subi	r24, 0xC0	; 192
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	ac 01       	movw	r20, r24
     d96:	8b ad       	ldd	r24, Y+59	; 0x3b
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	ce 01       	movw	r24, r28
     d9e:	cc 96       	adiw	r24, 0x3c	; 60
     da0:	fc 01       	movw	r30, r24
     da2:	e2 0f       	add	r30, r18
     da4:	f3 1f       	adc	r31, r19
     da6:	20 81       	ld	r18, Z
     da8:	ca 01       	movw	r24, r20
     daa:	62 2f       	mov	r22, r18
     dac:	0e 94 db 09 	call	0x13b6	; 0x13b6 <EEPROM_writeByte>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a0 e2       	ldi	r26, 0x20	; 32
     db6:	b1 e4       	ldi	r27, 0x41	; 65
     db8:	8d ab       	std	Y+53, r24	; 0x35
     dba:	9e ab       	std	Y+54, r25	; 0x36
     dbc:	af ab       	std	Y+55, r26	; 0x37
     dbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc0:	6d a9       	ldd	r22, Y+53	; 0x35
     dc2:	7e a9       	ldd	r23, Y+54	; 0x36
     dc4:	8f a9       	ldd	r24, Y+55	; 0x37
     dc6:	98 ad       	ldd	r25, Y+56	; 0x38
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4a e7       	ldi	r20, 0x7A	; 122
     dce:	53 e4       	ldi	r21, 0x43	; 67
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	89 ab       	std	Y+49, r24	; 0x31
     dda:	9a ab       	std	Y+50, r25	; 0x32
     ddc:	ab ab       	std	Y+51, r26	; 0x33
     dde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     de0:	69 a9       	ldd	r22, Y+49	; 0x31
     de2:	7a a9       	ldd	r23, Y+50	; 0x32
     de4:	8b a9       	ldd	r24, Y+51	; 0x33
     de6:	9c a9       	ldd	r25, Y+52	; 0x34
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df4:	88 23       	and	r24, r24
     df6:	2c f4       	brge	.+10     	; 0xe02 <main+0x108>
		__ticks = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	98 ab       	std	Y+48, r25	; 0x30
     dfe:	8f a7       	std	Y+47, r24	; 0x2f
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <main+0x186>
	else if (__tmp > 65535)
     e02:	69 a9       	ldd	r22, Y+49	; 0x31
     e04:	7a a9       	ldd	r23, Y+50	; 0x32
     e06:	8b a9       	ldd	r24, Y+51	; 0x33
     e08:	9c a9       	ldd	r25, Y+52	; 0x34
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	4c f5       	brge	.+82     	; 0xe6c <main+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	6d a9       	ldd	r22, Y+53	; 0x35
     e1c:	7e a9       	ldd	r23, Y+54	; 0x36
     e1e:	8f a9       	ldd	r24, Y+55	; 0x37
     e20:	98 ad       	ldd	r25, Y+56	; 0x38
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	98 ab       	std	Y+48, r25	; 0x30
     e40:	8f a7       	std	Y+47, r24	; 0x2f
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <main+0x168>
     e44:	89 e1       	ldi	r24, 0x19	; 25
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9e a7       	std	Y+46, r25	; 0x2e
     e4a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     e4e:	9e a5       	ldd	r25, Y+46	; 0x2e
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <main+0x156>
     e54:	9e a7       	std	Y+46, r25	; 0x2e
     e56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5a:	98 a9       	ldd	r25, Y+48	; 0x30
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	98 ab       	std	Y+48, r25	; 0x30
     e60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8f a5       	ldd	r24, Y+47	; 0x2f
     e64:	98 a9       	ldd	r25, Y+48	; 0x30
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <main+0x14a>
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	69 a9       	ldd	r22, Y+49	; 0x31
     e6e:	7a a9       	ldd	r23, Y+50	; 0x32
     e70:	8b a9       	ldd	r24, Y+51	; 0x33
     e72:	9c a9       	ldd	r25, Y+52	; 0x34
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	98 ab       	std	Y+48, r25	; 0x30
     e7e:	8f a7       	std	Y+47, r24	; 0x2f
     e80:	8f a5       	ldd	r24, Y+47	; 0x2f
     e82:	98 a9       	ldd	r25, Y+48	; 0x30
     e84:	9c a7       	std	Y+44, r25	; 0x2c
     e86:	8b a7       	std	Y+43, r24	; 0x2b
     e88:	8b a5       	ldd	r24, Y+43	; 0x2b
     e8a:	9c a5       	ldd	r25, Y+44	; 0x2c
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <main+0x192>
     e90:	9c a7       	std	Y+44, r25	; 0x2c
     e92:	8b a7       	std	Y+43, r24	; 0x2b

	// Initialize DC motor
	DcMotor_Init();

	/*Save the password in EEPROM*/
	for (counter = 0; counter < 6; counter++) {
     e94:	8b ad       	ldd	r24, Y+59	; 0x3b
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	8b af       	std	Y+59, r24	; 0x3b
     e9a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e9c:	86 30       	cpi	r24, 0x06	; 6
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <main+0x1a8>
     ea0:	74 cf       	rjmp	.-280    	; 0xd8a <main+0x90>
	/*******************************************************************************
	 *                             Super Loop Section                              *
	 *******************************************************************************/
	while (1) {

		UART_receiveString(key);/* Take password from the user*/
     ea2:	ce 01       	movw	r24, r28
     ea4:	cc 96       	adiw	r24, 0x3c	; 60
     ea6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <UART_receiveString>

		option_key = UART_recieveByte(); /*receive what he want (open door,change password*/
     eaa:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <UART_recieveByte>
     eae:	8a af       	std	Y+58, r24	; 0x3a

		/*if he pressed '+' the door will be opened if the password is right*/
		if (option_key == '+') {
     eb0:	8a ad       	ldd	r24, Y+58	; 0x3a
     eb2:	8b 32       	cpi	r24, 0x2B	; 43
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <main+0x1be>
     eb6:	09 c1       	rjmp	.+530    	; 0x10ca <main+0x3d0>

			/*This loop to check the password is the same as in EEPROM*/
			for (counter = 0; counter < 6; counter++) {
     eb8:	1b ae       	std	Y+59, r1	; 0x3b
     eba:	1d c0       	rjmp	.+58     	; 0xef6 <main+0x1fc>
				EEPROM_readByte(0x0040 + counter, &match_check);
     ebc:	8b ad       	ldd	r24, Y+59	; 0x3b
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	80 5c       	subi	r24, 0xC0	; 192
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	9e 01       	movw	r18, r28
     ec8:	2d 5b       	subi	r18, 0xBD	; 189
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	b9 01       	movw	r22, r18
     ece:	0e 94 1c 0a 	call	0x1438	; 0x1438 <EEPROM_readByte>
				if (match_check == key[counter]) {
     ed2:	8b ad       	ldd	r24, Y+59	; 0x3b
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	cc 96       	adiw	r24, 0x3c	; 60
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	90 81       	ld	r25, Z
     ee4:	fe 01       	movw	r30, r28
     ee6:	ed 5b       	subi	r30, 0xBD	; 189
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	80 81       	ld	r24, Z
     eec:	98 17       	cp	r25, r24
     eee:	31 f4       	brne	.+12     	; 0xefc <main+0x202>

		/*if he pressed '+' the door will be opened if the password is right*/
		if (option_key == '+') {

			/*This loop to check the password is the same as in EEPROM*/
			for (counter = 0; counter < 6; counter++) {
     ef0:	8b ad       	ldd	r24, Y+59	; 0x3b
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	8b af       	std	Y+59, r24	; 0x3b
     ef6:	8b ad       	ldd	r24, Y+59	; 0x3b
     ef8:	86 30       	cpi	r24, 0x06	; 6
     efa:	00 f3       	brcs	.-64     	; 0xebc <main+0x1c2>
			/*************************************************************
			 * if the password is right the C_ECU Send READY for HMI_ECU
			 * and start to calculate the time for opening the door 15s
			 * and start to calculate the time for closing the door 15s
			 *************************************************************/
			if (counter == 6) {
     efc:	8b ad       	ldd	r24, Y+59	; 0x3b
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	09 f0       	breq	.+2      	; 0xf04 <main+0x20a>
     f02:	46 c0       	rjmp	.+140    	; 0xf90 <main+0x296>
				UART_sendByte(READY);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <UART_sendByte>


				GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	63 e0       	ldi	r22, 0x03	; 3
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	64 e0       	ldi	r22, 0x04	; 4
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				//DcMotor_Rotate(CW, 50);

				Timer0_init(&timer_config);
     f1e:	ce 01       	movw	r24, r28
     f20:	8c 5b       	subi	r24, 0xBC	; 188
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Timer0_init>
				while (Tick < NUMBER_OF_OVERFLOWS_PER_SECOND);
     f28:	80 91 68 00 	lds	r24, 0x0068
     f2c:	90 91 69 00 	lds	r25, 0x0069
     f30:	8f 30       	cpi	r24, 0x0F	; 15
     f32:	91 05       	cpc	r25, r1
     f34:	c8 f3       	brcs	.-14     	; 0xf28 <main+0x22e>
				Timer0_Deinit();
     f36:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Timer0_Deinit>
				Tick = 0;
     f3a:	10 92 69 00 	sts	0x0069, r1
     f3e:	10 92 68 00 	sts	0x0068, r1

				GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	63 e0       	ldi	r22, 0x03	; 3
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	64 e0       	ldi	r22, 0x04	; 4
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				//DcMotor_Rotate(Anti_CW, 50);

				Timer0_init(&timer_config);
     f56:	ce 01       	movw	r24, r28
     f58:	8c 5b       	subi	r24, 0xBC	; 188
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Timer0_init>
				while (Tick < NUMBER_OF_OVERFLOWS_PER_SECOND);
     f60:	80 91 68 00 	lds	r24, 0x0068
     f64:	90 91 69 00 	lds	r25, 0x0069
     f68:	8f 30       	cpi	r24, 0x0F	; 15
     f6a:	91 05       	cpc	r25, r1
     f6c:	c8 f3       	brcs	.-14     	; 0xf60 <main+0x266>
				Timer0_Deinit();
     f6e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Timer0_Deinit>
				Tick = 0;
     f72:	10 92 69 00 	sts	0x0069, r1
     f76:	10 92 68 00 	sts	0x0068, r1

				GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	63 e0       	ldi	r22, 0x03	; 3
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	64 e0       	ldi	r22, 0x04	; 4
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
     f8e:	89 cf       	rjmp	.-238    	; 0xea2 <main+0x1a8>
				//DcMotor_Rotate(Stop, 0);
			}
			/*if the password is not right stop the motor and increment the wrong*/
			else {
				UART_sendByte(NOTREADY); /*Send to HMI_ECU the password is wrong */
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <UART_sendByte>
				GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	64 e0       	ldi	r22, 0x04	; 4
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				//DcMotor_Rotate(Stop, 0); /* Stop Motor*/
				wrong_input++;
     faa:	89 ad       	ldd	r24, Y+57	; 0x39
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	89 af       	std	Y+57, r24	; 0x39

				/* if the user enter the password wrong three time Stop the system for 1 minute*/
				if (wrong_input == 3) {
     fb0:	89 ad       	ldd	r24, Y+57	; 0x39
     fb2:	83 30       	cpi	r24, 0x03	; 3
     fb4:	99 f4       	brne	.+38     	; 0xfdc <main+0x2e2>
					Timer0_init(&timer_config);
     fb6:	ce 01       	movw	r24, r28
     fb8:	8c 5b       	subi	r24, 0xBC	; 188
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Timer0_init>
					Buzzer_ON();
     fc0:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_ON>
					while (Tick != NUMBER_OF_OVERFLOWS_PER_4_SECONDS);
     fc4:	80 91 68 00 	lds	r24, 0x0068
     fc8:	90 91 69 00 	lds	r25, 0x0069
     fcc:	8c 33       	cpi	r24, 0x3C	; 60
     fce:	91 05       	cpc	r25, r1
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <main+0x2ca>
					Timer0_Deinit();
     fd2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Timer0_Deinit>

					Buzzer_OFF();
     fd6:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_OFF>
					wrong_input = 0;
     fda:	19 ae       	std	Y+57, r1	; 0x39
				}
				Buzzer_ON();
     fdc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_ON>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	aa ef       	ldi	r26, 0xFA	; 250
     fe6:	b3 e4       	ldi	r27, 0x43	; 67
     fe8:	8f a3       	std	Y+39, r24	; 0x27
     fea:	98 a7       	std	Y+40, r25	; 0x28
     fec:	a9 a7       	std	Y+41, r26	; 0x29
     fee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	6f a1       	ldd	r22, Y+39	; 0x27
     ff2:	78 a5       	ldd	r23, Y+40	; 0x28
     ff4:	89 a5       	ldd	r24, Y+41	; 0x29
     ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4a e7       	ldi	r20, 0x7A	; 122
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8b a3       	std	Y+35, r24	; 0x23
    100a:	9c a3       	std	Y+36, r25	; 0x24
    100c:	ad a3       	std	Y+37, r26	; 0x25
    100e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1010:	6b a1       	ldd	r22, Y+35	; 0x23
    1012:	7c a1       	ldd	r23, Y+36	; 0x24
    1014:	8d a1       	ldd	r24, Y+37	; 0x25
    1016:	9e a1       	ldd	r25, Y+38	; 0x26
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <main+0x338>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9a a3       	std	Y+34, r25	; 0x22
    102e:	89 a3       	std	Y+33, r24	; 0x21
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <main+0x3b6>
	else if (__tmp > 65535)
    1032:	6b a1       	ldd	r22, Y+35	; 0x23
    1034:	7c a1       	ldd	r23, Y+36	; 0x24
    1036:	8d a1       	ldd	r24, Y+37	; 0x25
    1038:	9e a1       	ldd	r25, Y+38	; 0x26
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1046:	18 16       	cp	r1, r24
    1048:	4c f5       	brge	.+82     	; 0x109c <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	6f a1       	ldd	r22, Y+39	; 0x27
    104c:	78 a5       	ldd	r23, Y+40	; 0x28
    104e:	89 a5       	ldd	r24, Y+41	; 0x29
    1050:	9a a5       	ldd	r25, Y+42	; 0x2a
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9a a3       	std	Y+34, r25	; 0x22
    1070:	89 a3       	std	Y+33, r24	; 0x21
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <main+0x398>
    1074:	89 e1       	ldi	r24, 0x19	; 25
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	98 a3       	std	Y+32, r25	; 0x20
    107a:	8f 8f       	std	Y+31, r24	; 0x1f
    107c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    107e:	98 a1       	ldd	r25, Y+32	; 0x20
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <main+0x386>
    1084:	98 a3       	std	Y+32, r25	; 0x20
    1086:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	89 a1       	ldd	r24, Y+33	; 0x21
    108a:	9a a1       	ldd	r25, Y+34	; 0x22
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9a a3       	std	Y+34, r25	; 0x22
    1090:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	89 a1       	ldd	r24, Y+33	; 0x21
    1094:	9a a1       	ldd	r25, Y+34	; 0x22
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	69 f7       	brne	.-38     	; 0x1074 <main+0x37a>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <main+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6b a1       	ldd	r22, Y+35	; 0x23
    109e:	7c a1       	ldd	r23, Y+36	; 0x24
    10a0:	8d a1       	ldd	r24, Y+37	; 0x25
    10a2:	9e a1       	ldd	r25, Y+38	; 0x26
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9a a3       	std	Y+34, r25	; 0x22
    10ae:	89 a3       	std	Y+33, r24	; 0x21
    10b0:	89 a1       	ldd	r24, Y+33	; 0x21
    10b2:	9a a1       	ldd	r25, Y+34	; 0x22
    10b4:	9e 8f       	std	Y+30, r25	; 0x1e
    10b6:	8d 8f       	std	Y+29, r24	; 0x1d
    10b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <main+0x3c2>
    10c0:	9e 8f       	std	Y+30, r25	; 0x1e
    10c2:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				Buzzer_OFF();
    10c4:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_OFF>
    10c8:	ec ce       	rjmp	.-552    	; 0xea2 <main+0x1a8>

			}

		}
		/* if he want to change the password */
		else if (option_key == '-') {
    10ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    10cc:	8d 32       	cpi	r24, 0x2D	; 45
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <main+0x3d8>
    10d0:	e8 ce       	rjmp	.-560    	; 0xea2 <main+0x1a8>
			for (counter = 0; counter < 6; counter++) {
    10d2:	1b ae       	std	Y+59, r1	; 0x3b
    10d4:	1d c0       	rjmp	.+58     	; 0x1110 <main+0x416>
				EEPROM_readByte(0x0040 + counter, &match_check);
    10d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	80 5c       	subi	r24, 0xC0	; 192
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	9e 01       	movw	r18, r28
    10e2:	2d 5b       	subi	r18, 0xBD	; 189
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	b9 01       	movw	r22, r18
    10e8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <EEPROM_readByte>
				if (match_check == key[counter]) {
    10ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	cc 96       	adiw	r24, 0x3c	; 60
    10f6:	fc 01       	movw	r30, r24
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	90 81       	ld	r25, Z
    10fe:	fe 01       	movw	r30, r28
    1100:	ed 5b       	subi	r30, 0xBD	; 189
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	98 17       	cp	r25, r24
    1108:	31 f4       	brne	.+12     	; 0x1116 <main+0x41c>
			}

		}
		/* if he want to change the password */
		else if (option_key == '-') {
			for (counter = 0; counter < 6; counter++) {
    110a:	8b ad       	ldd	r24, Y+59	; 0x3b
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	8b af       	std	Y+59, r24	; 0x3b
    1110:	8b ad       	ldd	r24, Y+59	; 0x3b
    1112:	86 30       	cpi	r24, 0x06	; 6
    1114:	00 f3       	brcs	.-64     	; 0x10d6 <main+0x3dc>

				} else {
					break;
				}
			}
			if (counter == 6) {
    1116:	8b ad       	ldd	r24, Y+59	; 0x3b
    1118:	86 30       	cpi	r24, 0x06	; 6
    111a:	09 f0       	breq	.+2      	; 0x111e <main+0x424>
    111c:	96 c0       	rjmp	.+300    	; 0x124a <main+0x550>
				UART_sendByte(READY);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <UART_sendByte>
				UART_receiveString(key);
    1124:	ce 01       	movw	r24, r28
    1126:	cc 96       	adiw	r24, 0x3c	; 60
    1128:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <UART_receiveString>
				for (counter = 0; counter < 6; counter++) {
    112c:	1b ae       	std	Y+59, r1	; 0x3b
    112e:	88 c0       	rjmp	.+272    	; 0x1240 <main+0x546>
					EEPROM_writeByte(0x0040 + counter, key[counter]);
    1130:	8b ad       	ldd	r24, Y+59	; 0x3b
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	80 5c       	subi	r24, 0xC0	; 192
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	ac 01       	movw	r20, r24
    113c:	8b ad       	ldd	r24, Y+59	; 0x3b
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	ce 01       	movw	r24, r28
    1144:	cc 96       	adiw	r24, 0x3c	; 60
    1146:	fc 01       	movw	r30, r24
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19
    114c:	20 81       	ld	r18, Z
    114e:	ca 01       	movw	r24, r20
    1150:	62 2f       	mov	r22, r18
    1152:	0e 94 db 09 	call	0x13b6	; 0x13b6 <EEPROM_writeByte>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a0 e2       	ldi	r26, 0x20	; 32
    115c:	b1 e4       	ldi	r27, 0x41	; 65
    115e:	89 8f       	std	Y+25, r24	; 0x19
    1160:	9a 8f       	std	Y+26, r25	; 0x1a
    1162:	ab 8f       	std	Y+27, r26	; 0x1b
    1164:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1166:	69 8d       	ldd	r22, Y+25	; 0x19
    1168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    116c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4a e7       	ldi	r20, 0x7A	; 122
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	8d 8b       	std	Y+21, r24	; 0x15
    1180:	9e 8b       	std	Y+22, r25	; 0x16
    1182:	af 8b       	std	Y+23, r26	; 0x17
    1184:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1186:	6d 89       	ldd	r22, Y+21	; 0x15
    1188:	7e 89       	ldd	r23, Y+22	; 0x16
    118a:	8f 89       	ldd	r24, Y+23	; 0x17
    118c:	98 8d       	ldd	r25, Y+24	; 0x18
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5f e3       	ldi	r21, 0x3F	; 63
    1196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119a:	88 23       	and	r24, r24
    119c:	2c f4       	brge	.+10     	; 0x11a8 <main+0x4ae>
		__ticks = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9c 8b       	std	Y+20, r25	; 0x14
    11a4:	8b 8b       	std	Y+19, r24	; 0x13
    11a6:	3f c0       	rjmp	.+126    	; 0x1226 <main+0x52c>
	else if (__tmp > 65535)
    11a8:	6d 89       	ldd	r22, Y+21	; 0x15
    11aa:	7e 89       	ldd	r23, Y+22	; 0x16
    11ac:	8f 89       	ldd	r24, Y+23	; 0x17
    11ae:	98 8d       	ldd	r25, Y+24	; 0x18
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	3f ef       	ldi	r19, 0xFF	; 255
    11b4:	4f e7       	ldi	r20, 0x7F	; 127
    11b6:	57 e4       	ldi	r21, 0x47	; 71
    11b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	4c f5       	brge	.+82     	; 0x1212 <main+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c0:	69 8d       	ldd	r22, Y+25	; 0x19
    11c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e2       	ldi	r20, 0x20	; 32
    11ce:	51 e4       	ldi	r21, 0x41	; 65
    11d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	9c 8b       	std	Y+20, r25	; 0x14
    11e6:	8b 8b       	std	Y+19, r24	; 0x13
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <main+0x50e>
    11ea:	89 e1       	ldi	r24, 0x19	; 25
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9a 8b       	std	Y+18, r25	; 0x12
    11f0:	89 8b       	std	Y+17, r24	; 0x11
    11f2:	89 89       	ldd	r24, Y+17	; 0x11
    11f4:	9a 89       	ldd	r25, Y+18	; 0x12
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <main+0x4fc>
    11fa:	9a 8b       	std	Y+18, r25	; 0x12
    11fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1200:	9c 89       	ldd	r25, Y+20	; 0x14
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9c 8b       	std	Y+20, r25	; 0x14
    1206:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1208:	8b 89       	ldd	r24, Y+19	; 0x13
    120a:	9c 89       	ldd	r25, Y+20	; 0x14
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	69 f7       	brne	.-38     	; 0x11ea <main+0x4f0>
    1210:	14 c0       	rjmp	.+40     	; 0x123a <main+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1212:	6d 89       	ldd	r22, Y+21	; 0x15
    1214:	7e 89       	ldd	r23, Y+22	; 0x16
    1216:	8f 89       	ldd	r24, Y+23	; 0x17
    1218:	98 8d       	ldd	r25, Y+24	; 0x18
    121a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	9c 8b       	std	Y+20, r25	; 0x14
    1224:	8b 8b       	std	Y+19, r24	; 0x13
    1226:	8b 89       	ldd	r24, Y+19	; 0x13
    1228:	9c 89       	ldd	r25, Y+20	; 0x14
    122a:	98 8b       	std	Y+16, r25	; 0x10
    122c:	8f 87       	std	Y+15, r24	; 0x0f
    122e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1230:	98 89       	ldd	r25, Y+16	; 0x10
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <main+0x538>
    1236:	98 8b       	std	Y+16, r25	; 0x10
    1238:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
			if (counter == 6) {
				UART_sendByte(READY);
				UART_receiveString(key);
				for (counter = 0; counter < 6; counter++) {
    123a:	8b ad       	ldd	r24, Y+59	; 0x3b
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	8b af       	std	Y+59, r24	; 0x3b
    1240:	8b ad       	ldd	r24, Y+59	; 0x3b
    1242:	86 30       	cpi	r24, 0x06	; 6
    1244:	08 f4       	brcc	.+2      	; 0x1248 <main+0x54e>
    1246:	74 cf       	rjmp	.-280    	; 0x1130 <main+0x436>
    1248:	2c ce       	rjmp	.-936    	; 0xea2 <main+0x1a8>
					EEPROM_writeByte(0x0040 + counter, key[counter]);
					_delay_ms(10);
				}

			} else {
				UART_sendByte(NOTREADY);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <UART_sendByte>

				GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	64 e0       	ldi	r22, 0x04	; 4
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_writePin>

				//DcMotor_Rotate(Stop, 0);
				wrong_input++;
    1264:	89 ad       	ldd	r24, Y+57	; 0x39
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	89 af       	std	Y+57, r24	; 0x39

				if (wrong_input == 3) {
    126a:	89 ad       	ldd	r24, Y+57	; 0x39
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	99 f4       	brne	.+38     	; 0x1296 <main+0x59c>
					Timer0_init(&timer_config);
    1270:	ce 01       	movw	r24, r28
    1272:	8c 5b       	subi	r24, 0xBC	; 188
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Timer0_init>
					Buzzer_ON();
    127a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_ON>
					while (Tick != NUMBER_OF_OVERFLOWS_PER_4_SECONDS);
    127e:	80 91 68 00 	lds	r24, 0x0068
    1282:	90 91 69 00 	lds	r25, 0x0069
    1286:	8c 33       	cpi	r24, 0x3C	; 60
    1288:	91 05       	cpc	r25, r1
    128a:	c9 f7       	brne	.-14     	; 0x127e <main+0x584>
					Timer0_Deinit();
    128c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Timer0_Deinit>
					Buzzer_OFF();
    1290:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_OFF>
					wrong_input = 0;
    1294:	19 ae       	std	Y+57, r1	; 0x39
				}
				Buzzer_ON();
    1296:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_ON>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	aa ef       	ldi	r26, 0xFA	; 250
    12a0:	b3 e4       	ldi	r27, 0x43	; 67
    12a2:	8b 87       	std	Y+11, r24	; 0x0b
    12a4:	9c 87       	std	Y+12, r25	; 0x0c
    12a6:	ad 87       	std	Y+13, r26	; 0x0d
    12a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	4a e7       	ldi	r20, 0x7A	; 122
    12b8:	53 e4       	ldi	r21, 0x43	; 67
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8f 83       	std	Y+7, r24	; 0x07
    12c4:	98 87       	std	Y+8, r25	; 0x08
    12c6:	a9 87       	std	Y+9, r26	; 0x09
    12c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12de:	88 23       	and	r24, r24
    12e0:	2c f4       	brge	.+10     	; 0x12ec <main+0x5f2>
		__ticks = 1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <main+0x670>
	else if (__tmp > 65535)
    12ec:	6f 81       	ldd	r22, Y+7	; 0x07
    12ee:	78 85       	ldd	r23, Y+8	; 0x08
    12f0:	89 85       	ldd	r24, Y+9	; 0x09
    12f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	3f ef       	ldi	r19, 0xFF	; 255
    12f8:	4f e7       	ldi	r20, 0x7F	; 127
    12fa:	57 e4       	ldi	r21, 0x47	; 71
    12fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1300:	18 16       	cp	r1, r24
    1302:	4c f5       	brge	.+82     	; 0x1356 <main+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1304:	6b 85       	ldd	r22, Y+11	; 0x0b
    1306:	7c 85       	ldd	r23, Y+12	; 0x0c
    1308:	8d 85       	ldd	r24, Y+13	; 0x0d
    130a:	9e 85       	ldd	r25, Y+14	; 0x0e
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e2       	ldi	r20, 0x20	; 32
    1312:	51 e4       	ldi	r21, 0x41	; 65
    1314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	0f c0       	rjmp	.+30     	; 0x134c <main+0x652>
    132e:	89 e1       	ldi	r24, 0x19	; 25
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <main+0x640>
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f7       	brne	.-38     	; 0x132e <main+0x634>
    1354:	14 c0       	rjmp	.+40     	; 0x137e <main+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <main+0x67c>
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				Buzzer_OFF();
    137e:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_OFF>
    1382:	8f cd       	rjmp	.-1250   	; 0xea2 <main+0x1a8>

00001384 <Timer0_Tick>:
		}

	}
}

void Timer0_Tick(void){
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    138c:	80 91 68 00 	lds	r24, 0x0068
    1390:	90 91 69 00 	lds	r25, 0x0069
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	90 93 69 00 	sts	0x0069, r25
    139a:	80 93 68 00 	sts	0x0068, r24
}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <EEPROM_init>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

void EEPROM_init(void)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	// Initialize the I2C(TWI) module inside the MC
	TWI_init();
    13ac:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <TWI_init>
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <EEPROM_writeByte+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <EEPROM_writeByte+0x8>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13c8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13cc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    13d0:	88 30       	cpi	r24, 0x08	; 8
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <EEPROM_writeByte+0x22>
        return ERROR;
    13d4:	1c 82       	std	Y+4, r1	; 0x04
    13d6:	28 c0       	rjmp	.+80     	; 0x1428 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	80 70       	andi	r24, 0x00	; 0
    13de:	97 70       	andi	r25, 0x07	; 7
    13e0:	88 0f       	add	r24, r24
    13e2:	89 2f       	mov	r24, r25
    13e4:	88 1f       	adc	r24, r24
    13e6:	99 0b       	sbc	r25, r25
    13e8:	91 95       	neg	r25
    13ea:	80 6a       	ori	r24, 0xA0	; 160
    13ec:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13f0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    13f4:	88 31       	cpi	r24, 0x18	; 24
    13f6:	11 f0       	breq	.+4      	; 0x13fc <EEPROM_writeByte+0x46>
        return ERROR; 
    13f8:	1c 82       	std	Y+4, r1	; 0x04
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1402:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    1406:	88 32       	cpi	r24, 0x28	; 40
    1408:	11 f0       	breq	.+4      	; 0x140e <EEPROM_writeByte+0x58>
        return ERROR;
    140a:	1c 82       	std	Y+4, r1	; 0x04
    140c:	0d c0       	rjmp	.+26     	; 0x1428 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1414:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    1418:	88 32       	cpi	r24, 0x28	; 40
    141a:	11 f0       	breq	.+4      	; 0x1420 <EEPROM_writeByte+0x6a>
        return ERROR;
    141c:	1c 82       	std	Y+4, r1	; 0x04
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1420:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <TWI_stop>
	
    return SUCCESS;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	8c 83       	std	Y+4, r24	; 0x04
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <EEPROM_readByte+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <EEPROM_readByte+0x8>
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	7c 83       	std	Y+4, r23	; 0x04
    144c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    144e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1452:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    1456:	88 30       	cpi	r24, 0x08	; 8
    1458:	11 f0       	breq	.+4      	; 0x145e <EEPROM_readByte+0x26>
        return ERROR;
    145a:	1d 82       	std	Y+5, r1	; 0x05
    145c:	44 c0       	rjmp	.+136    	; 0x14e6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	80 70       	andi	r24, 0x00	; 0
    1464:	97 70       	andi	r25, 0x07	; 7
    1466:	88 0f       	add	r24, r24
    1468:	89 2f       	mov	r24, r25
    146a:	88 1f       	adc	r24, r24
    146c:	99 0b       	sbc	r25, r25
    146e:	91 95       	neg	r25
    1470:	80 6a       	ori	r24, 0xA0	; 160
    1472:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1476:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    147a:	88 31       	cpi	r24, 0x18	; 24
    147c:	11 f0       	breq	.+4      	; 0x1482 <EEPROM_readByte+0x4a>
        return ERROR;
    147e:	1d 82       	std	Y+5, r1	; 0x05
    1480:	32 c0       	rjmp	.+100    	; 0x14e6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1488:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    148c:	88 32       	cpi	r24, 0x28	; 40
    148e:	11 f0       	breq	.+4      	; 0x1494 <EEPROM_readByte+0x5c>
        return ERROR;
    1490:	1d 82       	std	Y+5, r1	; 0x05
    1492:	29 c0       	rjmp	.+82     	; 0x14e6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1494:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1498:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    149c:	80 31       	cpi	r24, 0x10	; 16
    149e:	11 f0       	breq	.+4      	; 0x14a4 <EEPROM_readByte+0x6c>
        return ERROR;
    14a0:	1d 82       	std	Y+5, r1	; 0x05
    14a2:	21 c0       	rjmp	.+66     	; 0x14e6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	80 70       	andi	r24, 0x00	; 0
    14aa:	97 70       	andi	r25, 0x07	; 7
    14ac:	88 0f       	add	r24, r24
    14ae:	89 2f       	mov	r24, r25
    14b0:	88 1f       	adc	r24, r24
    14b2:	99 0b       	sbc	r25, r25
    14b4:	91 95       	neg	r25
    14b6:	81 6a       	ori	r24, 0xA1	; 161
    14b8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    14bc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    14c0:	80 34       	cpi	r24, 0x40	; 64
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <EEPROM_readByte+0x90>
        return ERROR;
    14c4:	1d 82       	std	Y+5, r1	; 0x05
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    14c8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <TWI_readByteWithNACK>
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    14d2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_getStatus>
    14d6:	88 35       	cpi	r24, 0x58	; 88
    14d8:	11 f0       	breq	.+4      	; 0x14de <EEPROM_readByte+0xa6>
        return ERROR;
    14da:	1d 82       	std	Y+5, r1	; 0x05
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    14de:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <TWI_stop>

    return SUCCESS;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <GPIO_setupPinDirection+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <GPIO_setupPinDirection+0x8>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	6a 83       	std	Y+2, r22	; 0x02
    150a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	08 f0       	brcs	.+2      	; 0x1514 <GPIO_setupPinDirection+0x1c>
    1512:	d5 c0       	rjmp	.+426    	; 0x16be <GPIO_setupPinDirection+0x1c6>
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	08 f0       	brcs	.+2      	; 0x151c <GPIO_setupPinDirection+0x24>
    151a:	d1 c0       	rjmp	.+418    	; 0x16be <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3d 83       	std	Y+5, r19	; 0x05
    1524:	2c 83       	std	Y+4, r18	; 0x04
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <GPIO_setupPinDirection+0x3a>
    1530:	43 c0       	rjmp	.+134    	; 0x15b8 <GPIO_setupPinDirection+0xc0>
    1532:	2c 81       	ldd	r18, Y+4	; 0x04
    1534:	3d 81       	ldd	r19, Y+5	; 0x05
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <GPIO_setupPinDirection+0x4e>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	71 f0       	breq	.+28     	; 0x1560 <GPIO_setupPinDirection+0x68>
    1544:	bc c0       	rjmp	.+376    	; 0x16be <GPIO_setupPinDirection+0x1c6>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <GPIO_setupPinDirection+0x5a>
    1550:	5f c0       	rjmp	.+190    	; 0x1610 <GPIO_setupPinDirection+0x118>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <GPIO_setupPinDirection+0x66>
    155c:	85 c0       	rjmp	.+266    	; 0x1668 <GPIO_setupPinDirection+0x170>
    155e:	af c0       	rjmp	.+350    	; 0x16be <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	a1 f4       	brne	.+40     	; 0x158e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1566:	aa e3       	ldi	r26, 0x3A	; 58
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ea e3       	ldi	r30, 0x3A	; 58
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_setupPinDirection+0x8c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_setupPinDirection+0x88>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	98 c0       	rjmp	.+304    	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    158e:	aa e3       	ldi	r26, 0x3A	; 58
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ea e3       	ldi	r30, 0x3A	; 58
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <GPIO_setupPinDirection+0xb4>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <GPIO_setupPinDirection+0xb0>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	83 c0       	rjmp	.+262    	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15be:	a7 e3       	ldi	r26, 0x37	; 55
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e7 e3       	ldi	r30, 0x37	; 55
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_setupPinDirection+0xe4>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_setupPinDirection+0xe0>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	6c c0       	rjmp	.+216    	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15e6:	a7 e3       	ldi	r26, 0x37	; 55
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e7 e3       	ldi	r30, 0x37	; 55
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <GPIO_setupPinDirection+0x10c>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <GPIO_setupPinDirection+0x108>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	57 c0       	rjmp	.+174    	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	a1 f4       	brne	.+40     	; 0x163e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1616:	a4 e3       	ldi	r26, 0x34	; 52
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e4 e3       	ldi	r30, 0x34	; 52
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <GPIO_setupPinDirection+0x13c>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <GPIO_setupPinDirection+0x138>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	40 c0       	rjmp	.+128    	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    163e:	a4 e3       	ldi	r26, 0x34	; 52
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e4 e3       	ldi	r30, 0x34	; 52
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <GPIO_setupPinDirection+0x164>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <GPIO_setupPinDirection+0x160>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	2b c0       	rjmp	.+86     	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	a1 f4       	brne	.+40     	; 0x1696 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    166e:	a1 e3       	ldi	r26, 0x31	; 49
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e1 e3       	ldi	r30, 0x31	; 49
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <GPIO_setupPinDirection+0x194>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <GPIO_setupPinDirection+0x190>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	14 c0       	rjmp	.+40     	; 0x16be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1696:	a1 e3       	ldi	r26, 0x31	; 49
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e3       	ldi	r30, 0x31	; 49
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_setupPinDirection+0x1bc>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_setupPinDirection+0x1b8>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_writePin+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <GPIO_writePin+0x8>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	6a 83       	std	Y+2, r22	; 0x02
    16e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <GPIO_writePin+0x1c>
    16e8:	d5 c0       	rjmp	.+426    	; 0x1894 <GPIO_writePin+0x1c6>
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <GPIO_writePin+0x24>
    16f0:	d1 c0       	rjmp	.+418    	; 0x1894 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3d 83       	std	Y+5, r19	; 0x05
    16fa:	2c 83       	std	Y+4, r18	; 0x04
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <GPIO_writePin+0x3a>
    1706:	43 c0       	rjmp	.+134    	; 0x178e <GPIO_writePin+0xc0>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <GPIO_writePin+0x4e>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	71 f0       	breq	.+28     	; 0x1736 <GPIO_writePin+0x68>
    171a:	bc c0       	rjmp	.+376    	; 0x1894 <GPIO_writePin+0x1c6>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <GPIO_writePin+0x5a>
    1726:	5f c0       	rjmp	.+190    	; 0x17e6 <GPIO_writePin+0x118>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <GPIO_writePin+0x66>
    1732:	85 c0       	rjmp	.+266    	; 0x183e <GPIO_writePin+0x170>
    1734:	af c0       	rjmp	.+350    	; 0x1894 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	a1 f4       	brne	.+40     	; 0x1764 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    173c:	ab e3       	ldi	r26, 0x3B	; 59
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	eb e3       	ldi	r30, 0x3B	; 59
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_writePin+0x8c>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_writePin+0x88>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	98 c0       	rjmp	.+304    	; 0x1894 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1764:	ab e3       	ldi	r26, 0x3B	; 59
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e3       	ldi	r30, 0x3B	; 59
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_writePin+0xb4>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_writePin+0xb0>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	83 c0       	rjmp	.+262    	; 0x1894 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	a1 f4       	brne	.+40     	; 0x17bc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1794:	a8 e3       	ldi	r26, 0x38	; 56
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e3       	ldi	r30, 0x38	; 56
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_writePin+0xe4>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_writePin+0xe0>
    17b6:	84 2b       	or	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	6c c0       	rjmp	.+216    	; 0x1894 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17bc:	a8 e3       	ldi	r26, 0x38	; 56
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_writePin+0x10c>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_writePin+0x108>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	57 c0       	rjmp	.+174    	; 0x1894 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	a1 f4       	brne	.+40     	; 0x1814 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17ec:	a5 e3       	ldi	r26, 0x35	; 53
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_writePin+0x13c>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_writePin+0x138>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	40 c0       	rjmp	.+128    	; 0x1894 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1814:	a5 e3       	ldi	r26, 0x35	; 53
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <GPIO_writePin+0x164>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <GPIO_writePin+0x160>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	2b c0       	rjmp	.+86     	; 0x1894 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	a1 f4       	brne	.+40     	; 0x186c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1844:	a2 e3       	ldi	r26, 0x32	; 50
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e2 e3       	ldi	r30, 0x32	; 50
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <GPIO_writePin+0x194>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <GPIO_writePin+0x190>
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    186c:	a2 e3       	ldi	r26, 0x32	; 50
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e2 e3       	ldi	r30, 0x32	; 50
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_writePin+0x1bc>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_writePin+0x1b8>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_readPin+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_readPin+0x8>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18b6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <GPIO_readPin+0x1c>
    18be:	84 c0       	rjmp	.+264    	; 0x19c8 <GPIO_readPin+0x124>
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	84 30       	cpi	r24, 0x04	; 4
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <GPIO_readPin+0x24>
    18c6:	80 c0       	rjmp	.+256    	; 0x19c8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	2c 83       	std	Y+4, r18	; 0x04
    18d2:	4c 81       	ldd	r20, Y+4	; 0x04
    18d4:	5d 81       	ldd	r21, Y+5	; 0x05
    18d6:	41 30       	cpi	r20, 0x01	; 1
    18d8:	51 05       	cpc	r21, r1
    18da:	79 f1       	breq	.+94     	; 0x193a <GPIO_readPin+0x96>
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	91 05       	cpc	r25, r1
    18e4:	34 f4       	brge	.+12     	; 0x18f2 <GPIO_readPin+0x4e>
    18e6:	2c 81       	ldd	r18, Y+4	; 0x04
    18e8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ea:	21 15       	cp	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	69 f0       	breq	.+26     	; 0x190a <GPIO_readPin+0x66>
    18f0:	6b c0       	rjmp	.+214    	; 0x19c8 <GPIO_readPin+0x124>
    18f2:	4c 81       	ldd	r20, Y+4	; 0x04
    18f4:	5d 81       	ldd	r21, Y+5	; 0x05
    18f6:	42 30       	cpi	r20, 0x02	; 2
    18f8:	51 05       	cpc	r21, r1
    18fa:	b9 f1       	breq	.+110    	; 0x196a <GPIO_readPin+0xc6>
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <GPIO_readPin+0x64>
    1906:	49 c0       	rjmp	.+146    	; 0x199a <GPIO_readPin+0xf6>
    1908:	5f c0       	rjmp	.+190    	; 0x19c8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    190a:	e9 e3       	ldi	r30, 0x39	; 57
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a9 01       	movw	r20, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_readPin+0x7e>
    191e:	55 95       	asr	r21
    1920:	47 95       	ror	r20
    1922:	8a 95       	dec	r24
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_readPin+0x7a>
    1926:	ca 01       	movw	r24, r20
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	90 70       	andi	r25, 0x00	; 0
    192c:	88 23       	and	r24, r24
    192e:	19 f0       	breq	.+6      	; 0x1936 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	49 c0       	rjmp	.+146    	; 0x19c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1936:	19 82       	std	Y+1, r1	; 0x01
    1938:	47 c0       	rjmp	.+142    	; 0x19c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    193a:	e6 e3       	ldi	r30, 0x36	; 54
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_readPin+0xae>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_readPin+0xaa>
    1956:	ca 01       	movw	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	88 23       	and	r24, r24
    195e:	19 f0       	breq	.+6      	; 0x1966 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	31 c0       	rjmp	.+98     	; 0x19c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1966:	19 82       	std	Y+1, r1	; 0x01
    1968:	2f c0       	rjmp	.+94     	; 0x19c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    196a:	e3 e3       	ldi	r30, 0x33	; 51
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <GPIO_readPin+0xde>
    197e:	55 95       	asr	r21
    1980:	47 95       	ror	r20
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <GPIO_readPin+0xda>
    1986:	ca 01       	movw	r24, r20
    1988:	81 70       	andi	r24, 0x01	; 1
    198a:	90 70       	andi	r25, 0x00	; 0
    198c:	88 23       	and	r24, r24
    198e:	19 f0       	breq	.+6      	; 0x1996 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	19 c0       	rjmp	.+50     	; 0x19c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1996:	19 82       	std	Y+1, r1	; 0x01
    1998:	17 c0       	rjmp	.+46     	; 0x19c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    199a:	e0 e3       	ldi	r30, 0x30	; 48
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <GPIO_readPin+0x10e>
    19ae:	55 95       	asr	r21
    19b0:	47 95       	ror	r20
    19b2:	8a 95       	dec	r24
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <GPIO_readPin+0x10a>
    19b6:	ca 01       	movw	r24, r20
    19b8:	81 70       	andi	r24, 0x01	; 1
    19ba:	90 70       	andi	r25, 0x00	; 0
    19bc:	88 23       	and	r24, r24
    19be:	19 f0       	breq	.+6      	; 0x19c6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19c6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <GPIO_setupPortDirection+0x6>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <GPIO_setupPortDirection+0x8>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	90 f5       	brcc	.+100    	; 0x1a54 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3c 83       	std	Y+4, r19	; 0x04
    19f8:	2b 83       	std	Y+3, r18	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	d1 f0       	breq	.+52     	; 0x1a38 <GPIO_setupPortDirection+0x5e>
    1a04:	2b 81       	ldd	r18, Y+3	; 0x03
    1a06:	3c 81       	ldd	r19, Y+4	; 0x04
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <GPIO_setupPortDirection+0x3e>
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <GPIO_setupPortDirection+0x54>
    1a16:	1e c0       	rjmp	.+60     	; 0x1a54 <GPIO_setupPortDirection+0x7a>
    1a18:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	81 f0       	breq	.+32     	; 0x1a42 <GPIO_setupPortDirection+0x68>
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	91 05       	cpc	r25, r1
    1a2a:	81 f0       	breq	.+32     	; 0x1a4c <GPIO_setupPortDirection+0x72>
    1a2c:	13 c0       	rjmp	.+38     	; 0x1a54 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a2e:	ea e3       	ldi	r30, 0x3A	; 58
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	80 83       	st	Z, r24
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a38:	e7 e3       	ldi	r30, 0x37	; 55
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	80 83       	st	Z, r24
    1a40:	09 c0       	rjmp	.+18     	; 0x1a54 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a42:	e4 e3       	ldi	r30, 0x34	; 52
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	80 83       	st	Z, r24
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a4c:	e1 e3       	ldi	r30, 0x31	; 49
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <GPIO_writePort+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <GPIO_writePort+0x8>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	90 f5       	brcc	.+100    	; 0x1adc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	3c 83       	std	Y+4, r19	; 0x04
    1a80:	2b 83       	std	Y+3, r18	; 0x03
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	91 05       	cpc	r25, r1
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <GPIO_writePort+0x5e>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	22 30       	cpi	r18, 0x02	; 2
    1a92:	31 05       	cpc	r19, r1
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <GPIO_writePort+0x3e>
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <GPIO_writePort+0x54>
    1a9e:	1e c0       	rjmp	.+60     	; 0x1adc <GPIO_writePort+0x7a>
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa4:	22 30       	cpi	r18, 0x02	; 2
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	81 f0       	breq	.+32     	; 0x1aca <GPIO_writePort+0x68>
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	81 f0       	breq	.+32     	; 0x1ad4 <GPIO_writePort+0x72>
    1ab4:	13 c0       	rjmp	.+38     	; 0x1adc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ab6:	eb e3       	ldi	r30, 0x3B	; 59
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 83       	st	Z, r24
    1abe:	0e c0       	rjmp	.+28     	; 0x1adc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ac0:	e8 e3       	ldi	r30, 0x38	; 56
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	80 83       	st	Z, r24
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1aca:	e5 e3       	ldi	r30, 0x35	; 53
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	80 83       	st	Z, r24
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ad4:	e2 e3       	ldi	r30, 0x32	; 50
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	80 83       	st	Z, r24
			break;
		}
	}
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <GPIO_readPort+0x6>
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <GPIO_readPort+0x8>
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1af8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	90 f5       	brcc	.+100    	; 0x1b64 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3c 83       	std	Y+4, r19	; 0x04
    1b08:	2b 83       	std	Y+3, r18	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	d1 f0       	breq	.+52     	; 0x1b48 <GPIO_readPort+0x5e>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <GPIO_readPort+0x3e>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <GPIO_readPort+0x54>
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <GPIO_readPort+0x7a>
    1b28:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	81 f0       	breq	.+32     	; 0x1b52 <GPIO_readPort+0x68>
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	83 30       	cpi	r24, 0x03	; 3
    1b38:	91 05       	cpc	r25, r1
    1b3a:	81 f0       	breq	.+32     	; 0x1b5c <GPIO_readPort+0x72>
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b3e:	e9 e3       	ldi	r30, 0x39	; 57
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	0e c0       	rjmp	.+28     	; 0x1b64 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b48:	e6 e3       	ldi	r30, 0x36	; 54
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	09 c0       	rjmp	.+18     	; 0x1b64 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b52:	e3 e3       	ldi	r30, 0x33	; 51
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b5c:	e0 e3       	ldi	r30, 0x30	; 48
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1b9e:	80 91 6a 00 	lds	r24, 0x006A
    1ba2:	90 91 6b 00 	lds	r25, 0x006B
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1baa:	e0 91 6a 00 	lds	r30, 0x006A
    1bae:	f0 91 6b 00 	lds	r31, 0x006B
    1bb2:	09 95       	icall
	}
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	2f 93       	push	r18
    1be6:	3f 93       	push	r19
    1be8:	4f 93       	push	r20
    1bea:	5f 93       	push	r21
    1bec:	6f 93       	push	r22
    1bee:	7f 93       	push	r23
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	ef 93       	push	r30
    1bfa:	ff 93       	push	r31
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1c04:	80 91 6a 00 	lds	r24, 0x006A
    1c08:	90 91 6b 00 	lds	r25, 0x006B
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <__vector_19+0x40>
	{
		(*g_callBackPtr)();
    1c10:	e0 91 6a 00 	lds	r30, 0x006A
    1c14:	f0 91 6b 00 	lds	r31, 0x006B
    1c18:	09 95       	icall
	}
}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	bf 91       	pop	r27
    1c24:	af 91       	pop	r26
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <Timer0_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_init(Timer0_ConfigType *ConfigPtr)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <Timer0_init+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <Timer0_init+0x8>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigPtr->mode)
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	80 81       	ld	r24, Z
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	3c 83       	std	Y+4, r19	; 0x04
    1c5c:	2b 83       	std	Y+3, r18	; 0x03
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	31 f0       	breq	.+12     	; 0x1c72 <Timer0_init+0x32>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	21 30       	cpi	r18, 0x01	; 1
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	b1 f0       	breq	.+44     	; 0x1c9c <Timer0_init+0x5c>
    1c70:	33 c0       	rjmp	.+102    	; 0x1cd8 <Timer0_init+0x98>
	{
	case normal:
		TCNT0 = ConfigPtr->initial_val; // Set Timer initial value to 195
    1c72:	a2 e5       	ldi	r26, 0x52	; 82
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e9 81       	ldd	r30, Y+1	; 0x01
    1c78:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7a:	81 81       	ldd	r24, Z+1	; 0x01
    1c7c:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0 = 1
		 * 2. Normal Mode WGM01 = 0 & WGM00 = 0
		 * 3. Normal Mode COM00 = 0 & COM01 = 0
		 * 4. clock selected
		 */
		TCCR0 = (1 << FOC0) | (ConfigPtr->clock);
    1c7e:	a3 e5       	ldi	r26, 0x53	; 83
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	83 81       	ldd	r24, Z+3	; 0x03
    1c88:	80 68       	ori	r24, 0x80	; 128
    1c8a:	8c 93       	st	X, r24

		TIMSK |= (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    1c8c:	a9 e5       	ldi	r26, 0x59	; 89
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e9 e5       	ldi	r30, 0x59	; 89
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	81 60       	ori	r24, 0x01	; 1
    1c98:	8c 93       	st	X, r24
    1c9a:	1e c0       	rjmp	.+60     	; 0x1cd8 <Timer0_init+0x98>
		break;

	case compare:
		TCNT0 = ConfigPtr->initial_val; // Set Timer initial value to 0
    1c9c:	a2 e5       	ldi	r26, 0x52	; 82
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca4:	81 81       	ldd	r24, Z+1	; 0x01
    1ca6:	8c 93       	st	X, r24

		OCR0  = ConfigPtr->compare_val; // Set Compare Value
    1ca8:	ac e5       	ldi	r26, 0x5C	; 92
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0 = 1
		 * 2. CTC Mode WGM01 = 1 & WGM00 = 0
		 * 3. Clear OC0 on compare match so COM00 = 0 & COM01 = 1
		 * 4. clock selected
		 */
		TCCR0 |= (1 << FOC0) | (1 << WGM01) | (ConfigPtr->clock) | (1 << COM01);
    1cb4:	a3 e5       	ldi	r26, 0x53	; 83
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e3 e5       	ldi	r30, 0x53	; 83
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	90 81       	ld	r25, Z
    1cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc2:	83 81       	ldd	r24, Z+3	; 0x03
    1cc4:	89 2b       	or	r24, r25
    1cc6:	88 6a       	ori	r24, 0xA8	; 168
    1cc8:	8c 93       	st	X, r24

		TIMSK |= (1 << OCIE0); // Enable Timer0 Compare Interrupt
    1cca:	a9 e5       	ldi	r26, 0x59	; 89
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e9 e5       	ldi	r30, 0x59	; 89
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	82 60       	ori	r24, 0x02	; 2
    1cd6:	8c 93       	st	X, r24
		break;
	}
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <Set_Callback>:

void Set_Callback(void (*a_ptr)(void))
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <Set_Callback+0x6>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	90 93 6b 00 	sts	0x006B, r25
    1cfc:	80 93 6a 00 	sts	0x006A, r24
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <Timer0_Deinit>:

void Timer0_Deinit(void)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1d12:	e3 e5       	ldi	r30, 0x53	; 83
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	10 82       	st	Z, r1
}
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1d26:	e0 e2       	ldi	r30, 0x20	; 32
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	80 83       	st	Z, r24
	TWSR = 0x00;
    1d2e:	e1 e2       	ldi	r30, 0x21	; 33
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1d34:	e2 e2       	ldi	r30, 0x22	; 34
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1d3c:	e6 e5       	ldi	r30, 0x56	; 86
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	84 e0       	ldi	r24, 0x04	; 4
    1d42:	80 83       	st	Z, r24
}
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <TWI_start>:

void TWI_start(void)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1d52:	e6 e5       	ldi	r30, 0x56	; 86
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	84 ea       	ldi	r24, 0xA4	; 164
    1d58:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d5a:	e6 e5       	ldi	r30, 0x56	; 86
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 23       	and	r24, r24
    1d62:	dc f7       	brge	.-10     	; 0x1d5a <TWI_start+0x10>
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <TWI_stop>:

void TWI_stop(void)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d72:	e6 e5       	ldi	r30, 0x56	; 86
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	84 e9       	ldi	r24, 0x94	; 148
    1d78:	80 83       	st	Z, r24
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1d8c:	e3 e2       	ldi	r30, 0x23	; 35
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d94:	e6 e5       	ldi	r30, 0x56	; 86
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	84 e8       	ldi	r24, 0x84	; 132
    1d9a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d9c:	e6 e5       	ldi	r30, 0x56	; 86
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	88 23       	and	r24, r24
    1da4:	dc f7       	brge	.-10     	; 0x1d9c <TWI_writeByte+0x1c>
}
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1db6:	e6 e5       	ldi	r30, 0x56	; 86
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	84 ec       	ldi	r24, 0xC4	; 196
    1dbc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dbe:	e6 e5       	ldi	r30, 0x56	; 86
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	dc f7       	brge	.-10     	; 0x1dbe <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1dc8:	e3 e2       	ldi	r30, 0x23	; 35
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ddc:	e6 e5       	ldi	r30, 0x56	; 86
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	84 e8       	ldi	r24, 0x84	; 132
    1de2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1de4:	e6 e5       	ldi	r30, 0x56	; 86
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	dc f7       	brge	.-10     	; 0x1de4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1dee:	e3 e2       	ldi	r30, 0x23	; 35
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e04:	e1 e2       	ldi	r30, 0x21	; 33
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 7f       	andi	r24, 0xF8	; 248
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <UART_init+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <UART_init+0x8>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <UART_init+0xa>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	6b 83       	std	Y+3, r22	; 0x03
    1e28:	7c 83       	std	Y+4, r23	; 0x04
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    1e2e:	1a 82       	std	Y+2, r1	; 0x02
    1e30:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e32:	eb e2       	ldi	r30, 0x2B	; 43
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1e3a:	ea e2       	ldi	r30, 0x2A	; 42
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	88 e1       	ldi	r24, 0x18	; 24
    1e40:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    1e42:	e0 e4       	ldi	r30, 0x40	; 64
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	86 e8       	ldi	r24, 0x86	; 134
    1e48:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	ad 81       	ldd	r26, Y+5	; 0x05
    1e50:	be 81       	ldd	r27, Y+6	; 0x06
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	aa 1f       	adc	r26, r26
    1e58:	bb 1f       	adc	r27, r27
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	aa 1f       	adc	r26, r26
    1e60:	bb 1f       	adc	r27, r27
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	aa 1f       	adc	r26, r26
    1e68:	bb 1f       	adc	r27, r27
    1e6a:	9c 01       	movw	r18, r24
    1e6c:	ad 01       	movw	r20, r26
    1e6e:	80 e4       	ldi	r24, 0x40	; 64
    1e70:	92 e4       	ldi	r25, 0x42	; 66
    1e72:	af e0       	ldi	r26, 0x0F	; 15
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__udivmodsi4>
    1e7e:	da 01       	movw	r26, r20
    1e80:	c9 01       	movw	r24, r18
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1e88:	e0 e4       	ldi	r30, 0x40	; 64
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	89 2f       	mov	r24, r25
    1e92:	99 27       	eor	r25, r25
    1e94:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1e96:	e9 e2       	ldi	r30, 0x29	; 41
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	80 83       	st	Z, r24
}
    1e9e:	26 96       	adiw	r28, 0x06	; 6
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ebc:	eb e2       	ldi	r30, 0x2B	; 43
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	80 72       	andi	r24, 0x20	; 32
    1ec8:	90 70       	andi	r25, 0x00	; 0
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	b9 f3       	breq	.-18     	; 0x1ebc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1ece:	ec e2       	ldi	r30, 0x2C	; 44
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1ee6:	eb e2       	ldi	r30, 0x2B	; 43
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	88 23       	and	r24, r24
    1eee:	dc f7       	brge	.-10     	; 0x1ee6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1ef0:	ec e2       	ldi	r30, 0x2C	; 44
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
}
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <UART_sendString+0x6>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9b 83       	std	Y+3, r25	; 0x03
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f0c:	19 82       	std	Y+1, r1	; 0x01
    1f0e:	0e c0       	rjmp	.+28     	; 0x1f2c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e2 0f       	add	r30, r18
    1f1e:	f3 1f       	adc	r31, r19
    1f20:	80 81       	ld	r24, Z
    1f22:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <UART_sendByte>
		i++;
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	8f 5f       	subi	r24, 0xFF	; 255
    1f2a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	fc 01       	movw	r30, r24
    1f38:	e2 0f       	add	r30, r18
    1f3a:	f3 1f       	adc	r31, r19
    1f3c:	80 81       	ld	r24, Z
    1f3e:	88 23       	and	r24, r24
    1f40:	39 f7       	brne	.-50     	; 0x1f10 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <UART_receiveString+0xa>
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	9b 83       	std	Y+3, r25	; 0x03
    1f60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f62:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	8c 01       	movw	r16, r24
    1f70:	02 0f       	add	r16, r18
    1f72:	13 1f       	adc	r17, r19
    1f74:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <UART_recieveByte>
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 83       	st	Z, r24
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	8c 01       	movw	r16, r24
    1f90:	02 0f       	add	r16, r18
    1f92:	13 1f       	adc	r17, r19
    1f94:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <UART_recieveByte>
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	e2 0f       	add	r30, r18
    1faa:	f3 1f       	adc	r31, r19
    1fac:	80 81       	ld	r24, Z
    1fae:	83 32       	cpi	r24, 0x23	; 35
    1fb0:	31 f7       	brne	.-52     	; 0x1f7e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	e2 0f       	add	r30, r18
    1fc0:	f3 1f       	adc	r31, r19
    1fc2:	10 82       	st	Z, r1
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	08 95       	ret

00001fd4 <__udivmodsi4>:
    1fd4:	a1 e2       	ldi	r26, 0x21	; 33
    1fd6:	1a 2e       	mov	r1, r26
    1fd8:	aa 1b       	sub	r26, r26
    1fda:	bb 1b       	sub	r27, r27
    1fdc:	fd 01       	movw	r30, r26
    1fde:	0d c0       	rjmp	.+26     	; 0x1ffa <__udivmodsi4_ep>

00001fe0 <__udivmodsi4_loop>:
    1fe0:	aa 1f       	adc	r26, r26
    1fe2:	bb 1f       	adc	r27, r27
    1fe4:	ee 1f       	adc	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	a2 17       	cp	r26, r18
    1fea:	b3 07       	cpc	r27, r19
    1fec:	e4 07       	cpc	r30, r20
    1fee:	f5 07       	cpc	r31, r21
    1ff0:	20 f0       	brcs	.+8      	; 0x1ffa <__udivmodsi4_ep>
    1ff2:	a2 1b       	sub	r26, r18
    1ff4:	b3 0b       	sbc	r27, r19
    1ff6:	e4 0b       	sbc	r30, r20
    1ff8:	f5 0b       	sbc	r31, r21

00001ffa <__udivmodsi4_ep>:
    1ffa:	66 1f       	adc	r22, r22
    1ffc:	77 1f       	adc	r23, r23
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	1a 94       	dec	r1
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <__udivmodsi4_loop>
    2006:	60 95       	com	r22
    2008:	70 95       	com	r23
    200a:	80 95       	com	r24
    200c:	90 95       	com	r25
    200e:	9b 01       	movw	r18, r22
    2010:	ac 01       	movw	r20, r24
    2012:	bd 01       	movw	r22, r26
    2014:	cf 01       	movw	r24, r30
    2016:	08 95       	ret

00002018 <__prologue_saves__>:
    2018:	2f 92       	push	r2
    201a:	3f 92       	push	r3
    201c:	4f 92       	push	r4
    201e:	5f 92       	push	r5
    2020:	6f 92       	push	r6
    2022:	7f 92       	push	r7
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	ca 1b       	sub	r28, r26
    2042:	db 0b       	sbc	r29, r27
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	09 94       	ijmp

00002050 <__epilogue_restores__>:
    2050:	2a 88       	ldd	r2, Y+18	; 0x12
    2052:	39 88       	ldd	r3, Y+17	; 0x11
    2054:	48 88       	ldd	r4, Y+16	; 0x10
    2056:	5f 84       	ldd	r5, Y+15	; 0x0f
    2058:	6e 84       	ldd	r6, Y+14	; 0x0e
    205a:	7d 84       	ldd	r7, Y+13	; 0x0d
    205c:	8c 84       	ldd	r8, Y+12	; 0x0c
    205e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2060:	aa 84       	ldd	r10, Y+10	; 0x0a
    2062:	b9 84       	ldd	r11, Y+9	; 0x09
    2064:	c8 84       	ldd	r12, Y+8	; 0x08
    2066:	df 80       	ldd	r13, Y+7	; 0x07
    2068:	ee 80       	ldd	r14, Y+6	; 0x06
    206a:	fd 80       	ldd	r15, Y+5	; 0x05
    206c:	0c 81       	ldd	r16, Y+4	; 0x04
    206e:	1b 81       	ldd	r17, Y+3	; 0x03
    2070:	aa 81       	ldd	r26, Y+2	; 0x02
    2072:	b9 81       	ldd	r27, Y+1	; 0x01
    2074:	ce 0f       	add	r28, r30
    2076:	d1 1d       	adc	r29, r1
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	ed 01       	movw	r28, r26
    2084:	08 95       	ret

00002086 <_exit>:
    2086:	f8 94       	cli

00002088 <__stop_program>:
    2088:	ff cf       	rjmp	.-2      	; 0x2088 <__stop_program>
